This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src, supabase, .env, .env.example, .eslintignore, .gitignore, .mcp.json, AGENTS.md, CLAUDE.md, components.json, eslint.config.js, index.html, mcp.json, package-lock.json, package.json, postcss.config.js, README.md, serena.zip, tailwind.config.js, tsconfig.app.json, tsconfig.json, tsconfig.node.json, vercel.json, vite.config.ts, api
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
api/
  claude/
    v1/
      messages.ts
  extract-file.ts
  extract-premium.ts
  extract.ts
  stripe-webhook.ts
src/
  api/
    claude.ts
    extract-premium.ts
    extract.ts
    linkedin.ts
    supabase.ts
  components/
    common/
      Auth.tsx
      ExtractButton.tsx
      ExtractUsageDisplay.tsx
      PaywallGuard.tsx
      PaywallModal.tsx
      PlatformSelector.tsx
      ProtectedRoute.tsx
      SavedPosts.tsx
      UpgradeButton.tsx
    graphics/
      ContentFlowGraphic.tsx
      HowItWorks.tsx
      HowItWorksGraphic.tsx
    landing/
      CTASection.tsx
      DecorativeBackground.tsx
      FeaturesGrid.tsx
      FooterBar.tsx
      HeaderBar.tsx
      HeroSection.tsx
      PricingSection.tsx
    ui/
      alert-dialog.tsx
      badge.tsx
      button.tsx
      card.tsx
      dialog.tsx
      input.tsx
      label.tsx
      progress.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
    Logo.tsx
  config/
    linkedin-style-examples.md
    platforms.ts
  design-system/
    components/
      ActionButtons/
        DeleteButton.tsx
        EditButton.tsx
        index.ts
        InstagramShareButton.tsx
        LinkedInShareButton.tsx
        SaveButton.tsx
        XShareButton.tsx
      Button/
        Button.tsx
        Button.types.ts
        index.ts
        variants.ts
      Icons/
        InstagramLogo.tsx
        XLogo.tsx
    tokens/
      colors.ts
      spacing.ts
      typography.ts
    BUTTON_GUIDELINES.md
    typography-hierarchy.ts
  hooks/
    use-toast.ts
    useTypewriter.ts
    useUsageTracking.ts
  lib/
    utils.ts
  pages/
    Generator.tsx
    Generator.tsx.backup
    Imprint.tsx
    Landing.tsx
    Privacy.tsx
    Settings.tsx
    SignUp.tsx
    Terms.tsx
  styles/
    animations.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
supabase/
  config.toml
  seed.sql
.env.example
.eslintignore
.gitignore
.mcp.json
AGENTS.md
CLAUDE.md
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vercel.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="api/extract-file.ts">
// Vercel Function: File extraction (PDF/DOCX/Images OCR/Audio) → unified text
// Uses hosted providers so end users need no local setup.
// Providers (env-configured):
// - Unstructured API for documents/images OCR: UNSTRUCTURED_API_KEY, UNSTRUCTURED_API_URL (optional)
// - Deepgram for audio speech-to-text: DEEPGRAM_API_KEY

export const config = { runtime: 'edge' } as const;

const CORS: Record<string, string> = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type',
};

const MAX_BYTES = 20 * 1024 * 1024; // 20MB

function getEnv(name: string): string | undefined {
  try {
    if (typeof process !== 'undefined' && (process as unknown as { env?: Record<string, string | undefined> }).env) {
      return ((process as unknown as { env?: Record<string, string | undefined> }).env || {})[name];
    }
  } catch (e) {
    // ignore
  }
  return undefined;
}

function chooseDocProvider() {
  const base = getEnv('UNSTRUCTURED_API_URL') || 'https://api.unstructuredapp.io';
  const key = getEnv('UNSTRUCTURED_API_KEY');
  return { base, key };
}

function chooseAudioProvider() {
  const key = getEnv('DEEPGRAM_API_KEY');
  return { key };
}

type UnstructuredElement = { text?: string; type?: string };
type ExtractResult = { text: string; title?: string; meta: Record<string, unknown> };

async function extractWithUnstructured(file: File): Promise<ExtractResult> {
  const { base, key } = chooseDocProvider();
  if (!key) {
    throw new Error('UNSTRUCTURED_API_KEY not configured');
  }
  const url = `${base.replace(/\/$/, '')}/general/v0/general?strategy=hi_res&ocr_languages=deu`;
  const form = new FormData();
  form.append('files', file, file.name);
  // Optional: languages hint e.g., 'deu'
  // form.append('ocr_languages', 'deu');
  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'unstructured-api-key': key,
      'Accept': 'application/json',
    },
    body: form,
  });
  if (!res.ok) {
    const txt = await res.text().catch(() => '');
    throw new Error(`Unstructured error ${res.status}: ${txt.slice(0, 200)}`);
  }
  const data = await res.json();
  // data is typically an array of elements
  const elements: UnstructuredElement[] = Array.isArray(data) ? (data as UnstructuredElement[]) : [];
  const parts: string[] = [];
  let title: string | undefined;
  for (const el of elements) {
    const t = (el?.text ?? '').trim();
    if (t) parts.push(t);
    const et = String(el?.type || '');
    if (!title && /title|header/i.test(et) && t) title = t.split('\n')[0].slice(0, 140);
  }
  const text = parts.join('\n\n').replace(/\n{3,}/g, '\n\n').trim();
  return { text, title, meta: { provider: 'unstructured', elements: elements?.length ?? 0 } };
}

async function transcribeWithDeepgram(file: File): Promise<{ text: string; meta: Record<string, unknown> }> {
  const { key } = chooseAudioProvider();
  if (!key) {
    throw new Error('DEEPGRAM_API_KEY not configured');
  }
  const params = new URLSearchParams({ model: 'nova-2-general', smart_format: 'true', language: 'de' });
  const url = `https://api.deepgram.com/v1/listen?${params}`;
  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'Authorization': `Token ${key}`,
      'Content-Type': file.type || 'application/octet-stream',
    },
    body: (file as Blob).stream ? (file as Blob).stream() : file, // Edge supports Blob.stream()
  });
  if (!res.ok) {
    const txt = await res.text().catch(() => '');
    throw new Error(`Deepgram error ${res.status}: ${txt.slice(0, 200)}`);
  }
  const data: unknown = await res.json();
  const dg: { results?: { channels?: { alternatives?: { transcript?: string; paragraphs?: { transcript?: string } }[] }[] }, metadata?: { duration?: number } } = (data as any);
  const alt = dg?.results?.channels?.[0]?.alternatives?.[0];
  const text = (alt?.paragraphs?.transcript || alt?.transcript || '').trim();
  return { text, meta: { provider: 'deepgram', duration: dg?.metadata?.duration } };
}

function pickKind(file: File): 'audio' | 'pdf' | 'docx' | 'image' | 'text' | 'unknown' {
  const name = (file.name || '').toLowerCase();
  const type = (file.type || '').toLowerCase();
  if (type.startsWith('audio/')) return 'audio';
  if (type === 'application/pdf' || name.endsWith('.pdf')) return 'pdf';
  if (name.endsWith('.docx') || type.includes('officedocument.wordprocessingml.document')) return 'docx';
  if (type.startsWith('image/')) return 'image';
  if (type.startsWith('text/') || name.endsWith('.txt') || name.endsWith('.md')) return 'text';
  return 'unknown';
}

export default async function handler(req: Request) {
  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: { ...CORS, 'Access-Control-Allow-Headers': 'Content-Type' } });
  }
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ error: 'Method not allowed' }), { status: 405, headers: { ...CORS, 'Content-Type': 'application/json' } });
  }
  try {
    const form = await req.formData();
    const files = form.getAll('file').filter((v): v is File => v instanceof File);
    if (!files.length) {
      return new Response(JSON.stringify({ error: 'No file uploaded. Use field name "file".' }), { status: 400, headers: { ...CORS, 'Content-Type': 'application/json' } });
    }
    const file = files[0];
    if (file.size > MAX_BYTES) {
      return new Response(JSON.stringify({ error: 'File too large. Max 20MB.' }), { status: 413, headers: { ...CORS, 'Content-Type': 'application/json' } });
    }

    const kind = pickKind(file);
    const payload: ExtractResult = { text: '', title: undefined, meta: { kind, bytes: file.size } };

    if (kind === 'text') {
      payload.text = (await file.text()).trim();
    } else if (kind === 'audio') {
      const r = await transcribeWithDeepgram(file);
      payload.text = r.text;
      payload.meta = { ...payload.meta, ...r.meta };
    } else if (kind === 'pdf' || kind === 'docx' || kind === 'image' || kind === 'unknown') {
      // Route documents and images to Unstructured (unknown tries anyway)
      const r = await extractWithUnstructured(file);
      payload.text = r.text;
      payload.title = r.title;
      payload.meta = { ...payload.meta, ...r.meta };
    }

    if (!payload.text || payload.text.trim().length === 0) {
      return new Response(JSON.stringify({ error: 'Extraction produced empty text.' }), { status: 422, headers: { ...CORS, 'Content-Type': 'application/json' } });
    }

    // Extract links from text for convenience (HTTP/HTTPS only)
    try {
      const linkSet = new Set<string>();
      const rx = /https?:\/\/[^\s<>"']+/gi;
      let m: RegExpExecArray | null;
      while ((m = rx.exec(payload.text)) !== null) {
        const url = m[0]
          .replace(/[)\]}>,.;:]+$/g, '') // trim trailing punctuation
          .replace(/^\((.*)\)$/g, '$1'); // trim wrapping parens
        try {
          const u = new URL(url);
          if (/^https?:$/.test(u.protocol)) linkSet.add(u.toString());
        } catch {}
      }
      const links = Array.from(linkSet).slice(0, 100);
      payload.meta = { ...(payload.meta || {}), links };
    } catch { /* noop */ }

    return new Response(JSON.stringify(payload), { status: 200, headers: { ...CORS, 'Content-Type': 'application/json' } });
  } catch (err: unknown) {
    console.error('extract-file error', err);
    const msg = (err as { message?: string })?.message || 'Internal error';
    return new Response(JSON.stringify({ error: msg }), { status: 500, headers: { ...CORS, 'Content-Type': 'application/json' } });
  }
}
</file>

<file path="src/config/linkedin-style-examples.md">
# LinkedIn Stil-Beispiele

Füge hier kurze Beispiele von LinkedIn-Posts ein, deren Stil dir gefällt.
Diese Beispiele werden als Stil-Referenz in die Prompting-Logik injiziert,
um Ton, Hook, Satzlänge und Struktur zu imitieren – die strikten Regeln
für Formatierung bleiben dennoch erhalten.

Hinweise:
- 3–8 Beispiele sind ideal; halte sie prägnant.
- Entferne Emojis/Hashtags, wenn sie nicht Teil deines gewünschten Stils sind.
- Trenne Beispiele klar, z. B. mit `---`.

---

Beispiel 1:
LINKEDIN:
Der eine Satz, der alles ändert.

Du denkst, du brauchst mehr Zeit.

Du brauchst Klarheit.

Klarheit kommt durch Tun.

Kleinstes nächstes Experiment. Heute.

Was ist es?

---

Beispiel 2:
LINKEDIN:
Produktivität ist kein Tool-Problem.

Es ist ein Energie-Problem.

3 Dinge, die meine Energie retten:
- Schlaf wie ein Ritual.
- Meetings halbieren.
- Not-to-do-Liste.

Was streichst du diese Woche?

---

Beispiel 3 (User-Beispiel):
LINKEDIN:
Was würdest du dafür geben, deine Ziele mit 95 % Wahrscheinlichkeit zu erreichen?

Eine Studie von Harkin et al. (2016) zeigt: 
Regelmäßige Unterstützung macht genau das möglich.

Ich habe diese 4 Prinzipien in mein NLP-Accountability Coaching integriert:

--

1️⃣ Verantwortlichkeit: Soziale Verbindungen sind der Schlüssel zu intrinsischer Motivation. 

2️⃣ Präzision: Klare Ziele und Zwischenziele schaffen Fokus und Selbstkontrolle. 

3️⃣ Messbarkeit: Fortschritte zu messen hält dich motiviert und steigert deine Leistung. 

4️⃣ Zeitliche Struktur: Wer seine Zeit gut strukturiert, erzielt doppelt so gute Ergebnisse.

--

Studien inspirieren, Taten transformieren.

Wie wirst du ein Prinzip auf dein Leben anwenden? 

Folge mir für Produktivitätshacks, die dich weiterbringen. 🚀
</file>

<file path="src/pages/Generator.tsx.backup">
import { useEffect, useState } from "react";
import { linkedInPostsFromNewsletter, xTweetsFromBlog, instagramPostsFromBlog, suggestTopicIdeasFromInputs } from "@/api/claude";
import { savePost } from "@/api/supabase";
import { SavedPosts } from "@/components/common/SavedPosts";
import {
  createLinkedInDraftPost,
  createLinkedInShareUrl,
  LinkedInAPIError,
} from "@/api/linkedin";
import { Button } from "@/components/ui/button";
import { Button as DSButton } from "@/design-system/components/Button";
import {
  SaveButton,
  EditButton,
  LinkedInShareButton,
  XShareButton,
  InstagramShareButton,
} from "@/design-system/components/ActionButtons";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { Loader2, Settings as SettingsIcon } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Auth } from "@/components/common/Auth";
import { getSession, onAuthStateChange, signOut } from "@/api/supabase";
import { Link, useSearchParams } from "react-router-dom";
import { PlatformSelector } from "@/components/common/PlatformSelector";
import type { Platform } from "@/config/platforms";
import { PLATFORM_LABEL } from "@/config/platforms";
import { InstagramLogo } from "@/design-system/components/Icons/InstagramLogo";
import { useUsageTracking } from "@/hooks/useUsageTracking";
import { PaywallModal } from "@/components/common/PaywallModal";
import { extractFromUrl } from "@/api/extract";

export default function Generator() {
  const [searchParams] = useSearchParams();
  const [inputText, setInputText] = useState("");
  const [postsByPlatform, setPostsByPlatform] = useState<Record<Platform, string[]>>({
    linkedin: [],
    x: [],
    instagram: [],
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isExtracting, setIsExtracting] = useState(false);
  const [refreshKey, setRefreshKey] = useState(0);
  const [editing, setEditing] = useState<{ platform: Platform; index: number } | null>(null);
  const [editedContent, setEditedContent] = useState("");
  const { toast } = useToast();
  const [userEmail, setUserEmail] = useState<string | null>(null);
  const [loginOpen, setLoginOpen] = useState(false);
  const [selectedPlatforms, setSelectedPlatforms] = useState<Platform[]>(["linkedin"]);
  const [showPaywall, setShowPaywall] = useState(false);
  const { canTransform, incrementUsage, getRemainingCount, isPro } = useUsageTracking();
  // Track sidebar collapsed state to adjust content padding
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [sourceUrl, setSourceUrl] = useState("");
  const [usePremiumExtraction, setUsePremiumExtraction] = useState(false);
  const [extractionUsage, setExtractionUsage] = useState<{ used: number; limit: number; remaining: number } | null>(null);
  // Progress tracking states
  const [generationProgress, setGenerationProgress] = useState(0); // 0-100
  const [currentPlatformGenerating, setCurrentPlatformGenerating] = useState<string>("");
  const [totalPlatforms, setTotalPlatforms] = useState(0);
  const [completedPlatforms, setCompletedPlatforms] = useState(0);
  // Idea generation from uploads
  const [ideaNotes, setIdeaNotes] = useState("");
  const [ideaTexts, setIdeaTexts] = useState<string[]>([]);
  const [ideaSuggestions, setIdeaSuggestions] = useState<string[]>([]);
  const [topicCount, setTopicCount] = useState<number>(7);
  const [isSuggesting, setIsSuggesting] = useState(false);
  const [ideaLinks, setIdeaLinks] = useState<string[]>([]);
  const [tabsValue, setTabsValue] = useState<"posts" | "ideas">("posts");

  // Dev API base: use VITE_DEV_API_TARGET if set; otherwise, when on localhost, fall back to deployed URL
  const DEV_DEFAULT_TARGET = 'https://linkedin-posts-ashen.vercel.app';
  const envTarget = import.meta.env?.VITE_DEV_API_TARGET as string | undefined;
  const apiBase = envTarget && envTarget.length > 0
    ? envTarget.replace(/\/$/, '')
    : (typeof window !== 'undefined' && /^(localhost|127\.0\.0\.1)/.test(window.location.hostname)
        ? DEV_DEFAULT_TARGET
        : '');

  useEffect(() => {
    getSession().then(({ data }) => {
      setUserEmail(data.session?.user.email ?? null);
    });
    const { data: sub } = onAuthStateChange((_event, session) => {
      setUserEmail(session?.user.email ?? null);
      if (session) setLoginOpen(false);
    });
    
    // Load saved style examples
    const savedStyles = window.localStorage.getItem('styleExamples');
    if (savedStyles) {
      setStyleExamples(savedStyles);
    }
    
    return () => {
      sub?.subscription?.unsubscribe?.();
    };
  }, []);

  const handleRemix = async () => {
    // Check usage limit
    if (!canTransform()) {
      setShowPaywall(true);
      return;
    }
    
    // Initialize progress tracking
    setIsLoading(true);
    setGenerationProgress(0);
    setCompletedPlatforms(0);
    setCurrentPlatformGenerating("");
    setTotalPlatforms(selectedPlatforms.length);
    
    try {
      const next: Record<Platform, string[]> = { linkedin: [], x: [], instagram: [] };
      const progressStep = 100 / selectedPlatforms.length;
      
      // Process each platform sequentially with progress updates
      for (let i = 0; i < selectedPlatforms.length; i++) {
        const platform = selectedPlatforms[i];
        setCurrentPlatformGenerating(PLATFORM_LABEL[platform]);
        
        if (platform === "linkedin") {
          next.linkedin = await linkedInPostsFromNewsletter(inputText);
        } else if (platform === "x") {
          // Nutze den exakten X-Prompt über Claude
          next.x = await xTweetsFromBlog(inputText);
        } else if (platform === "instagram") {
          // Nutze den speziellen Instagram-Prompt
          next.instagram = await instagramPostsFromBlog(inputText);
        }
        
        // Update progress
        const newCompleted = i + 1;
        setCompletedPlatforms(newCompleted);
        setGenerationProgress(newCompleted * progressStep);
      }
      
      setPostsByPlatform(next);
      const names = selectedPlatforms.join(", ");
      toast({ title: "Beiträge erstellt!", description: `Generiert für: ${names}` });
      
      // Reset progress states
      setCurrentPlatformGenerating("");
      
      // Increment usage after successful transformation
      incrementUsage();
    } catch (error) {
      console.error("Remix error:", error);
      toast({
        title: "Fehler beim Erstellen",
        description: "LinkedIn-Beiträge konnten nicht erstellt werden.",
        variant: "destructive",
      });
      // Reset progress states on error
      setGenerationProgress(0);
      setCompletedPlatforms(0);
      setCurrentPlatformGenerating("");
    } finally {
      setIsLoading(false);
    }
  };

  const handleExtract = async () => {
    if (!sourceUrl) return;
    
    // Check if trying to use premium without Pro
    if (usePremiumExtraction && !isPro) {
      setShowPaywall(true);
      return;
    }
    
    setIsExtracting(true);
    try {
      let result;
      
      if (usePremiumExtraction && isPro) {
        // Premium extraction with Firecrawl
        const { data: session } = await getSession();
        if (!session) throw new Error("Keine aktive Session");
        
        const response = await fetch("/api/extract-premium", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${session?.session?.access_token}`,
          },
          body: JSON.stringify({ url: sourceUrl }),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          if (data.usage) {
            setExtractionUsage(data.usage);
          }
          throw new Error(data.error || "Premium-Extraktion fehlgeschlagen");
        }
        
        result = {
          title: data.title,
          content: data.markdown || data.content || "",
        };
        
        // Update usage information
        if (data.usage) {
          setExtractionUsage(data.usage);
          toast({ 
            title: "Premium-Import erfolgreich ✨", 
            description: `${data.usage.remaining} von ${data.usage.limit} Premium-Extraktionen übrig diesen Monat`
          });
        } else {
          toast({ 
            title: "Premium-Import erfolgreich ✨", 
            description: data.title || "Inhalt wurde mit verbesserter Qualität importiert"
          });
        }
      } else {
        // Standard extraction with Jina
        result = await extractFromUrl(sourceUrl);
        toast({ title: "Inhalt importiert", description: result.title || sourceUrl });
      }
      
      const prefill = [result.title, result.content]
        .filter(Boolean)
        .join("\n\n");
      setInputText(prefill);
    } catch (e) {
      console.error("Extract error", e);
      toast({
        title: "Import fehlgeschlagen",
        description: e instanceof Error ? e.message : String(e),
        variant: "destructive",
      });
    } finally {
      setIsExtracting(false);
    }
  };

  const handleSavePost = async (content: string, platform: 'linkedin' | 'x' | 'instagram' = 'linkedin') => {
    if (!userEmail) {
      setLoginOpen(true);
      toast({
        title: "Login erforderlich",
        description: "Bitte logge dich ein, um Beiträge zu speichern.",
      });
      return;
    }
    try {
      await savePost(content, platform);
      setRefreshKey((prev) => prev + 1);
      toast({
  title: "Erfolgreich gespeichert",
  description: "Du findest den Beitrag in der Seitenleiste \"Gespeicherte Beiträge\".",
      });
    } catch (error) {
      console.error("Save post error:", error);
      toast({
        title: "Speichern fehlgeschlagen",
        description: `Fehler beim Speichern: ${
          error instanceof Error ? error.message : String(error)
        }`,
        variant: "destructive",
      });
    }
  };

  const handleStartEdit = (platform: Platform, index: number, content: string) => {
    setEditing({ platform, index });
    setEditedContent(content);
  };

  const handleCancelEdit = () => {
    setEditing(null);
    setEditedContent("");
  };

  const handleSaveEdit = () => {
    if (!editing) return;
    const { platform, index } = editing;
    const updated = { ...postsByPlatform };
    updated[platform] = [...updated[platform]];
    updated[platform][index] = editedContent;
    setPostsByPlatform(updated);
    setEditing(null);
    setEditedContent("");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-accent/5 to-secondary overflow-x-hidden">
      {/* Professional Header Bar */}
      <header className="sticky top-0 z-30 bg-background/95 backdrop-blur-sm border-b border-border/50">
        <div className="container mx-auto px-4 h-16 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h1 className="text-xl font-semibold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
              Social Transformer
            </h1>
          </div>
          
          <div className="flex items-center gap-4">
            {/* Mobile Settings button */}
            <Link to="/settings" className="md:hidden">
              <Button variant="ghost" size="sm" aria-label="Einstellungen">
                <SettingsIcon className="h-4 w-4" />
              </Button>
            </Link>
            <Link to="/settings" className="hidden md:block">
              <Button variant="ghost" size="sm">Einstellungen</Button>
            </Link>
            {userEmail ? (
              <div className="flex items-center gap-3">
                <Button variant="ghost" size="sm" onClick={() => signOut()}>
                  Logout
                </Button>
              </div>
            ) : (
              <Dialog open={loginOpen} onOpenChange={setLoginOpen}>
                <DialogTrigger asChild>
                  <Button variant="default" size="sm">Login</Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Einloggen</DialogTitle>
                  </DialogHeader>
                  <Auth />
                </DialogContent>
              </Dialog>
            )}
          </div>
        </div>
      </header>
      
  <div className="p-4 md:p-8 pt-6 md:pt-8">
  <div className={`max-w-4xl mx-auto space-y-8 ${isSidebarCollapsed ? 'md:pr-[3rem]' : 'md:pr-[22rem]'}`}>
          <div className="text-center space-y-4 pt-8">
          <h1 className="text-3xl md:text-5xl font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent">
            Vom Newsletter zu viralen Posts
          </h1>
          <p className="text-muted-foreground text-base md:text-lg">
            Mehr Sichtbarkeit aus vorhandenem Content
          </p>
          <Badge variant="secondary" className="text-xs md:text-sm">
            Powered by Claude AI ✨
          </Badge>
        </div>

        <Tabs value={tabsValue} onValueChange={(v) => setTabsValue(v as 'posts' | 'ideas' | 'workflow')} className="w-full">
          <TabsList className="w-full justify-start">
            <TabsTrigger value="posts">Posts erstellen</TabsTrigger>
            <TabsTrigger value="ideas">Themen‑Ideen</TabsTrigger>
          </TabsList>

          <TabsContent value="posts">
            <Card className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>Newsletter eingeben oder importieren</CardTitle>
                <CardDescription>
                  Füge deinen Newsletter-Text ein oder importiere ihn per URL, und wähle die Zielplattformen
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
            <div className="space-y-3">
              <div className="flex gap-2 flex-col md:flex-row">
                <input
                  type="url"
                  placeholder="https://example.com/dein-blogpost"
                  value={sourceUrl}
                  onChange={(e) => setSourceUrl(e.target.value)}
                  className="flex-1 h-10 px-3 rounded-md border bg-background"
                  aria-label="Quelle-URL"
                />
                <Button onClick={handleExtract} disabled={!sourceUrl || isExtracting} className="md:w-48">
                  {isExtracting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Importiere…
                    </>
                  ) : (
                    <>Von URL importieren</>
                  )}
                </Button>
              </div>
              
              {/* Premium extraction toggle - visible to all, but gated for free users */}
              <div className="flex items-center justify-between text-sm">
                <label className="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={usePremiumExtraction}
                    onChange={(e) => {
                      if (!isPro && e.target.checked) {
                        setShowPaywall(true);
                        return;
                      }
                      setUsePremiumExtraction(e.target.checked);
                    }}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-muted-foreground">
                    Premium-Extraktion
                    {!isPro ? (
                      <Badge variant="secondary" className="ml-2 text-xs">Pro</Badge>
                    ) : extractionUsage && (
                      <span className="ml-2 text-xs">
                        ({extractionUsage.remaining}/20 übrig)
                      </span>
                    )}
                  </span>
                </label>
                <span className="text-xs text-muted-foreground">
                  Bessere Qualität • JavaScript-Support
                </span>
              </div>
            </div>
            <Textarea
              placeholder="Newsletter hier einfügen..."
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              className="min-h-[12rem] text-base resize-none"
            />
            <div className="space-y-2">
              <PlatformSelector value={selectedPlatforms} onChange={setSelectedPlatforms} />
              {!isPro && (
                <div className="flex justify-center">
                  <Badge variant="outline" className="px-3 py-1">
                    {getRemainingCount() > 0 
                      ? `${getRemainingCount()} kostenlose Transformationen heute` 
                      : "Keine kostenlosen Transformationen mehr"}
                  </Badge>
                </div>
              )}
            </div>

            {/* Progress bar - only visible when generating */}
            {isLoading && (
              <div className="space-y-2">
                <Progress value={generationProgress} className="h-2" />
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>
                    {currentPlatformGenerating && `Erstelle ${currentPlatformGenerating}-Posts...`}
                  </span>
                  <span>
                    {completedPlatforms}/{totalPlatforms} Plattformen
                  </span>
                </div>
              </div>
            )}

            <Button
              onClick={handleRemix}
              disabled={isLoading || !inputText || selectedPlatforms.length === 0}
              size="lg"
              className="w-full text-lg h-12 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  {generationProgress > 0 
                    ? `${Math.round(generationProgress)}% - ${currentPlatformGenerating}`
                    : "Initialisiere..."}
                </>
              ) : (
                <>✨ Transformieren</>
              )}
            </Button>
          </CardContent>
        </Card>
          </TabsContent>

          <TabsContent value="ideas">
            <Card className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>Themen-Ideen aus Uploads (Beta)</CardTitle>
                <CardDescription>
                  Lade Bild/Text-Dokumente hoch (bis 20MB/Datei) oder füge unten Notizen ein. Wir schlagen dir prägnante Themen-Ideen vor.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Input
                    id="idea-files"
                    type="file"
                    multiple
                    accept="image/png,image/jpeg,image/webp,text/plain,text/markdown,.txt,.md,application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,audio/mpeg,audio/wav,audio/mp4,audio/aac,audio/ogg"
                    onChange={async (e) => {
                      const files = Array.from(e.target.files || []);
                      if (!files.length) return;
                      const addedTexts: string[] = [];
                      let usedApi = 0;
                  for (const f of files) {
                    if (f.size > 20 * 1024 * 1024) {
                          toast({ title: "Datei zu groß", description: `${f.name} überschreitet 20MB`, variant: "destructive" });
                          continue;
                        }
                        const type = (f.type || '').toLowerCase();
                        try {
                          const isText = type.startsWith('text/') || /\.(txt|md)$/i.test(f.name);
                          const needsApi = type.startsWith('image/') || type.startsWith('audio/') || type === 'application/pdf' || /\.(pdf|docx)$/i.test(f.name);
                          if (isText && !needsApi) {
                            const t = (await f.text()).trim();
                            if (t) addedTexts.push(t);
                          } else {
                        const form = new FormData();
                        form.append('file', f, f.name);
                        const url = apiBase ? `${apiBase}/api/extract-file` : '/api/extract-file';
                        const resp = await fetch(url, { method: 'POST', body: form, redirect: 'follow' as RequestRedirect });
                        if (!resp.ok) {
                          let msg = '';
                          try {
                            const j = await resp.json();
                            msg = j?.error || '';
                          } catch { /* noop */ }
                          if (!msg) {
                            try { msg = await resp.text(); } catch { /* noop */ }
                          }
                          throw new Error(msg || `${resp.status} ${resp.statusText}`);
                        }
                        const data = await resp.json();
                        if (data?.text) {
                          addedTexts.push(String(data.text));
                          usedApi++;
                        }
                        if (data?.meta?.links?.length) {
                          setIdeaLinks((prev) => {
                            const set = new Set(prev);
                            for (const l of data.meta.links as string[]) set.add(l);
                            return Array.from(set).slice(0, 200);
                          });
                        }
                      }
                    } catch (err) {
                      console.error('upload extract error', err);
                      const msg = err instanceof Error && err.message ? `: ${err.message.slice(0, 180)}` : '';
                      toast({ title: "Extraktion fehlgeschlagen", description: `${f.name}${msg}` , variant: "destructive" });
                    }
                  }
                  if (addedTexts.length) setIdeaTexts(prev => [...prev, ...addedTexts]);
                  if (!addedTexts.length) return;
                  toast({ title: "Uploads verarbeitet", description: `${addedTexts.length} Textquelle(n) ${usedApi ? `(via API: ${usedApi})` : ''}` });
                  e.currentTarget.value = '';
                }}
              />
              <p className="text-xs text-muted-foreground">Unterstützt: PNG/JPG/WEBP, PDF/DOCX, TXT/MD, Audio (mp3/wav/aac/ogg). Max 20MB/Datei.</p>
            </div>
            {/* Links aus Uploads / Studien */}
            {!!ideaLinks.length && (
              <div className="space-y-2">
                <div className="text-sm font-medium">Gefundene Links / Studien</div>
                <div className="max-h-48 overflow-auto rounded-md border divide-y">
                  {ideaLinks.slice(0, 50).map((link, i) => (
                    <div key={i} className="p-2 text-xs flex items-center gap-2">
                      <span className="truncate flex-1" title={link}>{link}</span>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setSourceUrl(link);
                          setTabsValue("posts");
                        }}
                      >
                        Übernehmen
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            )}
            {/* Manuelles Einfügen von Links */}
            <div className="space-y-2">
              <Textarea
                placeholder="Optional: Mehrere Links (je Zeile eine URL) einfügen…"
                className="min-h-[6rem]"
                onBlur={(e) => {
                  const lines = e.target.value.split(/\n+/).map(s => s.trim()).filter(Boolean);
                  if (!lines.length) return;
                  setIdeaLinks(prev => Array.from(new Set([...prev, ...lines])));
                  e.target.value = '';
                  toast({ title: "Links hinzugefügt", description: `${lines.length} Link(s) gespeichert.` });
                }}
              />
            </div>
            <div className="space-y-2">
              <Textarea
                placeholder="Kurz einfügen: Worüber willst du posten? Was gefällt dir am Stil? (optional)"
                value={ideaNotes}
                onChange={(e) => setIdeaNotes(e.target.value)}
                className="min-h-[8rem]"
              />
            </div>
                <div className="flex flex-wrap gap-2 text-xs text-muted-foreground">
                  {!!ideaTexts.length && <span>{ideaTexts.length} Text-Quelle(n)</span>}
                </div>
                <div className="flex gap-2">
                  <Button
                    disabled={isSuggesting || (!ideaNotes && ideaTexts.length === 0)}
                    onClick={async () => {
                      setIsSuggesting(true);
                      try {
                    const ideas = await suggestTopicIdeasFromInputs({ userNotes: ideaNotes, texts: ideaTexts });
                        setIdeaSuggestions(ideas);
                        if (!ideas.length) {
                          toast({ title: "Keine Ideen", description: "Bitte mehr Kontext/Text hinzufügen." });
                        }
                      } catch (e) {
                        console.error(e);
                        toast({ title: "Fehler", description: "Ideen konnten nicht generiert werden.", variant: "destructive" });
                      } finally {
                        setIsSuggesting(false);
                      }
                    }}
                    className="md:w-56"
                  >
                    {isSuggesting ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analysiere…</>) : (<>Themen-Ideen generieren</>)}
                  </Button>
                  {!!ideaSuggestions.length && (
                    <Button
                      variant="outline"
                      onClick={() => {
                        const joined = ideaSuggestions.slice(0, 3).map((s, i) => `${i+1}. ${s}`).join("\n");
                        setInputText(prev => [joined, prev].filter(Boolean).join("\n\n"));
                        toast({ title: "Übernommen", description: "Top-Ideen zum Eingabetext hinzugefügt." });
                      }}
                    >
                      Top‑Ideen übernehmen
                    </Button>
                  )}
                </div>
                {!!ideaSuggestions.length && (
                  <div className="bg-muted/40 rounded-md p-3 text-sm whitespace-pre-wrap">
                    {ideaSuggestions.map((s) => `• ${s}`).join("\n")}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

                      />
                      <p className="text-xs text-muted-foreground">
                        Unterstützt: Bilder, PDFs, Dokumente, Audio-Dateien
                      </p>
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Oder URL eingeben</label>
                      <div className="flex gap-2">
                        <Input
                          placeholder="https://..."
                          value={sourceUrl}
                          onChange={(e) => setSourceUrl(e.target.value)}
                        />
                        <Button
                          onClick={async () => {
                            if (!sourceUrl.trim()) return;
                            setIsExtracting(true);
                            try {
                              const result = await extractFromUrl(sourceUrl);
                              const content = [result.title, result.content].filter(Boolean).join("\n\n");
                              setInputText(content);
                              toast({ title: "Inhalt importiert", description: result.title || sourceUrl });
                            } catch (e) {
                              console.error("Extract error", e);
                              toast({
                                title: "Import fehlgeschlagen",
                                description: e instanceof Error ? e.message : String(e),
                                variant: "destructive",
                              });
                            } finally {
                              setIsExtracting(false);
                            }
                          }}
                          disabled={isExtracting || !sourceUrl.trim()}
                        >
                          {isExtracting ? <Loader2 className="h-4 w-4 animate-spin" /> : "Extrahieren"}
                        </Button>
                      </div>
                    </div>
                    
                    {uploadedFiles.length > 0 && (
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Hochgeladene Dateien ({uploadedFiles.length})</label>
                        <div className="max-h-48 overflow-auto rounded-md border divide-y">
                          {uploadedFiles.map((file, i) => (
                            <div key={i} className="p-2 flex items-center justify-between hover:bg-muted/50">
                              <div className="flex-1 min-w-0">
                                <p className="text-sm font-medium truncate">{file.name}</p>
                                <p className="text-xs text-muted-foreground">
                                  {(file.size / 1024).toFixed(1)} KB • {file.type.split('/')[0] || 'text'}
                                  {file.text && ` • ${file.text.slice(0, 50)}...`}
                                </p>
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => {
                                  setUploadedFiles(prev => prev.filter((_, idx) => idx !== i));
                                  setIdeaTexts(prev => {
                                    const newTexts = [...prev];
                                    newTexts.splice(i, 1);
                                    return newTexts;
                                  });
                                  toast({ title: "Datei entfernt", description: file.name });
                                }}
                              >
                                ✕
                              </Button>
                            </div>
                          ))}
                        </div>
                        <p className="text-xs text-muted-foreground">
                          {ideaTexts.length} Textquelle(n) bereit für Themenextraktion
                        </p>
                      </div>
                    )}
                  </div>
                ),
                topics: (
                  <div className="space-y-4">
                    {/* Context info */}
                    {(ideaTexts.length > 0 || uploadedFiles.length > 0) && (
                      <div className="p-3 bg-muted/50 rounded-md">
                        <p className="text-sm font-medium mb-1">Verfügbare Quellen</p>
                        <p className="text-xs text-muted-foreground">
                          {uploadedFiles.length} Datei(en) hochgeladen • {ideaTexts.length} Textquelle(n) extrahiert
                        </p>
                      </div>
                    )}
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Zusätzlicher Kontext</label>
                      <Textarea
                        placeholder="Beschreibe deine Zielgruppe, gewünschte Themen oder spezielle Anforderungen..."
                        value={ideaNotes}
                        onChange={(e) => setIdeaNotes(e.target.value)}
                        className="min-h-[100px]"
                      />
                    </div>
                    
                    <div className="flex items-center gap-4">
                      <div className="flex-1">
                        <label className="text-sm font-medium">Anzahl Themen</label>
                        <div className="flex items-center gap-2 mt-1">
                          <Input
                            type="number"
                            min="3"
                            max="15"
                            value={topicCount}
                            onChange={(e) => setTopicCount(Math.min(15, Math.max(3, parseInt(e.target.value) || 7)))}
                            className="w-20"
                          />
                          <span className="text-sm text-muted-foreground">Ideen generieren</span>
                        </div>
                      </div>
                    </div>
                    
                    <Button
                      onClick={async () => {
                        if (!ideaNotes && ideaTexts.length === 0) {
                          toast({ 
                            title: "Keine Quellen verfügbar", 
                            description: "Bitte lade erst Dateien hoch oder füge Notizen hinzu.",
                            variant: "destructive" 
                          });
                          return;
                        }
                        
                        setIsSuggesting(true);
                        try {
                          const ideas = await suggestTopicIdeasFromInputs({ 
                            userNotes: ideaNotes, 
                            texts: ideaTexts 
                          });
                          setIdeaSuggestions(ideas.slice(0, topicCount));
                          if (!ideas.length) {
                            toast({ 
                              title: "Keine Ideen generiert", 
                              description: "Bitte mehr Kontext oder andere Dateien hinzufügen." 
                            });
                          } else {
                            toast({ 
                              title: "Themen erfolgreich generiert", 
                              description: `${ideas.length} Themen-Ideen erstellt` 
                            });
                          }
                        } catch (e) {
                          console.error('Topic generation error:', e);
                          const errorMsg = e instanceof Error ? e.message : 'Unbekannter Fehler';
                          toast({ 
                            title: "Fehler bei der Themengenerierung", 
                            description: errorMsg.slice(0, 100), 
                            variant: "destructive" 
                          });
                        } finally {
                          setIsSuggesting(false);
                        }
                      }}
                      disabled={isSuggesting || (!ideaNotes && ideaTexts.length === 0)}
                      className="w-full"
                    >
                      {isSuggesting ? (
                        <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analysiere...</>
                      ) : (
                        <>Themen-Ideen generieren</>
                      )}
                    </Button>
                    
                    {ideaSuggestions.length > 0 && (
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <p className="text-sm font-medium">Generierte Themen ({ideaSuggestions.length})</p>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => {
                              setIsSuggesting(true);
                              // Regenerate with same parameters
                              suggestTopicIdeasFromInputs({ 
                                userNotes: ideaNotes, 
                                texts: ideaTexts 
                              }).then(ideas => {
                                setIdeaSuggestions(ideas.slice(0, topicCount));
                                toast({ title: "Neue Themen generiert" });
                              }).finally(() => setIsSuggesting(false));
                            }}
                            disabled={isSuggesting}
                          >
                            Neu generieren
                          </Button>
                        </div>
                        <div className="bg-muted/40 rounded-md p-3 text-sm space-y-2">
                          {ideaSuggestions.map((s, i) => (
                            <div key={i} className="flex items-start gap-2 group hover:bg-background/50 p-1 rounded">
                              <span className="text-muted-foreground">{i + 1}.</span>
                              <span className="flex-1">{s}</span>
                              <Button
                                variant="ghost"
                                size="sm"
                                className="opacity-0 group-hover:opacity-100 transition-opacity h-6 px-2"
                                onClick={() => {
                                  setInputText(prev => prev ? `${prev}\n\n${i+1}. ${s}` : `${i+1}. ${s}`);
                                  toast({ title: "Thema hinzugefügt", description: `"${s.slice(0, 50)}..."` });
                                }}
                              >
                                +
                              </Button>
                            </div>
                          ))}
                        </div>
                        <div className="flex gap-2">
                          <Button
                            variant="outline"
                            onClick={() => {
                              const joined = ideaSuggestions.slice(0, 3).map((s, i) => `${i+1}. ${s}`).join("\n");
                              setInputText(prev => [joined, prev].filter(Boolean).join("\n\n"));
                              toast({ title: "Übernommen", description: "Top-3 Themen zum Eingabetext hinzugefügt." });
                            }}
                          >
                            Top-3 übernehmen
                          </Button>
                          <Button
                            variant="outline"
                            onClick={() => {
                              const allJoined = ideaSuggestions.map((s, i) => `${i+1}. ${s}`).join("\n");
                              setInputText(allJoined);
                              toast({ title: "Alle übernommen", description: `${ideaSuggestions.length} Themen als Eingabetext gesetzt.` });
                            }}
                          >
                            Alle verwenden
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                ),
                style: (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Schreibstil wählen</label>
                      <div className="grid grid-cols-2 gap-2">
                        {[
                          { id: 'professional', label: '📚 Professionell', desc: 'Sachlich und strukturiert' },
                          { id: 'casual', label: '💬 Casual', desc: 'Locker und persönlich' },
                          { id: 'storytelling', label: '📖 Storytelling', desc: 'Erzählerisch und emotional' },
                          { id: 'direct', label: '🎯 Direkt', desc: 'Klar und auf den Punkt' }
                        ].map((style) => (
                          <Button
                            key={style.id}
                            variant={selectedStyle === style.id ? "default" : "outline"}
                            className="justify-start h-auto py-3 px-4"
                            onClick={() => setSelectedStyle(style.id)}
                          >
                            <div className="text-left">
                              <div>{style.label}</div>
                              <div className="text-xs text-muted-foreground font-normal">{style.desc}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Eigene Stil-Beispiele</label>
                      <Textarea
                        placeholder="Füge hier Beispiel-Posts ein, die deinem gewünschten Stil entsprechen..."
                        className="min-h-[150px]"
                        value={styleExamples}
                        onChange={(e) => {
                          setStyleExamples(e.target.value);
                          window.localStorage.setItem('styleExamples', e.target.value);
                        }}
                      />
                      <p className="text-xs text-muted-foreground">
                        Diese Beispiele werden als Stil-Referenz für die KI verwendet
                      </p>
                    </div>
                    
                    {styleExamples && (
                      <div className="p-3 bg-muted/50 rounded-md">
                        <p className="text-xs font-medium mb-1">Stil-Referenz gespeichert</p>
                        <p className="text-xs text-muted-foreground">
                          {styleExamples.split('\n').length} Zeile(n) • {styleExamples.length} Zeichen
                        </p>
                      </div>
                    )}
                  </div>
                ),
                generate: (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Eingabetext</label>
                      <Textarea
                        placeholder="Newsletter, Blogpost oder eigener Text..."
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                        className="min-h-[200px]"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Plattformen</label>
                      <PlatformSelector
                        value={selectedPlatforms}
                        onChange={setSelectedPlatforms}
                      />
                    </div>
                    
                    <Button
                      onClick={handleRemix}
                      disabled={isLoading || !inputText.trim() || selectedPlatforms.length === 0}
                      className="w-full"
                    >
                      {isLoading ? (
                        <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generiere...</>
                      ) : (
                        <>Posts generieren</>
                      )}
                    </Button>
                    
                    {generationProgress > 0 && generationProgress < 100 && (
                      <div className="space-y-2">
                        <Progress value={generationProgress} />
                        <p className="text-xs text-center text-muted-foreground">
                          {currentPlatformGenerating && `Generiere ${currentPlatformGenerating}...`}
                        </p>
                      </div>
                    )}
                  </div>
                ),
                review: (
                  <div className="space-y-4">
                    {Object.entries(postsByPlatform).map(([platform, posts]) => 
                      posts.length > 0 && (
                        <Card key={platform}>
                          <CardHeader>
                            <CardTitle className="text-base">
                              {PLATFORM_LABEL[platform as Platform]} Posts
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            {posts.map((post, index) => (
                              <div key={index} className="p-3 bg-muted rounded-md">
                                <pre className="whitespace-pre-wrap text-sm">{post}</pre>
                                <div className="flex gap-2 mt-2">
                                  <SaveButton
                                    onClick={async () => {
                                      if (!userEmail) {
                                        setLoginOpen(true);
                                        return;
                                      }
                                      try {
                                        await savePost(post, platform as Platform);
                                        toast({ title: "Gespeichert" });
                                        setRefreshKey(Date.now());
                                      } catch (error) {
                                        console.error(error);
                                        toast({ title: "Fehler beim Speichern", variant: "destructive" });
                                      }
                                    }}
                                  />
                                  {platform === "linkedin" && <LinkedInShareButton text={post} />}
                                  {platform === "x" && <XShareButton text={post} />}
                                  {platform === "instagram" && <InstagramShareButton />}
                                </div>
                              </div>
                            ))}
                          </CardContent>
                        </Card>
                      )
                    )}
                    
                    {Object.values(postsByPlatform).every(posts => posts.length === 0) && (
                      <div className="text-center py-8 text-muted-foreground">
                        Noch keine Posts generiert. Gehe zurück zum "Posts generieren" Schritt.
                      </div>
                    )}
                  </div>
                )
              }}
            />
          </TabsContent>
        </Tabs>
        
  {/* Extra spacing for mobile to prevent content being covered by bottom drawer + safe area */}
  <div className="md:hidden" style={{ height: 'calc(4rem + env(safe-area-inset-bottom))' }} aria-hidden="true" />
        {(["linkedin", "x", "instagram"] as Platform[]).map((platform) => {
          const items = postsByPlatform[platform] || [];
          if (items.length === 0) return null;
          return (
            <Card key={platform} className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>{PLATFORM_LABEL[platform]} – {items.length} Beiträge</CardTitle>
                <CardDescription>Plattformspezifische Vorschau und Bearbeitung</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 gap-6">
                  {items.map((post, index) => (
                    <Card key={index} className="border-muted/50 hover:shadow-lg transition-all duration-200 hover:border-primary/20">
                      <CardContent className="p-6">
                        {editing?.platform === platform && editing?.index === index ? (
                          <div className="space-y-4">
                            <Textarea
                              value={editedContent}
                              onChange={(e) => setEditedContent(e.target.value)}
                              className="min-h-[8rem]"
                            />
                            <div className="flex justify-end gap-2">
                              <DSButton variant="ghost" size="sm" onClick={handleCancelEdit}>
                                Abbrechen
                              </DSButton>
                              <SaveButton size="sm" onClick={handleSaveEdit} />
                            </div>
                          </div>
                        ) : (
                          <>
                            <p className="text-foreground whitespace-pre-wrap leading-relaxed mb-4">{post}</p>
                            <div className="flex justify-between items-center pt-4 border-t border-muted/30">
                              <Badge variant="outline" className="text-xs flex items-center gap-1.5">
                                {platform === "instagram" && <InstagramLogo size={12} />}
                                {PLATFORM_LABEL[platform]} · Post #{index + 1}
                              </Badge>
                              <div className="flex gap-2">
                                <EditButton
                                  size="sm"
                                  onClick={() => handleStartEdit(platform, index, post)}
                                  text=""
                                  title="Beitrag bearbeiten"
                                />
                                <SaveButton size="sm" onClick={() => handleSavePost(post, platform)} text="" title="Beitrag speichern" />
                                {platform === "linkedin" && (
                                  <LinkedInShareButton
                                    size="sm"
                                    text=""
                                    onClick={async () => {
                                      try {
                                        const accessToken = import.meta.env.VITE_LINKEDIN_ACCESS_TOKEN;
                                        const authorUrn = import.meta.env.VITE_LINKEDIN_AUTHOR_URN;
                                        if (accessToken && authorUrn) {
                                          const result = await createLinkedInDraftPost(post, { accessToken, authorUrn });
                                          window.open(result.draftUrl, "_blank");
                                          toast({ title: "LinkedIn Draft erstellt! 🚀", description: "Der Draft wurde erfolgreich erstellt." });
                                        } else {
                                          const linkedinUrl = createLinkedInShareUrl(post);
                                          window.open(linkedinUrl, "_blank");
                                        }
                                      } catch (error) {
                                        console.error("LinkedIn Draft Error:", error);
                                        if (error instanceof LinkedInAPIError) {
                                          toast({ title: "LinkedIn API Fehler", description: error.message, variant: "destructive" });
                                        } else {
                                          const linkedinUrl = createLinkedInShareUrl(post);
                                          window.open(linkedinUrl, "_blank");
                                        }
                                      }
                                    }}
                                    title="Auf LinkedIn teilen"
                                  />
                                )}
                                {platform === "x" && (
                                  <XShareButton
                                    size="sm"
                                    text=""
                                    tweetContent={post}
                                    title="Auf X teilen"
                                  />
                                )}
                                {platform === "instagram" && (
                                  <InstagramShareButton
                                    size="sm"
                                    text=""
                                    postContent={post}
                                    title="Auf Instagram teilen"
                                  />
                                )}
                              </div>
                            </div>
                          </>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          );
        })}
        </div>
      </div>
      
      <SavedPosts
        onCollapse={setIsSidebarCollapsed}
        refreshKey={refreshKey}
        isAuthenticated={!!userEmail}
        onLoginClick={() => setLoginOpen(true)}
        initialExpanded={searchParams.get('expand') === 'saved'}
      />
      
      <PaywallModal 
        open={showPaywall} 
        onOpenChange={setShowPaywall} 
      />
    </div>
  );
}
</file>

<file path="src/styles/animations.css">
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fadeIn {
  animation: fadeIn 0.5s ease-out forwards;
}
</file>

<file path=".eslintignore">
serena/**
serena/.venv/**
serena/test/**
serena/test/resources/**
**/dist/**
**/*.min.js
</file>

<file path=".mcp.json">
{
  "mcpServers": {
    "serena": {
      "type": "sse",
      "url": "http://localhost:9121/sse"
    }
  }
}
</file>

<file path="AGENTS.md">
# Repository Guidelines

## Project Structure & Module Organization
- `src/`: React + TypeScript app (pages, components, hooks, api, design-system, config, lib).
- `api/`: Vercel Edge Functions (e.g., `claude/v1/messages.ts`, `stripe-webhook.ts`).
- `supabase/`: Local config and SQL seeds/migrations.
- `docs/`: Additional docs; see `docs/PROJECT_STRUCTURE.md`.
- Config at root: `vite.config.ts`, `tailwind.config.js`, `eslint.config.js`, `tsconfig*.json`.

## Build, Test, and Development Commands
- `npm run dev`: Start Vite dev server.
- `npm run build`: Type-check then build for production.
- `npm run preview`: Preview the production build locally.
- `npm run lint`: Run ESLint on the project.

## Coding Style & Naming Conventions
- TypeScript strict mode; prefer explicit types at boundaries.
- ESLint configured for React hooks and refresh; fix lint issues before PRs.
- Indentation: 2 spaces; max line length by formatter/editor default.
- Components: PascalCase files (e.g., `HeroSection.tsx`); shadcn/ui primitives keep lowercase filenames (e.g., `ui/button.tsx`).
- Imports: use path alias `@/*` (see `vite.config.ts` and `tsconfig*`).
- Styling: TailwindCSS + shadcn/ui; avoid ad-hoc CSS when utilities suffice.

## Testing Guidelines
- No formal unit/e2e suite yet. For changes:
  - Add lightweight checks and guard clauses where logic branches.
  - Provide screenshots or screen recordings for UI changes.
  - Use ESLint (`npm run lint`) as a pre-PR gate.
  - Suggested future setup: Vitest for units, Playwright for e2e. Name tests `*.test.ts(x)` colocated with source.

## Commit & Pull Request Guidelines
- Conventional commits: `feat:`, `fix:`, `refactor:`, `docs:`, etc. Keep subjects imperative and concise.
- PRs should include:
  - Summary, scope, and rationale; link issues.
  - Before/after screenshots for UI.
  - Notes on env vars, Supabase schema, or API routes touched.
  - Checklist: builds, lints, previewed locally.

## Security & Configuration Tips
- Never commit secrets. Client vars require `VITE_` prefix; server secrets (e.g., `CLAUDE_API_KEY`, `SUPABASE_SERVICE_ROLE_KEY`, `STRIPE_WEBHOOK_SECRET`) live in the hosting env.
- Keep `.env.example` updated. Validate required vars on boot when possible.
- Edge functions run in `api/`; ensure CORS and error handling are preserved when editing.

For AI/agent contributors: also review `CLAUDE.md` and `SERENA_SETUP.md` for tooling context.
</file>

<file path="api/claude/v1/messages.ts">
export const config = {
  runtime: 'edge',
  regions: ['fra1'], // Frankfurt für niedrige Latenz in Europa
};

export default async function handler(req: Request) {
  // CORS Headers für lokale Entwicklung
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, x-api-key, anthropic-version',
  };

  // Handle preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers });
  }

  // Nur POST erlauben
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ error: 'Method not allowed' }), {
      status: 405,
      headers: { ...headers, 'Content-Type': 'application/json' },
    });
  }

  try {
    // Request Body durchreichen
    const body = await req.json();
    
    // Claude API Key aus Environment Variable (OHNE VITE_ prefix!)
    const apiKey = process.env.CLAUDE_API_KEY;
    
    if (!apiKey) {
      console.error('CLAUDE_API_KEY is not configured');
      return new Response(
        JSON.stringify({ error: 'API configuration error' }),
        { 
          status: 500, 
          headers: { ...headers, 'Content-Type': 'application/json' } 
        }
      );
    }

    // Transparenter Proxy zu Anthropic API
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': apiKey,
        'anthropic-version': '2023-06-01',
      },
      body: JSON.stringify(body), // Leitet den kompletten Body weiter
    });

    // Antwort durchreichen
    const data = await response.json();

    return new Response(
      JSON.stringify(data),
      {
        status: response.status,
        headers: {
          ...headers,
          'Content-Type': 'application/json',
        },
      }
    );
  } catch (error) {
    console.error('Error in claude edge function:', error);
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { 
        status: 500, 
        headers: { ...headers, 'Content-Type': 'application/json' } 
      }
    );
  }
}
</file>

<file path="src/api/extract-premium.ts">
// Frontend API Client für Premium Content-Extraktion mit Firecrawl
// Nutzt die /api/extract-premium Edge Function

import { supabase } from './supabase';

export type ExtractPremiumResult = {
  title?: string;
  content: string;
  markdown?: string;
  html?: string;
  screenshot?: string;
  metadata?: {
    sourceUrl: string;
    extractedAt: string;
    extractionType: 'firecrawl';
  };
  usage?: {
    used: number;
    limit: number;
    remaining: number;
    resetsAt: string;
  };
};

export type ExtractUsageInfo = {
  used: number;
  limit: number;
  remaining: number;
  resetsAt: Date;
  isAtLimit: boolean;
};

// Basis-URL für API-Aufrufe
function apiBase() {
  // Nutze gleiche Origin während lokaler Entwicklung/Preview
  return '';
}

/**
 * Extrahiert Premium-Content von einer URL mit Firecrawl
 * Limitiert auf 20 Extraktionen pro Monat für Premium-Nutzer
 */
export async function extractPremiumFromUrl(url: string): Promise<ExtractPremiumResult> {
  // Hole aktuellen Auth-Token
  const { data: { session } } = await supabase.auth.getSession();
  
  if (!session?.access_token) {
    throw new Error('Authentifizierung erforderlich für Premium-Extraktion');
  }

  const res = await fetch(`${apiBase()}/api/extract-premium`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${session.access_token}`
    },
    body: JSON.stringify({ url }),
  });

  if (!res.ok) {
    const errorData = await res.json().catch(() => ({ error: 'Unbekannter Fehler' }));
    
    // Spezielle Fehlerbehandlung für verschiedene Status-Codes
    if (res.status === 401) {
      throw new Error('Bitte melden Sie sich an, um Premium-Funktionen zu nutzen');
    } else if (res.status === 403) {
      throw new Error('Premium-Abo erforderlich. Upgrade auf Premium für erweiterte Extraktion.');
    } else if (res.status === 429) {
      const usage = errorData.usage;
      if (usage) {
        throw new Error(
          `Monatliches Limit erreicht (${usage.used}/${usage.limit}). ` +
          `Zurücksetzung am ${new Date(usage.resetsAt).toLocaleDateString('de-DE')}.`
        );
      }
      throw new Error(errorData.error || 'Nutzungslimit erreicht');
    }
    
    throw new Error(
      errorData.error || 
      `Premium-Extraktion fehlgeschlagen (${res.status}): ${res.statusText}`
    );
  }

  return res.json();
}

/**
 * Holt die aktuelle Nutzungsstatistik für Premium-Extraktionen
 */
export async function getExtractionUsage(): Promise<ExtractUsageInfo | null> {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return null;

    const { data, error } = await supabase
      .rpc('get_monthly_extraction_usage', {
        p_user_id: user.id,
        p_extraction_type: 'firecrawl'
      })
      .single() as { 
        data: {
          used_count: number;
          limit_count: number;
          remaining_count: number;
          reset_at: string;
        } | null;
        error: Error | null;
      };

    if (error) {
      console.error('Fehler beim Abrufen der Nutzungsstatistik:', error);
      return null;
    }

    if (!data) return null;

    return {
      used: data.used_count,
      limit: data.limit_count,
      remaining: data.remaining_count,
      resetsAt: new Date(data.reset_at),
      isAtLimit: data.remaining_count <= 0
    };
  } catch (error) {
    console.error('Fehler beim Abrufen der Nutzungsstatistik:', error);
    return null;
  }
}

/**
 * Prüft ob der Nutzer Premium-Extraktionen nutzen kann
 */
export async function canUsePremiumExtraction(): Promise<boolean> {
  try {
    // Prüfe Subscription-Status
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return false;

    const { data: subscription } = await supabase
      .from('subscriptions')
      .select('is_active')
      .eq('user_id', user.id)
      .single();

    if (!subscription?.is_active) return false;

    // Prüfe Nutzungslimit
    const usage = await getExtractionUsage();
    return usage ? !usage.isAtLimit : false;
  } catch (error) {
    console.error('Fehler bei Premium-Prüfung:', error);
    return false;
  }
}

/**
 * Wählt automatisch die beste Extraktionsmethode basierend auf Nutzer-Status
 */
export async function smartExtract(url: string): Promise<{
  content: string;
  title?: string;
  method: 'premium' | 'free';
  usage?: ExtractUsageInfo;
}> {
  const canUsePremium = await canUsePremiumExtraction();
  
  if (canUsePremium) {
    try {
      // Versuche Premium-Extraktion
      const result = await extractPremiumFromUrl(url);
      const usage = result.usage ? {
        used: result.usage.used,
        limit: result.usage.limit,
        remaining: result.usage.remaining,
        resetsAt: new Date(result.usage.resetsAt),
        isAtLimit: result.usage.remaining <= 0
      } : undefined;
      
      return {
        content: result.content,
        title: result.title,
        method: 'premium',
        usage
      };
    } catch (error) {
      console.error('Premium-Extraktion fehlgeschlagen, falle auf kostenlose Version zurück:', error);
      // Fallback auf kostenlose Version
    }
  }
  
  // Nutze kostenlose Jina-Extraktion als Fallback
  const { extractFromUrl } = await import('./extract');
  const freeResult = await extractFromUrl(url);
  
  return {
    content: freeResult.content,
    title: freeResult.title,
    method: 'free',
    usage: undefined
  };
}
</file>

<file path="src/api/extract.ts">
export type ExtractResult = {
  title?: string;
  byline?: string | null;
  excerpt?: string | null;
  content: string; // plain text
  length?: number;
  siteName?: string | null;
};

// Resolve base URL for API when running locally vs deployed
function apiBase() {
  // Use same origin during local dev/preview. In production, replace with your domain if needed.
  return '';
}

export async function extractFromUrl(url: string): Promise<ExtractResult> {
  const res = await fetch(`${apiBase()}/api/extract`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ url }),
  });
  if (!res.ok) {
    const t = await res.text().catch(() => '');
    throw new Error(`Extraction failed (${res.status}): ${t || res.statusText}`);
  }
  return res.json();
}
</file>

<file path="src/api/linkedin.ts">
// LinkedIn API Integration für Draft Posts

interface LinkedInPostRequest {
  author: string;
  commentary: string;
  visibility: 'PUBLIC' | 'CONNECTIONS' | 'LOGGED_IN_MEMBERS';
  distribution: {
    feedDistribution: 'MAIN_FEED' | 'NONE';
    targetEntities?: string[];
    thirdPartyDistributionChannels?: string[];
  };
  lifecycleState: 'PUBLISHED' | 'DRAFT';
  isReshareDisabledByAuthor: boolean;
}

interface LinkedInApiConfig {
  accessToken: string;
  authorUrn: string; // e.g., "urn:li:person:YOUR_ID" or "urn:li:organization:YOUR_ORG_ID"
}

export class LinkedInAPIError extends Error {
  constructor(message: string, public statusCode?: number) {
    super(message);
    this.name = 'LinkedInAPIError';
  }
}

export async function createLinkedInDraftPost(
  content: string, 
  config: LinkedInApiConfig
): Promise<{ postId: string; draftUrl: string }> {
  
  if (!config.accessToken) {
    throw new LinkedInAPIError('LinkedIn Access Token ist erforderlich');
  }
  
  if (!config.authorUrn) {
    throw new LinkedInAPIError('LinkedIn Author URN ist erforderlich');
  }

  const requestBody: LinkedInPostRequest = {
    author: config.authorUrn,
    commentary: content,
    visibility: 'PUBLIC',
    distribution: {
      feedDistribution: 'MAIN_FEED',
      targetEntities: [],
      thirdPartyDistributionChannels: []
    },
    lifecycleState: 'DRAFT',
    isReshareDisabledByAuthor: false
  };

  try {
    const response = await fetch('https://api.linkedin.com/rest/posts', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${config.accessToken}`,
        'LinkedIn-Version': '202507',
        'X-Restli-Protocol-Version': '2.0.0',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new LinkedInAPIError(
        `LinkedIn API Error: ${response.status} - ${errorText}`,
        response.status
      );
    }

    // Extract Post ID from response headers
    const postId = response.headers.get('x-restli-id');
    
    if (!postId) {
      throw new LinkedInAPIError('Keine Post ID in der Antwort erhalten');
    }

    // Generate LinkedIn Draft URL
    const draftUrl = `https://www.linkedin.com/feed/update/${postId}`;

    return {
      postId,
      draftUrl
    };

  } catch (error) {
    if (error instanceof LinkedInAPIError) {
      throw error;
    }
    
    throw new LinkedInAPIError(
      `Fehler beim Erstellen des LinkedIn Draft Posts: ${error instanceof Error ? error.message : String(error)}`
    );
  }
}

// Alternative: LinkedIn Share Dialog für bessere UX ohne API-Keys
export function createLinkedInShareUrl(content: string): string {
  // Moderne LinkedIn Share Dialog URL
  const shareUrl = new URL('https://www.linkedin.com/sharing/share-offsite/');
  
  // LinkedIn akzeptiert noch immer den 'text' Parameter im Share Dialog
  shareUrl.searchParams.set('text', content);
  
  return shareUrl.toString();
}

// Hilfsfunktion um LinkedIn Profile/Organization URN zu erstellen
export function createLinkedInUrn(type: 'person' | 'organization', id: string): string {
  return `urn:li:${type}:${id}`;
}
</file>

<file path="src/components/common/ExtractButton.tsx">
// Premium/Free Extraction Button mit automatischer Methodenwahl
import { useState } from 'react';
import { Download, Zap, AlertCircle } from 'lucide-react';
import { extractFromUrl } from '@/api/extract';
import { extractPremiumFromUrl, canUsePremiumExtraction } from '@/api/extract-premium';
import { useSubscription } from '@/components/common/UpgradeButton';
import { toast } from 'sonner';

interface ExtractButtonProps {
  url: string;
  onExtracted: (content: string, title?: string) => void;
  disabled?: boolean;
  className?: string;
}

export function ExtractButton({ 
  url, 
  onExtracted, 
  disabled = false,
  className = ''
}: ExtractButtonProps) {
  const [loading, setLoading] = useState(false);
  const [method, setMethod] = useState<'auto' | 'free' | 'premium'>('auto');
  const { subscription } = useSubscription();

  const handleExtract = async () => {
    if (!url || disabled) return;

    setLoading(true);
    try {
      let content: string;
      let title: string | undefined;

      // Auto-Modus: Wähle beste verfügbare Methode
      if (method === 'auto' && subscription?.is_active) {
        const canUsePremium = await canUsePremiumExtraction();
        if (canUsePremium) {
          try {
            const premiumResult = await extractPremiumFromUrl(url);
            content = premiumResult.content;
            title = premiumResult.title;
            
            // Zeige verbleibende Nutzungen
            if (premiumResult.usage) {
              toast.success(
                `Premium-Extraktion erfolgreich! (${premiumResult.usage.remaining} von ${premiumResult.usage.limit} übrig)`,
                { duration: 4000 }
              );
            }
          } catch (error) {
            console.error('Premium-Extraktion fehlgeschlagen:', error);
            // Fallback auf kostenlose Version
            const freeResult = await extractFromUrl(url);
            content = freeResult.content;
            title = freeResult.title;
            toast.info('Premium-Extraktion fehlgeschlagen, nutze kostenlose Version');
          }
        } else {
          // Nutze kostenlose Version wenn Premium-Limit erreicht
          const freeResult = await extractFromUrl(url);
          content = freeResult.content;
          title = freeResult.title;
          toast.info('Premium-Limit erreicht, nutze kostenlose Extraktion');
        }
      }
      // Explizit Premium gewählt
      else if (method === 'premium' && subscription?.is_active) {
        const premiumResult = await extractPremiumFromUrl(url);
        content = premiumResult.content;
        title = premiumResult.title;
        
        if (premiumResult.usage) {
          toast.success(
            `Premium-Extraktion erfolgreich! (${premiumResult.usage.remaining} von ${premiumResult.usage.limit} übrig)`,
            { duration: 4000 }
          );
        }
      }
      // Kostenlose Version (Standard oder explizit gewählt)
      else {
        const freeResult = await extractFromUrl(url);
        content = freeResult.content;
        title = freeResult.title;
        
        if (method === 'premium' && !subscription?.is_active) {
          toast.error('Premium-Abo erforderlich für erweiterte Extraktion');
        } else {
          toast.success('Inhalt erfolgreich extrahiert');
        }
      }

      onExtracted(content, title);
    } catch (error) {
      console.error('Extraktionsfehler:', error);
      toast.error(
        error instanceof Error 
          ? error.message 
          : 'Fehler beim Extrahieren der Inhalte'
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col gap-2">
      {/* Methodenauswahl für Premium-Nutzer */}
      {subscription?.is_active && (
        <div className="flex gap-2 text-sm">
          <label className="flex items-center gap-1 cursor-pointer">
            <input
              type="radio"
              name="extractMethod"
              value="auto"
              checked={method === 'auto'}
              onChange={(e) => setMethod(e.target.value as 'auto' | 'free' | 'premium')}
              className="text-blue-600"
            />
            <span>Auto</span>
          </label>
          <label className="flex items-center gap-1 cursor-pointer">
            <input
              type="radio"
              name="extractMethod"
              value="premium"
              checked={method === 'premium'}
              onChange={(e) => setMethod(e.target.value as 'auto' | 'free' | 'premium')}
              className="text-blue-600"
            />
            <span className="flex items-center gap-1">
              <Zap className="h-3 w-3 text-yellow-500" />
              Premium
            </span>
          </label>
          <label className="flex items-center gap-1 cursor-pointer">
            <input
              type="radio"
              name="extractMethod"
              value="free"
              checked={method === 'free'}
              onChange={(e) => setMethod(e.target.value as 'auto' | 'free' | 'premium')}
              className="text-blue-600"
            />
            <span>Kostenlos</span>
          </label>
        </div>
      )}

      {/* Extraktions-Button */}
      <button
        onClick={handleExtract}
        disabled={disabled || loading || !url}
        className={`
          flex items-center justify-center gap-2 px-4 py-2 
          bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 
          text-white font-medium rounded-lg transition-colors
          disabled:cursor-not-allowed
          ${className}
        `}
      >
        {loading ? (
          <>
            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent" />
            <span>Extrahiere...</span>
          </>
        ) : (
          <>
            {method === 'premium' && subscription?.is_active ? (
              <Zap className="h-4 w-4" />
            ) : (
              <Download className="h-4 w-4" />
            )}
            <span>
              {method === 'premium' && subscription?.is_active 
                ? 'Premium-Extraktion' 
                : 'Inhalt extrahieren'}
            </span>
          </>
        )}
      </button>

      {/* Info für Nicht-Premium-Nutzer */}
      {!subscription?.is_active && (
        <div className="flex items-start gap-2 p-2 bg-blue-50 border border-blue-200 rounded-md">
          <AlertCircle className="h-4 w-4 text-blue-600 mt-0.5" />
          <div className="text-xs text-blue-800">
            <p>Mit Premium erhalten Sie bessere Extraktion für:</p>
            <ul className="list-disc list-inside mt-1">
              <li>JavaScript-basierte Seiten</li>
              <li>PDF-Dokumente</li>
              <li>Komplexe Layouts</li>
            </ul>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/common/ExtractUsageDisplay.tsx">
// Komponente zur Anzeige der Premium-Extraktions-Nutzung
import { useEffect, useState } from 'react';
import { AlertCircle, Zap, RefreshCw } from 'lucide-react';
import { getExtractionUsage, type ExtractUsageInfo } from '@/api/extract-premium';
import { useSubscription } from '@/components/common/UpgradeButton';

export function ExtractUsageDisplay() {
  const [usage, setUsage] = useState<ExtractUsageInfo | null>(null);
  const [loading, setLoading] = useState(true);
  const { subscription } = useSubscription();

  useEffect(() => {
    if (subscription?.is_active) {
      loadUsage();
    } else {
      setLoading(false);
    }
  }, [subscription]);

  const loadUsage = async () => {
    try {
      const usageData = await getExtractionUsage();
      setUsage(usageData);
    } catch (error) {
      console.error('Fehler beim Laden der Nutzungsstatistik:', error);
    } finally {
      setLoading(false);
    }
  };

  // Zeige nichts für Nicht-Premium-Nutzer
  if (!subscription?.is_active) {
    return null;
  }

  if (loading) {
    return (
      <div className="flex items-center gap-2 text-sm text-gray-500">
        <RefreshCw className="h-4 w-4 animate-spin" />
        <span>Lade Nutzungsstatistik...</span>
      </div>
    );
  }

  if (!usage) {
    return null;
  }

  const percentageUsed = (usage.used / usage.limit) * 100;
  const isNearLimit = usage.remaining <= 5;
  const isAtLimit = usage.remaining <= 0;

  return (
    <div className="rounded-lg border border-gray-200 bg-white p-4 shadow-sm">
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-2">
          <Zap className="h-5 w-5 text-yellow-500" />
          <h3 className="font-semibold text-gray-900">Premium-Extraktionen</h3>
        </div>
        <button
          onClick={loadUsage}
          className="text-gray-500 hover:text-gray-700 transition-colors"
          title="Nutzung aktualisieren"
        >
          <RefreshCw className="h-4 w-4" />
        </button>
      </div>

      <div className="space-y-3">
        {/* Fortschrittsbalken */}
        <div className="w-full">
          <div className="flex justify-between text-sm text-gray-600 mb-1">
            <span>{usage.used} von {usage.limit} genutzt</span>
            <span className={isNearLimit ? 'text-orange-600 font-semibold' : ''}>
              {usage.remaining} übrig
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2.5">
            <div
              className={`h-2.5 rounded-full transition-all ${
                isAtLimit 
                  ? 'bg-red-500' 
                  : isNearLimit 
                  ? 'bg-orange-500' 
                  : 'bg-green-500'
              }`}
              style={{ width: `${Math.min(percentageUsed, 100)}%` }}
            />
          </div>
        </div>

        {/* Warnung wenn Limit nahe */}
        {isNearLimit && !isAtLimit && (
          <div className="flex items-start gap-2 p-3 bg-orange-50 border border-orange-200 rounded-md">
            <AlertCircle className="h-4 w-4 text-orange-600 mt-0.5" />
            <div className="text-sm">
              <p className="text-orange-800 font-medium">
                Nur noch {usage.remaining} Premium-Extraktion{usage.remaining === 1 ? '' : 'en'} übrig
              </p>
              <p className="text-orange-700 mt-1">
                Zurücksetzung am {usage.resetsAt.toLocaleDateString('de-DE', {
                  day: '2-digit',
                  month: 'long',
                  year: 'numeric'
                })}
              </p>
            </div>
          </div>
        )}

        {/* Fehler wenn Limit erreicht */}
        {isAtLimit && (
          <div className="flex items-start gap-2 p-3 bg-red-50 border border-red-200 rounded-md">
            <AlertCircle className="h-4 w-4 text-red-600 mt-0.5" />
            <div className="text-sm">
              <p className="text-red-800 font-medium">
                Monatliches Limit erreicht
              </p>
              <p className="text-red-700 mt-1">
                Neue Premium-Extraktionen sind ab dem {usage.resetsAt.toLocaleDateString('de-DE', {
                  day: '2-digit',
                  month: 'long',
                  year: 'numeric'
                })} wieder verfügbar. Bis dahin nutzen Sie die kostenlose Basis-Extraktion.
              </p>
            </div>
          </div>
        )}

        {/* Info über Premium-Vorteile */}
        {!isAtLimit && (
          <div className="text-xs text-gray-500 mt-2">
            <p>Premium-Extraktion bietet:</p>
            <ul className="list-disc list-inside mt-1 space-y-0.5">
              <li>JavaScript-Rendering für moderne Webseiten</li>
              <li>Bessere Inhaltsextraktion</li>
              <li>PDF-Unterstützung</li>
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/components/common/PlatformSelector.tsx">
import type { Platform } from "@/config/platforms";
import { PLATFORM_LABEL, ALL_PLATFORMS } from "@/config/platforms";
import { Badge } from "@/components/ui/badge";

type Props = {
  value: Platform[];
  onChange: (p: Platform[]) => void;
};

export function PlatformSelector({ value, onChange }: Props) {
  const toggle = (p: Platform) => {
    const has = value.includes(p);
    onChange(has ? value.filter((v) => v !== p) : [...value, p]);
  };

  return (
    <div className="flex flex-wrap gap-2">
      {ALL_PLATFORMS.map((p) => {
        const active = value.includes(p);
        const isInstagram = p === "instagram";
        const isLinkedIn = p === "linkedin";
        const isX = p === "x";
        const activeClass = active
          ? isInstagram
            ? "bg-[#e706ab] text-white border-[#e706ab] hover:bg-[#e706ab]/90"
            : isLinkedIn
              ? "bg-[#0a66c2] text-white border-[#0a66c2] hover:bg-[#0a66c2]/90"
              : isX
                ? "bg-black text-white border-black hover:bg-black/90"
                : "bg-primary text-primary-foreground border-primary hover:bg-primary/90"
          : "bg-background hover:bg-muted";
        return (
          <button
            key={p}
            type="button"
            onClick={() => toggle(p)}
            className={`inline-flex items-center gap-2 rounded-md border px-3 py-1.5 text-sm transition ${activeClass}`}
            aria-pressed={active}
          >
            <Badge variant="outline" className="border-transparent text-inherit">
              {PLATFORM_LABEL[p]}
            </Badge>
          </button>
        );
      })}
    </div>
  );
}
</file>

<file path="src/components/common/ProtectedRoute.tsx">
import { useEffect, useState } from 'react'
import { Navigate } from 'react-router-dom'
import { getSession, onAuthStateChange } from '@/api/supabase'

interface Props {
  children: JSX.Element
}

export default function ProtectedRoute({ children }: Props) {
  const [isAuthed, setIsAuthed] = useState<boolean | null>(null)

  useEffect(() => {
    getSession().then(({ data }) => setIsAuthed(!!data.session))
    const { data: sub } = onAuthStateChange((_event, session) => setIsAuthed(!!session))
    return () => sub?.subscription?.unsubscribe?.()
  }, [])

  if (isAuthed === null) return null
  if (!isAuthed) return <Navigate to="/" replace />
  return children
}
</file>

<file path="src/components/graphics/ContentFlowGraphic.tsx">
export default function ContentFlowGraphic() {
  return (
    <div className="relative bg-gradient-to-br from-slate-50/50 to-white/50 dark:from-slate-900/50 dark:to-slate-800/50 rounded-2xl p-4 sm:p-6 lg:p-8 overflow-hidden">
      {/* Simple background decoration */}
      <div className="absolute inset-0 overflow-hidden opacity-30">
        <div className="absolute top-0 left-0 w-32 h-32 sm:w-48 sm:h-48 bg-gradient-to-br from-primary/20 to-transparent rounded-full blur-2xl" />
        <div className="absolute bottom-0 right-0 w-32 h-32 sm:w-48 sm:h-48 bg-gradient-to-tl from-accent/20 to-transparent rounded-full blur-2xl" />
      </div>
      
      <div className="relative z-10">
        {/* Mobile: Vertical flow, Desktop: Horizontal flow */}
        <div className="flex flex-col md:flex-row items-center justify-between gap-4 md:gap-8">
          
          {/* 1. Newsletter Input */}
          <div className="flex flex-col items-center text-center">
            <div className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm p-4 rounded-xl border border-slate-200/50 dark:border-slate-700/50 shadow-lg">
              <div className="w-10 h-10 mx-auto mb-2 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/30 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-blue-600 dark:text-blue-400" viewBox="0 0 24 24" fill="none">
                  <path d="M8 6h8M8 10h8M8 14h5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                  <path d="M4 4a2 2 0 012-2h8l4 4v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" stroke="currentColor" strokeWidth="1.5" fill="none"/>
                </svg>
              </div>
              <h3 className="text-xs font-semibold text-slate-900 dark:text-white">Newsletter</h3>
              <p className="text-[10px] text-slate-500 dark:text-slate-400 mt-1">Blog Input</p>
            </div>
          </div>

          {/* Arrow for mobile, hidden on desktop */}
          <div className="md:hidden">
            <svg className="w-6 h-6 text-[#D97757] animate-pulse" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" strokeWidth="2" strokeLinecap="round" d="M12 5v14m0 0l-3-3m3 3l3-3"/>
            </svg>
          </div>

          {/* Arrow for desktop, hidden on mobile */}
          <div className="hidden md:block flex-shrink-0">
            <svg className="w-8 h-6 text-[#D97757] animate-pulse" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" strokeWidth="2" strokeLinecap="round" d="M5 12h14m0 0l-3-3m3 3l-3 3"/>
            </svg>
          </div>

          {/* 2. Claude AI - Smaller on mobile */}
          <div className="flex flex-col items-center text-center">
            <div className="bg-gradient-to-br from-[#D97757] to-[#C56649] p-3 rounded-xl shadow-lg">
              <svg className="w-6 h-6" viewBox="0 0 512 510" fill="white">
                <path fillRule="nonzero" d="M142.27 316.619l73.655-41.326 1.238-3.589-1.238-1.996-3.589-.001-12.31-.759-42.084-1.138-36.498-1.516-35.361-1.896-8.897-1.895-8.34-10.995.859-5.484 7.482-5.03 10.717.935 23.683 1.617 35.537 2.452 25.782 1.517 38.193 3.968h6.064l.86-2.451-2.073-1.517-1.618-1.517-36.776-24.922-39.81-26.338-20.852-15.166-11.273-7.683-5.687-7.204-2.451-15.721 10.237-11.273 13.75.935 3.513.936 13.928 10.716 29.749 23.027 38.848 28.612 5.687 4.727 2.275-1.617.278-1.138-2.553-4.271-21.13-38.193-22.546-38.848-10.035-16.101-2.654-9.655c-.935-3.968-1.617-7.304-1.617-11.374l11.652-15.823 6.445-2.073 15.545 2.073 6.547 5.687 9.655 22.092 15.646 34.78 24.265 47.291 7.103 14.028 3.791 12.992 1.416 3.968 2.449-.001v-2.275l1.997-26.641 3.69-32.707 3.589-42.084 1.239-11.854 5.863-14.206 11.652-7.683 9.099 4.348 7.482 10.716-1.036 6.926-4.449 28.915-8.72 45.294-5.687 30.331h3.313l3.792-3.791 15.342-20.372 25.782-32.227 11.374-12.789 13.27-14.129 8.517-6.724 16.1-.001 11.854 17.617-5.307 18.199-16.581 21.029-13.75 17.819-19.716 26.54-12.309 21.231 1.138 1.694 2.932-.278 44.536-9.479 24.062-4.347 28.714-4.928 12.992 6.066 1.416 6.167-5.106 12.613-30.71 7.583-36.018 7.204-53.636 12.689-.657.48.758.935 24.164 2.275 10.337.556h25.301l47.114 3.514 12.309 8.139 7.381 9.959-1.238 7.583-18.957 9.655-25.579-6.066-59.702-14.205-20.474-5.106-2.83-.001v1.694l17.061 16.682 31.266 28.233 39.152 36.397 1.997 8.999-5.03 7.102-5.307-.758-34.401-25.883-13.27-11.651-30.053-25.302-1.996-.001v2.654l6.926 10.136 36.574 54.975 1.895 16.859-2.653 5.485-9.479 3.311-10.414-1.895-21.408-30.054-22.092-33.844-17.819-30.331-2.173 1.238-10.515 113.261-4.929 5.788-11.374 4.348-9.478-7.204-5.03-11.652 5.03-23.027 6.066-30.052 4.928-23.886 4.449-29.674 2.654-9.858-.177-.657-2.173.278-22.37 30.71-34.021 45.977-26.919 28.815-6.445 2.553-11.173-5.789 1.037-10.337 6.243-9.2 37.257-47.392 22.47-29.371 14.508-16.961-.101-2.451h-.859l-98.954 64.251-17.618 2.275-7.583-7.103.936-11.652 3.589-3.791 29.749-20.474-.101.102.024.101z"/>
              </svg>
            </div>
            <span className="text-[10px] font-medium text-[#D97757] dark:text-[#E88A6A] mt-2">Claude AI</span>
          </div>

          {/* Arrow for mobile */}
          <div className="md:hidden">
            <svg className="w-6 h-6 text-[#D97757] animate-pulse" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" strokeWidth="2" strokeLinecap="round" d="M12 5v14m0 0l-3-3m3 3l3-3"/>
            </svg>
          </div>

          {/* Arrow for desktop */}
          <div className="hidden md:block flex-shrink-0">
            <svg className="w-8 h-6 text-[#D97757] animate-pulse" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" strokeWidth="2" strokeLinecap="round" d="M5 12h14m0 0l-3-3m3 3l-3 3"/>
            </svg>
          </div>

          {/* 3. Social Media Output */}
          <div className="flex flex-col items-center text-center">
            <div className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm p-4 rounded-xl border border-slate-200/50 dark:border-slate-700/50 shadow-lg">
              {/* Platform icons - smaller and in a row */}
              <div className="flex items-center justify-center gap-2 mb-2">
                {/* LinkedIn */}
                <div className="w-7 h-7 bg-[#0a66c2] rounded flex items-center justify-center">
                  <svg className="w-4 h-4" viewBox="0 0 24 24" fill="white">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                  </svg>
                </div>
                
                {/* X/Twitter */}
                <div className="w-7 h-7 bg-black dark:bg-white rounded flex items-center justify-center">
                  <svg className="w-3 h-3 text-white dark:text-black" viewBox="0 0 512 510" fill="currentColor">
                    <path fillRule="nonzero" d="M323.74 148.35h36.12l-78.91 90.2 92.83 122.73h-72.69l-56.93-74.43-65.15 74.43h-36.14l84.4-96.47-89.05-116.46h74.53l51.46 68.04 59.53-68.04zm-12.68 191.31h20.02l-129.2-170.82H180.4l130.66 170.82z"/>
                  </svg>
                </div>
                
                {/* Instagram */}
                <div className="w-7 h-7 bg-gradient-to-br from-[#f58529] via-[#dd2a7b] to-[#8134af] rounded flex items-center justify-center">
                  <svg className="w-4 h-4 text-white" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                  </svg>
                </div>
              </div>
              
              <h3 className="text-xs font-semibold text-slate-900 dark:text-white">Social Posts</h3>
              <p className="text-[10px] text-slate-500 dark:text-slate-400 mt-1">Optimiert</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/graphics/HowItWorksGraphic.tsx">
import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Play, Pause } from 'lucide-react';

const HowItWorksGraphic: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isPlaying, setIsPlaying] = useState(true);
  const [imageLoaded, setImageLoaded] = useState<boolean[]>([false, false, false, false, false, false, false]);

  const steps = [
    {
      id: 1,
      title: "URL oder Text einfügen",
      description: "Füge eine URL ein oder kopiere deinen Newsletter direkt ins Textfeld",
      image: "https://pw-bunny.b-cdn.net/Linkedin-Posts-Landing/1-URL-einf%C3%BCgen.jpg",
      color: "from-blue-500/10 to-blue-600/10",
      borderColor: "border-blue-500/20"
    },
    {
      id: 2,
      title: "Content wird extrahiert",
      description: "Der Inhalt deines Blogposts oder Newsletters wird automatisch erkannt",
      image: "https://pw-bunny.b-cdn.net/Linkedin-Posts-Landing/2-Inhalt-Blogpost-Newsletter-eingef%C3%BCgt.jpg",
      color: "from-purple-500/10 to-purple-600/10",
      borderColor: "border-purple-500/20"
    },
    {
      id: 3,
      title: "Plattform auswählen",
      description: "Wähle zwischen LinkedIn, X (Twitter) oder Instagram",
      image: "https://pw-bunny.b-cdn.net/Linkedin-Posts-Landing/3-Social-Media-Plattform-selektieren.jpg",
      color: "from-primary/10 to-accent/10",
      borderColor: "border-primary/20"
    },
    {
      id: 4,
      title: "Multiple Posts generiert",
      description: "Claude AI erstellt mehrere optimierte Post-Varianten für dich",
      image: "https://pw-bunny.b-cdn.net/Linkedin-Posts-Landing/4-multiple-posts-erstellt.jpg",
      color: "from-green-500/10 to-green-600/10",
      borderColor: "border-green-500/20"
    },
    {
      id: 5,
      title: "Posts bearbeiten",
      description: "Passe die generierten Posts nach deinen Wünschen an",
      image: "https://pw-bunny.b-cdn.net/Linkedin-Posts-Landing/5-editieren-von-posts.jpg",
      color: "from-orange-500/10 to-orange-600/10",
      borderColor: "border-orange-500/20"
    },
    {
      id: 6,
      title: "Posts speichern",
      description: "Speichere deine Lieblingsposts für später",
      image: "https://pw-bunny.b-cdn.net/Linkedin-Posts-Landing/6-posts-speichern.jpg",
      color: "from-indigo-500/10 to-indigo-600/10",
      borderColor: "border-indigo-500/20"
    },
    {
      id: 7,
      title: "Direkt posten",
      description: "Teile deine Posts direkt auf den Plattformen oder kopiere sie",
      image: "https://pw-bunny.b-cdn.net/Linkedin-Posts-Landing/7-posten.jpg",
      color: "from-pink-500/10 to-pink-600/10",
      borderColor: "border-pink-500/20"
    }
  ];

  // Auto-play functionality
  useEffect(() => {
    if (!isPlaying) return;
    
    const interval = setInterval(() => {
      setCurrentStep((prev) => (prev + 1) % steps.length);
    }, 4000); // Change slide every 4 seconds

    return () => clearInterval(interval);
  }, [isPlaying, steps.length]);

  const handlePrevious = () => {
    setIsPlaying(false);
    setCurrentStep((prev) => (prev - 1 + steps.length) % steps.length);
  };

  const handleNext = () => {
    setIsPlaying(false);
    setCurrentStep((prev) => (prev + 1) % steps.length);
  };

  const handleStepClick = (index: number) => {
    setIsPlaying(false);
    setCurrentStep(index);
  };

  const handleImageLoad = (index: number) => {
    setImageLoaded(prev => {
      const newState = [...prev];
      newState[index] = true;
      return newState;
    });
  };

  return (
    <div className="relative w-full">
      {/* Desktop version */}
      <div className="hidden lg:block">
        <div className="bg-white dark:bg-slate-800 rounded-2xl shadow-xl overflow-hidden border border-slate-200 dark:border-slate-700">
          {/* Image container with aspect ratio */}
          <div className="relative aspect-[16/10] bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
            {/* Loading skeleton */}
            {!imageLoaded[currentStep] && (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="animate-pulse bg-slate-200 dark:bg-slate-700 rounded-lg w-full h-full" />
              </div>
            )}
            
            {/* Main image */}
            <img
              src={steps[currentStep].image}
              alt={steps[currentStep].title}
              className={`absolute inset-0 w-full h-full object-contain transition-opacity duration-500 ${
                imageLoaded[currentStep] ? 'opacity-100' : 'opacity-0'
              }`}
              onLoad={() => handleImageLoad(currentStep)}
            />

            {/* Navigation arrows */}
            <button
              onClick={handlePrevious}
              className="absolute left-4 top-1/2 -translate-y-1/2 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-full p-2 shadow-lg hover:scale-110 transition-transform duration-200"
              aria-label="Previous step"
            >
              <ChevronLeft className="w-6 h-6" />
            </button>
            <button
              onClick={handleNext}
              className="absolute right-4 top-1/2 -translate-y-1/2 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-full p-2 shadow-lg hover:scale-110 transition-transform duration-200"
              aria-label="Next step"
            >
              <ChevronRight className="w-6 h-6" />
            </button>

            {/* Play/Pause button */}
            <button
              onClick={() => setIsPlaying(!isPlaying)}
              className="absolute top-4 right-4 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-full p-2 shadow-lg hover:scale-110 transition-transform duration-200"
              aria-label={isPlaying ? "Pause" : "Play"}
            >
              {isPlaying ? (
                <Pause className="w-5 h-5" />
              ) : (
                <Play className="w-5 h-5" />
              )}
            </button>
          </div>

          {/* Step information and indicators */}
          <div className="p-6">
            {/* Step title and description */}
            <div className="mb-6">
              <h3 className="text-xl font-semibold mb-2 flex items-center gap-2">
                <span className="inline-flex items-center justify-center w-8 h-8 rounded-full bg-gradient-to-r from-primary to-accent text-white text-sm font-bold">
                  {steps[currentStep].id}
                </span>
                {steps[currentStep].title}
              </h3>
              <p className="text-muted-foreground">
                {steps[currentStep].description}
              </p>
            </div>

            {/* Step indicators */}
            <div className="flex gap-2">
              {steps.map((step, index) => (
                <button
                  key={step.id}
                  onClick={() => handleStepClick(index)}
                  className={`flex-1 h-2 rounded-full transition-all duration-300 ${
                    index === currentStep
                      ? 'bg-gradient-to-r from-primary to-accent'
                      : 'bg-slate-200 dark:bg-slate-700 hover:bg-slate-300 dark:hover:bg-slate-600'
                  }`}
                  aria-label={`Go to step ${step.id}`}
                />
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Mobile version */}
      <div className="block lg:hidden">
        <div className="bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden border border-slate-200 dark:border-slate-700">
          {/* Image container */}
          <div className="relative aspect-[16/10] bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
            {/* Loading skeleton */}
            {!imageLoaded[currentStep] && (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="animate-pulse bg-slate-200 dark:bg-slate-700 rounded-lg w-full h-full" />
              </div>
            )}
            
            {/* Main image */}
            <img
              src={steps[currentStep].image}
              alt={steps[currentStep].title}
              className={`absolute inset-0 w-full h-full object-contain transition-opacity duration-500 ${
                imageLoaded[currentStep] ? 'opacity-100' : 'opacity-0'
              }`}
              onLoad={() => handleImageLoad(currentStep)}
            />

            {/* Mobile navigation overlay */}
            <div className="absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/50 to-transparent p-4">
              <div className="flex justify-between items-center">
                <button
                  onClick={handlePrevious}
                  className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-full p-2"
                  aria-label="Previous step"
                >
                  <ChevronLeft className="w-5 h-5" />
                </button>
                
                {/* Step dots */}
                <div className="flex gap-1.5">
                  {steps.map((_, index) => (
                    <button
                      key={index}
                      onClick={() => handleStepClick(index)}
                      className={`w-2 h-2 rounded-full transition-all duration-300 ${
                        index === currentStep
                          ? 'w-6 bg-white'
                          : 'bg-white/50'
                      }`}
                      aria-label={`Go to step ${index + 1}`}
                    />
                  ))}
                </div>

                <button
                  onClick={handleNext}
                  className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-full p-2"
                  aria-label="Next step"
                >
                  <ChevronRight className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>

          {/* Step information */}
          <div className="p-4">
            <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
              <span className="inline-flex items-center justify-center w-7 h-7 rounded-full bg-gradient-to-r from-primary to-accent text-white text-xs font-bold">
                {steps[currentStep].id}
              </span>
              {steps[currentStep].title}
            </h3>
            <p className="text-sm text-muted-foreground">
              {steps[currentStep].description}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HowItWorksGraphic;
</file>

<file path="src/components/landing/DecorativeBackground.tsx">
export function DecorativeBackground() {
  return (
    <div className="absolute inset-0 overflow-hidden z-0">
      <div className="absolute -left-40 -top-40 w-96 h-96 rounded-full bg-primary/10 blur-3xl animate-pulse" style={{ animationDuration: '15s' }} />
      <div className="absolute right-0 top-1/4 w-[30rem] h-[30rem] rounded-full bg-accent/10 blur-3xl animate-pulse" style={{ animationDuration: '20s', animationDelay: '2s' }} />
      <div className="absolute left-1/3 bottom-0 w-96 h-96 rounded-full bg-secondary/10 blur-3xl animate-pulse" style={{ animationDuration: '18s', animationDelay: '1s' }} />
      <div className="absolute right-1/4 bottom-1/4 w-64 h-64 rounded-full bg-primary/5 blur-3xl animate-pulse" style={{ animationDuration: '25s', animationDelay: '0.5s' }} />
    </div>
  );
}
</file>

<file path="src/components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/Logo.tsx">
interface LogoProps {
  className?: string;
  showText?: boolean;
  textClassName?: string;
}

export function Logo({ className = "w-8 h-8", showText = false, textClassName = "" }: LogoProps) {
  return (
    <div className="flex items-center gap-2">
      <div className={`${className} bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 rounded-xl shadow-lg flex items-center justify-center`}>
        {/* Clean refresh/transform icon */}
        <svg 
          className="w-6 h-6 text-white"
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
          strokeWidth={2.5}
        >
          <path 
            strokeLinecap="round" 
            strokeLinejoin="round" 
            d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"
          />
        </svg>
      </div>
      
      {showText && (
        <span className={textClassName || "font-bold text-xl"}>
          Social Transformer
        </span>
      )}
    </div>
  );
}
</file>

<file path="src/config/platforms.ts">
export type Platform = "linkedin" | "x" | "instagram";

export const PLATFORM_LABEL: Record<Platform, string> = {
  linkedin: "LinkedIn",
  x: "X (Twitter)",
  instagram: "Instagram",
};

export const ALL_PLATFORMS: Platform[] = ["linkedin", "x", "instagram"];
</file>

<file path="src/design-system/components/ActionButtons/DeleteButton.tsx">
import React from 'react'
import { Trash2 } from 'lucide-react'
import { Button } from '../Button'
import { ButtonProps } from '../Button/Button.types'

interface DeleteButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
}

export const DeleteButton: React.FC<DeleteButtonProps> = ({ 
  text = 'Löschen',
  ...props 
}) => {
  return (
    <Button
      variant="destructive"
      leftIcon={<Trash2 size={16} />}
      {...props}
    >
      {text}
    </Button>
  )
}
</file>

<file path="src/design-system/components/ActionButtons/EditButton.tsx">
import React from 'react'
import { Edit2 } from 'lucide-react'
import { Button } from '../Button'
import { ButtonProps } from '../Button/Button.types'

interface EditButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
}

export const EditButton: React.FC<EditButtonProps> = ({ 
  text = 'Bearbeiten',
  ...props 
}) => {
  return (
    <Button
      variant="secondary"
      leftIcon={<Edit2 size={16} />}
      {...props}
    >
      {text}
    </Button>
  )
}
</file>

<file path="src/design-system/components/ActionButtons/InstagramShareButton.tsx">
import React from 'react'
import { Button } from '../Button'
import { ButtonProps } from '../Button/Button.types'
import { InstagramLogo } from '../Icons/InstagramLogo'
import { useToast } from '../../../hooks/use-toast'

interface InstagramShareButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
  postContent?: string
}

export const InstagramShareButton: React.FC<InstagramShareButtonProps> = ({
  text = 'Auf Instagram teilen',
  postContent = '',
  onClick,
  ...props
}) => {
  const { toast } = useToast()
  const handleInstagramShare = (e: React.MouseEvent<HTMLButtonElement>) => {
    // Strategy:
    // 1) Mobile: try native share (opens system sheet incl. Instagram)
    // 2) Mobile: deep link into Instagram app library as fallback
    // 3) Desktop: open web composer; copy caption for easy paste

  const isMobile = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent)
  // Opening /create/select directly can redirect to the @create profile when not logged in.
  // Use login with next param so users land in the composer after login.
  const webComposerUrl = 'https://www.instagram.com/accounts/login/?next=%2Fcreate%2Fselect%2F'

    const copyCaption = () => {
      if (postContent) {
        navigator.clipboard?.writeText(postContent).catch(() => {})
        // Small hint so the user knows to paste the copied caption
        toast({
          title: 'Text kopiert',
          description: 'Füge den Text in Instagram in das Beschreibungsfeld ein.',
        })
      }
    }

    const openWebComposer = () => {
      copyCaption()
  window.open(webComposerUrl, '_blank', 'noopener,noreferrer,width=1200,height=800')
    }

    const tryDeepLink = () => {
      // Copy caption then try opening Instagram app to library
      copyCaption()
      // Using location.href tends to work better for app deep links on mobile
      const deepLink = 'instagram://library'
      // Navigate away in the current tab; if it fails, fall back shortly after
      const fallback = setTimeout(() => {
        openWebComposer()
      }, 1200)
      const beforeUnload = () => clearTimeout(fallback)
      window.addEventListener('beforeunload', beforeUnload, { once: true })
      window.location.href = deepLink
    }

    type NavigatorWithShare = Navigator & { share?: (data: { text?: string; url?: string; title?: string }) => Promise<void> }
    const navWithShare = navigator as NavigatorWithShare

    if (isMobile && typeof navWithShare.share === 'function') {
      // Try native share first
      navWithShare
        .share({ text: postContent || '' })
        .catch(() => {
          // If user cancels or share not available, try deep link
          tryDeepLink()
        })
    } else if (isMobile) {
      tryDeepLink()
    } else {
      openWebComposer()
    }

    onClick?.(e)
  }

  return (
    <Button
      variant="instagram"
      leftIcon={<InstagramLogo size={16} className="text-white" />}
      onClick={handleInstagramShare}
      {...props}
    >
      {text}
    </Button>
  )
}

export default InstagramShareButton
</file>

<file path="src/design-system/components/ActionButtons/LinkedInShareButton.tsx">
import React from 'react'
import { Linkedin } from 'lucide-react'
import { Button } from '../Button'
import { ButtonProps } from '../Button/Button.types'

interface LinkedInShareButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
  postContent?: string
}

export const LinkedInShareButton: React.FC<LinkedInShareButtonProps> = ({ 
  text = 'Auf LinkedIn teilen',
  postContent = '',
  onClick,
  ...props 
}) => {
  const handleLinkedInShare = (e: React.MouseEvent<HTMLButtonElement>) => {
    if (postContent) {
      const linkedInUrl = `https://www.linkedin.com/feed/?shareActive=true&text=${encodeURIComponent(postContent)}`
      window.open(linkedInUrl, '_blank', 'width=600,height=600')
    }
    onClick?.(e)
  }

  return (
    <Button
      variant="linkedin"
      leftIcon={<Linkedin size={16} />}
      onClick={handleLinkedInShare}
      {...props}
    >
      {text}
    </Button>
  )
}
</file>

<file path="src/design-system/components/ActionButtons/SaveButton.tsx">
import React from 'react'
import { Save } from 'lucide-react'
import { Button } from '../Button'
import { ButtonProps } from '../Button/Button.types'

interface SaveButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
}

export const SaveButton: React.FC<SaveButtonProps> = ({ 
  text = 'Speichern',
  ...props 
}) => {
  return (
    <Button
      variant="primary"
      leftIcon={<Save size={16} />}
      {...props}
    >
      {text}
    </Button>
  )
}
</file>

<file path="src/design-system/components/ActionButtons/XShareButton.tsx">
import React from 'react'
import { Button } from '../Button'
import { ButtonProps } from '../Button/Button.types'
import { XLogo } from '../Icons/XLogo'

interface XShareButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
  tweetContent?: string
}

export const XShareButton: React.FC<XShareButtonProps> = ({
  text = 'Auf X teilen',
  tweetContent = '',
  onClick,
  ...props
}) => {
  const handleShare = (e: React.MouseEvent<HTMLButtonElement>) => {
    if (tweetContent) {
      const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweetContent)}`
      window.open(url, '_blank', 'width=600,height=600')
    }
    onClick?.(e)
  }

  return (
    <Button
      variant="x"
      leftIcon={<XLogo size={16} className="text-white" />}
      onClick={handleShare}
      {...props}
    >
      {text}
    </Button>
  )
}

export default XShareButton
</file>

<file path="src/design-system/components/Button/index.ts">
export { Button } from './Button'
export type { ButtonProps, ButtonVariant, ButtonSize } from './Button.types'
export { buttonVariants } from './variants'
</file>

<file path="src/design-system/components/Icons/XLogo.tsx">
import React from 'react'

type XLogoProps = {
  size?: number
  className?: string
}

// Simple X/Twitter-inspired logo rendered in solid color (uses currentColor)
export const XLogo: React.FC<XLogoProps> = ({ size = 16, className }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    width={size}
    height={size}
    className={className}
    aria-hidden="true"
  >
  {/* White X shape; use currentColor so parent can control (we pass text-white) */}
  <path d="M3.5 3.5h4L13 10l5.5-6.5h2L14.5 12l6.5 8.5h-4L12 14l-6 6.5h-2L9.5 12 3.5 3.5z" fill="currentColor" />
  </svg>
)

export default XLogo
</file>

<file path="src/design-system/BUTTON_GUIDELINES.md">
# Button Guidelines

## Übersicht

Dieses Dokument beschreibt die Verwendung von Buttons in der LinkedIn Posts Anwendung. Alle Buttons folgen einem konsistenten Design-System für eine einheitliche User Experience.

## Button Varianten

### 1. Primary (Lila)
- **Farbe**: #8B5CF6
- **Verwendung**: Hauptaktionen wie "Speichern", "Erstellen", "Bestätigen"
- **Beispiel**: SaveButton für das Speichern von Beiträgen

### 2. Secondary (Grau)
- **Farbe**: #6B7280
- **Verwendung**: Sekundäre Aktionen wie "Bearbeiten", "Optionen"
- **Beispiel**: EditButton für das Bearbeiten von Beiträgen

### 3. LinkedIn (Blau)
- **Farbe**: #0077B5 (offizielles LinkedIn-Blau)
- **Verwendung**: Ausschließlich für LinkedIn-bezogene Aktionen
- **Beispiel**: LinkedInShareButton für das Teilen auf LinkedIn

### 4. Destructive (Rot)
- **Farbe**: #EF4444
- **Verwendung**: Lösch-Aktionen oder gefährliche Operationen
- **Beispiel**: DeleteButton für das Löschen von Beiträgen

### 5. Ghost
- **Farbe**: Transparent mit grauem Text
- **Verwendung**: Tertiäre Aktionen, "Abbrechen", weniger wichtige Aktionen

### 6. Outline
- **Farbe**: Transparenter Hintergrund mit Rahmen
- **Verwendung**: Alternative zu Ghost für mehr Betonung

## Button Größen

- **Small (sm)**: Für kompakte Bereiche und Icon-Buttons
- **Medium (md)**: Standard-Größe für die meisten Aktionen
- **Large (lg)**: Für primäre CTAs und wichtige Aktionen

## Best Practices

### 1. Konsistente Aktions-Buttons verwenden
```tsx
// ✅ Gut - Verwende vordefinierte Action Buttons
import { SaveButton, EditButton } from '@/design-system/components/ActionButtons'

<SaveButton onClick={handleSave} />
<EditButton onClick={handleEdit} />

// ❌ Vermeiden - Eigene Button-Implementierungen
<button className="bg-purple-600">Speichern</button>
```

### 2. Konsistente Button-Texte
- **Speichern**: Immer "Speichern" (nicht "Save", "Sichern", etc.)
- **Bearbeiten**: Immer "Bearbeiten" (nicht "Edit", "Ändern", etc.)
- **Löschen**: Immer "Löschen" (nicht "Delete", "Entfernen", etc.)
- **Abbrechen**: Immer "Abbrechen" (nicht "Cancel", "Zurück", etc.)

### 3. Icon-Verwendung
- Icons links vom Text positionieren
- Konsistente Icon-Größe verwenden (16px für sm/md, 20px für lg)
- Lucide React Icons verwenden für Konsistenz

### 4. Loading States
```tsx
<SaveButton isLoading={isLoading} />
// Zeigt automatisch einen Spinner und "Loading..." Text
```

### 5. Disabled States
- Buttons deaktivieren während Loading oder wenn Aktion nicht verfügbar
- Opacity wird automatisch auf 50% reduziert

## Beispiele

### Formular mit Aktions-Buttons
```tsx
<div className="flex justify-end gap-2">
  <Button variant="ghost" onClick={handleCancel}>
    Abbrechen
  </Button>
  <SaveButton onClick={handleSave} isLoading={isSaving} />
</div>
```

### Post-Aktionen
```tsx
<div className="flex gap-2">
  <EditButton size="sm" onClick={handleEdit} />
  <SaveButton size="sm" onClick={handleSave} text="" />
  <LinkedInShareButton size="sm" postContent={content} />
  <DeleteButton size="sm" onClick={handleDelete} />
</div>
```

### Primäre CTA
```tsx
<Button 
  variant="primary" 
  size="lg" 
  fullWidth
  onClick={handleCreate}
>
  ✨ LinkedIn-Beiträge erstellen
</Button>
```

## Farb-Referenz

```typescript
// Immer Design Tokens verwenden
import { colors } from '@/design-system/tokens/colors'

// Primary: colors.primary.DEFAULT (#8B5CF6)
// LinkedIn: colors.linkedin.DEFAULT (#0077B5)
// Secondary: colors.secondary.DEFAULT (#6B7280)
// Destructive: colors.destructive.DEFAULT (#EF4444)
```

## Migration bestehender Buttons

Wenn Sie bestehende HTML-Buttons oder inkonsistente Button-Implementierungen finden:

1. Identifizieren Sie die Aktion (Speichern, Bearbeiten, etc.)
2. Wählen Sie die passende vordefinierte Komponente
3. Ersetzen Sie den alten Button mit der Design-System Komponente
4. Testen Sie die Funktionalität

## Wartung

- Neue Button-Varianten nur nach Absprache hinzufügen
- Änderungen an Farben nur in den Design Tokens vornehmen
- Bei neuen Features prüfen, ob existierende Buttons wiederverwendet werden können
</file>

<file path="src/design-system/typography-hierarchy.ts">
// Einheitliche Typografie-Hierarchie für die Landing Page
// Angepasst an das aktuelle shadcn/ui Design System und CSS-Variablen

export const typographyHierarchy = {
  // Hauptüberschriften (Hero Section) - responsiv und modern
  h1: {
    className: "text-4xl md:text-5xl lg:text-6xl font-bold leading-tight tracking-tight",
    description: "Hero headlines - größte Überschriften mit responsiver Skalierung"
  },
  
  // Sektionsüberschriften (HowItWorks, Pricing, etc.)
  h2: {
    className: "text-3xl md:text-4xl lg:text-5xl font-bold leading-tight tracking-tight",
    description: "Section headlines - Hauptsektionen mit konsistenter Hierarchie"
  },
  
  // Subsektionsüberschriften (Feature Cards, etc.)
  h3: {
    className: "text-xl md:text-2xl lg:text-3xl font-semibold leading-snug tracking-tight",
    description: "Subsection headlines - Karten, Features mit verbesserter Lesbarkeit"
  },
  
  // Kleinere Überschriften (Card Titles, etc.)
  h4: {
    className: "text-lg md:text-xl font-semibold leading-snug",
    description: "Small headlines - Listen, Details, Card Titles"
  },
  
  // Sehr kleine Überschriften
  h5: {
    className: "text-base md:text-lg font-semibold leading-snug",
    description: "Micro headlines - kleinste Überschriften"
  },
  
  // Body Text Größen - erweitert und responsiv
  bodyXLarge: {
    className: "text-xl md:text-2xl leading-relaxed",
    description: "Extra large body text - Hero descriptions, wichtige Statements"
  },
  
  bodyLarge: {
    className: "text-lg md:text-xl leading-relaxed",
    description: "Large body text - Sektionsbeschreibungen"
  },
  
  body: {
    className: "text-base md:text-lg leading-normal",
    description: "Standard body text - responsiv für bessere Lesbarkeit"
  },
  
  bodySmall: {
    className: "text-sm md:text-base leading-normal",
    description: "Small body text - Cards, Details, Metainformationen"
  },
  
  bodyXSmall: {
    className: "text-xs md:text-sm leading-normal",
    description: "Extra small body text - Captions, Footnotes"
  },
  
  // Spezielle Text-Typen - erweitert
  badge: {
    className: "text-xs md:text-sm font-medium uppercase tracking-wide",
    description: "Badges und Labels mit verbesserter Readability"
  },
  
  button: {
    className: "text-sm md:text-base font-semibold tracking-wide",
    description: "Button Text - responsiv und konsistent"
  },
  
  buttonLarge: {
    className: "text-base md:text-lg font-semibold tracking-wide",
    description: "Large Button Text - für wichtige CTAs"
  },
  
  caption: {
    className: "text-xs leading-relaxed",
    description: "Captions, Footer text, sehr kleine Zusatzinfos"
  },
  
  code: {
    className: "text-sm font-mono bg-muted px-1 py-0.5 rounded",
    description: "Inline code snippets"
  },
  
  // Farben für verschiedene Text-Hierarchien - angepasst an CSS-Variablen
  colors: {
    primary: "text-foreground", // Haupttext (hsl(222.2 84% 4.9%))
    secondary: "text-muted-foreground", // Beschreibungen (hsl(215.4 16.3% 46.9%))
    accent: "text-primary", // Hervorhebungen (hsl(262 83% 58%))
    muted: "text-muted-foreground/70", // Weniger wichtige Texte
    inverse: "text-primary-foreground", // Text auf farbigen Hintergründen
    success: "text-green-600 dark:text-green-400", // Erfolg
    warning: "text-amber-600 dark:text-amber-400", // Warnung
    danger: "text-destructive", // Fehler/Gefahr
    claude: "text-[#D97757]", // Claude AI Markenfarbe
    linkedin: "text-[#0A66C2]", // LinkedIn Markenfarbe
  },
  
  // Utility-Klassen für verschiedene Anwendungsfälle
  utilities: {
    // Gradient Text
    gradientText: "bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent",
    
    // Responsive Text Centering
    textCenter: "text-center",
    textLeft: "text-left md:text-left",
    textCenterMobile: "text-center md:text-left",
    
    // Text Wrapping
    textBalance: "text-wrap balance", // Für bessere Zeilenumbrüche
    textNoWrap: "whitespace-nowrap",
    
    // Interactive States
    textHover: "hover:text-primary transition-colors duration-200",
    textActive: "active:text-primary/80",
  }
} as const

export type TypographyHierarchy = typeof typographyHierarchy
</file>

<file path="src/hooks/useTypewriter.ts">
import { useEffect, useState } from "react";

type Options = {
  typingSpeed?: number;
  deletingSpeed?: number;
  pauseTime?: number;
  enabled?: boolean;
};

export function useTypewriter(
  phrases: string[],
  { typingSpeed = 100, deletingSpeed = 50, pauseTime = 2000, enabled = true }: Options = {}
) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [displayText, setDisplayText] = useState("");
  const [isDeleting, setIsDeleting] = useState(false);

  useEffect(() => {
    if (!enabled || phrases.length === 0) return;

    const currentPhrase = phrases[currentIndex] ?? "";

    if (!isDeleting && displayText.length < currentPhrase.length) {
      const timeout = setTimeout(() => {
        setDisplayText(currentPhrase.slice(0, displayText.length + 1));
      }, typingSpeed);
      return () => clearTimeout(timeout);
    }

    if (!isDeleting && displayText.length === currentPhrase.length) {
      const timeout = setTimeout(() => setIsDeleting(true), pauseTime);
      return () => clearTimeout(timeout);
    }

    if (isDeleting && displayText.length > 0) {
      const timeout = setTimeout(() => {
        setDisplayText(displayText.slice(0, -1));
      }, deletingSpeed);
      return () => clearTimeout(timeout);
    }

    if (isDeleting && displayText.length === 0) {
      setIsDeleting(false);
      setCurrentIndex((prev) => (prev + 1) % phrases.length);
    }
  }, [displayText, isDeleting, currentIndex, enabled, phrases, typingSpeed, deletingSpeed, pauseTime]);

  return { displayText, currentIndex, isDeleting } as const;
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/Imprint.tsx">
import { useNavigate } from "react-router-dom";
import { FooterBar } from "@/components/landing/FooterBar";
import { HeaderBar } from "@/components/landing/HeaderBar";

export default function Imprint() {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      {/* Header */}
      <div className="container mx-auto px-4">
        <HeaderBar 
          isVisible={true}
          onSignup={() => navigate('/')}
        />
      </div>

      {/* Content */}
      <main className="container mx-auto px-4 py-12 max-w-4xl">
        <h1 className="text-4xl font-bold mb-8">Impressum</h1>
        
        <div className="prose prose-slate dark:prose-invert max-w-none space-y-6">
          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">Angaben gemäß § 5 TMG</h2>
            <p className="font-semibold">Betreiber der Webseite und verantwortlich für den Inhalt:</p>
            <p>
              Lukas Zangerl<br />
              Stapper Weg 214<br />
              41199 Mönchengladbach<br />
              Deutschland
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">Kontakt</h2>
            <p>
              Telefon: +49 151 26718443<br />
              E-Mail: lukas@zangerlcoachingdynamics.com
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">Vertreten durch</h2>
            <p>
              Lukas Zangerl
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">EU-Streitschlichtung</h2>
            <p>
              Die Europäische Kommission stellt eine Plattform zur Online-Streitbeilegung (OS) bereit: <a href="https://ec.europa.eu/consumers/odr/" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">https://ec.europa.eu/consumers/odr/</a><br />
              Meine E-Mail-Adresse findest du oben im Impressum.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">Verbraucherstreitbeilegung/Universalschlichtungsstelle</h2>
            <p>
              Ich bin nicht bereit oder verpflichtet, an Streitbeilegungsverfahren vor einer Verbraucherschlichtungsstelle teilzunehmen.
            </p>
          </section>
        </div>
      </main>

      <FooterBar />
    </div>
  );
}
</file>

<file path="src/pages/Privacy.tsx">
import { useNavigate } from "react-router-dom";
import { FooterBar } from "@/components/landing/FooterBar";
import { HeaderBar } from "@/components/landing/HeaderBar";

export default function Privacy() {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      {/* Header */}
      <div className="container mx-auto px-4">
        <HeaderBar 
          isVisible={true}
          onSignup={() => navigate('/')}
        />
      </div>

      {/* Content */}
      <main className="container mx-auto px-4 py-12 max-w-4xl">
        <h1 className="text-4xl font-bold mb-8">Datenschutzerklärung</h1>
        
        <div className="prose prose-slate dark:prose-invert max-w-none space-y-6">
          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">1. Datenschutz auf einen Blick</h2>
            <h3 className="text-xl font-semibold mt-6 mb-3">Allgemeine Hinweise</h3>
            <p className="mb-4">
              Die folgenden Hinweise geben einen einfachen Überblick darüber, was mit Ihren personenbezogenen Daten passiert, 
              wenn Sie diese Website besuchen. Personenbezogene Daten sind alle Daten, mit denen Sie persönlich identifiziert 
              werden können.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">2. Verantwortlicher</h2>
            <p className="mb-4">
              Verantwortlich für die Datenverarbeitung auf dieser Website ist:<br />
              <br />
              Social Transformer<br />
              [Ihre Adresse]<br />
              [PLZ Ort]<br />
              <br />
              E-Mail: support@socialtransformer.de
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">3. Datenerfassung auf dieser Website</h2>
            
            <h3 className="text-xl font-semibold mt-6 mb-3">Cookies</h3>
            <p className="mb-4">
              Unsere Internetseiten verwenden so genannte „Cookies". Cookies sind kleine Textdateien und richten auf Ihrem 
              Endgerät keinen Schaden an. Sie werden entweder vorübergehend für die Dauer einer Sitzung (Session-Cookies) 
              oder dauerhaft (permanente Cookies) auf Ihrem Endgerät gespeichert.
            </p>

            <h3 className="text-xl font-semibold mt-6 mb-3">Server-Log-Dateien</h3>
            <p className="mb-4">
              Der Provider der Seiten erhebt und speichert automatisch Informationen in so genannten Server-Log-Dateien, 
              die Ihr Browser automatisch an uns übermittelt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">4. Verwendete Dienste</h2>
            
            <h3 className="text-xl font-semibold mt-6 mb-3">Supabase</h3>
            <p className="mb-4">
              Wir nutzen Supabase für die Authentifizierung und Datenspeicherung. Supabase ist ein Open-Source-Backend-Service, 
              der die sichere Speicherung Ihrer Daten gewährleistet. Die Datenverarbeitung erfolgt auf Grundlage von Art. 6 
              Abs. 1 lit. f DSGVO.
            </p>

            <h3 className="text-xl font-semibold mt-6 mb-3">Stripe</h3>
            <p className="mb-4">
              Für Zahlungen verwenden wir den Zahlungsdienstleister Stripe. Bei einer Zahlung werden Ihre Zahlungsdaten 
              (z.B. Name, E-Mail-Adresse, Kreditkartendaten) an Stripe übermittelt. Diese Datenübermittlung erfolgt gemäß 
              Art. 6 Abs. 1 lit. b DSGVO.
            </p>

            <h3 className="text-xl font-semibold mt-6 mb-3">Claude AI (Anthropic)</h3>
            <p className="mb-4">
              Wir nutzen Claude AI zur Generierung von Social Media Posts. Die von Ihnen eingegebenen Newsletter-Inhalte 
              werden zur Verarbeitung an die Claude AI API übermittelt. Die generierten Inhalte werden ausschließlich für 
              Ihre Nutzung erstellt und nicht von uns gespeichert oder analysiert.
            </p>

            <h3 className="text-xl font-semibold mt-6 mb-3">Vercel</h3>
            <p className="mb-4">
              Diese Website wird auf Vercel gehostet. Vercel kann technische Daten wie IP-Adressen und Browser-Informationen 
              erfassen, um den Service bereitzustellen. Details finden Sie in der Datenschutzerklärung von Vercel.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">5. Ihre Rechte</h2>
            <p className="mb-4">
              Sie haben jederzeit das Recht, unentgeltlich Auskunft über Herkunft, Empfänger und Zweck Ihrer gespeicherten 
              personenbezogenen Daten zu erhalten. Sie haben außerdem ein Recht, die Berichtigung oder Löschung dieser Daten 
              zu verlangen. Hierzu sowie zu weiteren Fragen zum Thema Datenschutz können Sie sich jederzeit an uns wenden.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">6. Widerspruch gegen Werbe-E-Mails</h2>
            <p className="mb-4">
              Der Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten zur Übersendung von nicht 
              ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit widersprochen.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">7. SSL- bzw. TLS-Verschlüsselung</h2>
            <p className="mb-4">
              Diese Seite nutzt aus Sicherheitsgründen und zum Schutz der Übertragung vertraulicher Inhalte eine 
              SSL-bzw. TLS-Verschlüsselung. Eine verschlüsselte Verbindung erkennen Sie daran, dass die Adresszeile 
              des Browsers von „http://" auf „https://" wechselt.
            </p>
          </section>

          <div className="mt-12 pt-8 border-t border-slate-200 dark:border-slate-700">
            <p className="text-sm text-muted-foreground">
              Stand: Januar 2025
            </p>
          </div>
        </div>
      </main>

      <FooterBar />
    </div>
  );
}
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  min-height: 100vh;
}



@layer base {
  :root {
    --background: 210 40% 98%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 262 83% 58%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 217 91% 60%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 262 83% 58%;
    --chart-1: 262 83% 58%;
    --chart-2: 217 91% 60%;
    --chart-3: 142 69% 58%;
    --chart-4: 47 96% 89%;
    --chart-5: 27 87% 67%;
    --radius: 0.75rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}



@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="supabase/config.toml">
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "remixer"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: './seeds/*.sql'
sql_paths = ['./seed.sql']

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"
</file>

<file path="supabase/seed.sql">
-- Align DB schema with app usage (src/api/supabase.ts uses 'saved_posts')

-- Remove old table if it existed
DROP TABLE IF EXISTS saved_tweets;

-- Main table for saved posts
CREATE TABLE IF NOT EXISTS saved_posts (
  id BIGSERIAL PRIMARY KEY,
  user_id UUID NOT NULL DEFAULT auth.uid(),
  content TEXT NOT NULL,
  platform TEXT NOT NULL DEFAULT 'linkedin' CHECK (platform IN ('linkedin','x','instagram')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- RLS: each user can only access own rows
ALTER TABLE saved_posts ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS p_select_saved_posts ON saved_posts;
CREATE POLICY p_select_saved_posts
  ON saved_posts FOR SELECT
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS p_insert_saved_posts ON saved_posts;
CREATE POLICY p_insert_saved_posts
  ON saved_posts FOR INSERT
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS p_update_saved_posts ON saved_posts;
CREATE POLICY p_update_saved_posts
  ON saved_posts FOR UPDATE
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS p_delete_saved_posts ON saved_posts;
CREATE POLICY p_delete_saved_posts
  ON saved_posts FOR DELETE
  USING (auth.uid() = user_id);

-- Helpful indexes
CREATE INDEX IF NOT EXISTS idx_saved_posts_user_id ON saved_posts(user_id);
CREATE INDEX IF NOT EXISTS idx_saved_posts_created_at ON saved_posts(created_at DESC);
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
    darkMode: ["class"],
    content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		}
  	}
  },
  plugins: [
    require('@tailwindcss/typography'),
      require("tailwindcss-animate")
],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    /* Path aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vercel.json">
{
  "rewrites": [
    { "source": "/api/(.*)", "destination": "/api/$1" },
    { "source": "/(.*)", "destination": "/index.html" }
  ]
}
</file>

<file path="vite.config.ts">
import { defineConfig, loadEnv } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vite.dev/config/
export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), '')
  const devApiTarget = env.VITE_DEV_API_TARGET

  return {
    plugins: [react()],
    resolve: {
      alias: {
        '@': path.resolve(__dirname, './src'),
      },
    },
    server: {
      port: 5173,
      proxy: devApiTarget
        ? {
            '/api': {
              target: devApiTarget,
              changeOrigin: true,
              secure: false,
            },
          }
        : undefined,
    },
  }
})
</file>

<file path="src/components/common/Auth.tsx">
import { useState } from 'react'
import { signInWithEmail, signUpWithPassword, signInWithPassword, resetPasswordForEmail } from '@/api/supabase'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { useToast } from '@/hooks/use-toast'
import { Eye, EyeOff, Mail, Lock } from 'lucide-react'

type AuthMode = 'login' | 'register' | 'magic-link'

export function Auth() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [passwordConfirm, setPasswordConfirm] = useState('')
  const [loading, setLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [showPasswordConfirm, setShowPasswordConfirm] = useState(false)
  const [authMode, setAuthMode] = useState<AuthMode>('login')
  const { toast } = useToast()

  const handlePasswordAuth = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!email || !password) return

    // Bei Registrierung Passwörter prüfen
    if (authMode === 'register') {
      if (password.length < 6) {
        toast({
          title: 'Passwort zu kurz',
          description: 'Das Passwort muss mindestens 6 Zeichen lang sein.',
          variant: 'destructive'
        })
        return
      }
      if (password !== passwordConfirm) {
        toast({
          title: 'Passwörter stimmen nicht überein',
          description: 'Bitte stelle sicher, dass beide Passwörter identisch sind.',
          variant: 'destructive'
        })
        return
      }
    }

    setLoading(true)
    try {
      if (authMode === 'register') {
        const { error } = await signUpWithPassword(email, password)
        if (error) throw error
        toast({
          title: 'Registrierung erfolgreich!',
          description: 'Bitte prüfe deine E-Mail zur Bestätigung deines Accounts.'
        })
      } else {
        const { error, data } = await signInWithPassword(email, password)
        if (error) {
          console.error('Login error details:', error)
          throw error
        }
        console.log('Login successful:', data)
        // Erfolgreiche Anmeldung - automatische Weiterleitung durch onAuthStateChange
      }
    } catch (err) {
      toast({
        title: authMode === 'register' ? 'Registrierung fehlgeschlagen' : 'Login fehlgeschlagen',
        description: err instanceof Error ? err.message : String(err),
        variant: 'destructive'
      })
    } finally {
      setLoading(false)
    }
  }

  const handleMagicLink = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!email) return
    
    setLoading(true)
    try {
      const { error } = await signInWithEmail(email)
      if (error) throw error
      toast({
        title: 'Magic Link gesendet',
        description: 'Bitte prüfe deine E-Mail, um dich einzuloggen.'
      })
    } catch (err) {
      toast({
        title: 'Login fehlgeschlagen',
        description: err instanceof Error ? err.message : String(err),
        variant: 'destructive'
      })
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="space-y-4">
      {/* Auth Mode Tabs */}
      <div className="grid grid-cols-3 gap-2 p-1 bg-muted rounded-lg">
        <button
          type="button"
          onClick={() => setAuthMode('login')}
          className={`px-3 py-2 text-sm font-medium rounded-md transition-all ${
            authMode === 'login'
              ? 'bg-background shadow-sm text-foreground'
              : 'text-muted-foreground hover:text-foreground'
          }`}
        >
          Anmelden
        </button>
        <button
          type="button"
          onClick={() => setAuthMode('register')}
          className={`px-3 py-2 text-sm font-medium rounded-md transition-all ${
            authMode === 'register'
              ? 'bg-background shadow-sm text-foreground'
              : 'text-muted-foreground hover:text-foreground'
          }`}
        >
          Registrieren
        </button>
        <button
          type="button"
          onClick={() => setAuthMode('magic-link')}
          className={`px-3 py-2 text-sm font-medium rounded-md transition-all ${
            authMode === 'magic-link'
              ? 'bg-background shadow-sm text-foreground'
              : 'text-muted-foreground hover:text-foreground'
          }`}
        >
          Magic Link
        </button>
      </div>

      {/* Auth Forms */}
      {authMode === 'magic-link' ? (
        <form onSubmit={handleMagicLink} className="space-y-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">E-Mail</label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                type="email"
                placeholder="deine@email.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="pl-10"
                required
              />
            </div>
          </div>
          <Button type="submit" disabled={loading || !email} className="w-full">
            {loading ? 'Sende Link...' : 'Magic Link senden'}
          </Button>
          <p className="text-xs text-center text-muted-foreground">
            Du erhältst einen Login-Link per E-Mail
          </p>
        </form>
      ) : (
        <form onSubmit={handlePasswordAuth} className="space-y-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">E-Mail</label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                type="email"
                placeholder="deine@email.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="pl-10"
                required
              />
            </div>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Passwort</label>
            <div className="relative">
              <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                type={showPassword ? 'text' : 'password'}
                placeholder={authMode === 'register' ? 'Mindestens 6 Zeichen' : 'Dein Passwort'}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="pl-10 pr-10"
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors"
              >
                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </button>
            </div>
          </div>

          {authMode === 'register' && (
            <div className="space-y-2">
              <label className="text-sm font-medium">Passwort bestätigen</label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  type={showPasswordConfirm ? 'text' : 'password'}
                  placeholder="Passwort wiederholen"
                  value={passwordConfirm}
                  onChange={(e) => setPasswordConfirm(e.target.value)}
                  className="pl-10 pr-10"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPasswordConfirm(!showPasswordConfirm)}
                  className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors"
                >
                  {showPasswordConfirm ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>
            </div>
          )}

          <Button 
            type="submit" 
            disabled={loading || !email || !password || (authMode === 'register' && !passwordConfirm)} 
            className="w-full"
          >
            {loading ? (
              authMode === 'register' ? 'Registriere...' : 'Anmelden...'
            ) : (
              authMode === 'register' ? 'Jetzt registrieren' : 'Anmelden'
            )}
          </Button>

          {authMode === 'login' && (
            <p className="text-xs text-center text-muted-foreground">
              <button 
                type="button"
                className="underline hover:text-foreground transition-colors"
                onClick={async () => {
                  if (!email) {
                    toast({
                      title: 'E-Mail erforderlich',
                      description: 'Bitte gib deine E-Mail-Adresse ein, um dein Passwort zurückzusetzen.',
                      variant: 'destructive'
                    })
                    return
                  }
                  try {
                    const { error } = await resetPasswordForEmail(email)
                    if (error) throw error
                    toast({
                      title: 'E-Mail gesendet!',
                      description: 'Prüfe deine E-Mail für den Link zum Zurücksetzen des Passworts.',
                    })
                  } catch (err) {
                    toast({
                      title: 'Fehler',
                      description: err instanceof Error ? err.message : 'Passwort-Reset fehlgeschlagen',
                      variant: 'destructive'
                    })
                  }
                }}
              >
                Passwort vergessen?
              </button>
            </p>
          )}
        </form>
      )}
    </div>
  )
}
</file>

<file path="src/components/common/PaywallGuard.tsx">
import { ReactNode } from "react";
import { useNavigate } from "react-router-dom";
import { useSubscription } from "@/components/common/UpgradeButton";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Lock, Check, Loader2, Sparkles } from "lucide-react";

interface PaywallGuardProps {
  children: ReactNode;
  feature?: string;
}

export function PaywallGuard({ children, feature = 'This feature' }: PaywallGuardProps) {
  const { subscription, loading } = useSubscription();
  const navigate = useNavigate();
  const subscriptionStatus = subscription?.status;

  const handleUpgrade = () => {
    const paymentLink = import.meta.env.VITE_STRIPE_PAYMENT_LINK;
    if (paymentLink) {
      window.open(paymentLink, '_blank');
    } else {
      console.error('Stripe payment link not configured');
    }
  };

  if (loading) {
    return <div className="flex justify-center p-8"><Loader2 className="h-8 w-8 animate-spin" /></div>;
  }

  if (subscriptionStatus !== 'active') {
    return (
      <Card className="max-w-md mx-auto mt-8">
        <CardHeader className="text-center">
          <Lock className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
          <CardTitle>Beta Lifetime Deal - Einmalig 99€</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-center text-muted-foreground">
            {feature} ist ein Pro-Feature. Upgraden Sie jetzt und erhalten Sie lebenslangen Zugang!
          </p>
          <ul className="space-y-2">
            <li className="flex items-center text-sm">
              <Check className="h-4 w-4 text-green-500 mr-2" />
              <span>Unbegrenzte Posts</span>
            </li>
            <li className="flex items-center text-sm">
              <Check className="h-4 w-4 text-green-500 mr-2" />
              <span>Posts speichern & verwalten</span>
            </li>
            <li className="flex items-center text-sm">
              <Check className="h-4 w-4 text-green-500 mr-2" />
              <span>Direct-Posting</span>
            </li>
            <li className="flex items-center text-sm">
              <Check className="h-4 w-4 text-green-500 mr-2" />
              <span>Premium URL-Extraktion</span>
            </li>
            <li className="flex items-center text-sm">
              <Check className="h-4 w-4 text-green-500 mr-2" />
              <span>Alle zukünftigen Features</span>
            </li>
          </ul>
          <div className="flex gap-2">
            <Button variant="outline" onClick={() => navigate('/app')} className="flex-1">
              Zurück
            </Button>
            <Button onClick={handleUpgrade} className="flex-1">
              <Sparkles className="h-4 w-4 mr-2" />
              Jetzt upgraden
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return <>{children}</>;
}
</file>

<file path="src/components/common/PaywallModal.tsx">
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Lock, Check } from "lucide-react";

interface PaywallModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function PaywallModal({ open, onOpenChange }: PaywallModalProps) {
  const handleUpgrade = () => {
    const paymentLink = import.meta.env.VITE_STRIPE_PAYMENT_LINK;
    if (paymentLink) {
      window.open(paymentLink, '_blank');
    } else {
      console.error('Stripe payment link not configured');
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md bg-white dark:bg-gray-900">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-center text-gray-900 dark:text-gray-100">
            Pro-Feature entdeckt! 🚀
          </DialogTitle>
        </DialogHeader>
        <div className="text-center space-y-4">
          <div className="p-4 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-lg">
            <Lock className="w-12 h-12 mx-auto mb-3 text-purple-600 dark:text-purple-400" />
            <p className="font-semibold">Beta Lifetime Deal - nur 99€</p>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Einmalig zahlen, für immer nutzen
            </p>
          </div>
          
          <div className="space-y-2 text-left">
            <p className="font-semibold text-gray-900 dark:text-gray-100">
              Mit Pro erhalten Sie:
            </p>
            <ul className="space-y-1 text-sm text-gray-600 dark:text-gray-400">
              <li className="flex items-center">
                <Check className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" />
                <span>Unbegrenzte Posts generieren</span>
              </li>
              <li className="flex items-center">
                <Check className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" />
                <span>Posts speichern & verwalten</span>
              </li>
              <li className="flex items-center">
                <Check className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" />
                <span>Direct-Posting zu Social Media</span>
              </li>
              <li className="flex items-center">
                <Check className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" />
                <span>Premium URL-Extraktion</span>
              </li>
              <li className="flex items-center">
                <Check className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" />
                <span>Alle zukünftigen Features</span>
              </li>
            </ul>
          </div>

          <div className="flex gap-2 pt-4">
            <Button 
              onClick={() => onOpenChange(false)} 
              variant="outline"
              className="flex-1"
            >
              Später
            </Button>
            <Button 
              onClick={handleUpgrade} 
              className="flex-1 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white"
            >
              Jetzt upgraden
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/components/common/SavedPosts.tsx">
import { useEffect, useState } from 'react'
import { SavedPost, getSavedPosts, deleteSavedPost, updateSavedPost } from '@/api/supabase'
import { SaveButton, EditButton, DeleteButton, LinkedInShareButton, XShareButton, InstagramShareButton } from '@/design-system/components/ActionButtons'
import { Button } from '@/design-system/components/Button'
import {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  AlertDialogAction,
} from '@/components/ui/alert-dialog'

interface SavedPostsProps {
  onCollapse: (collapsed: boolean) => void;
  refreshKey?: number;
  isAuthenticated?: boolean;
  onLoginClick?: () => void;
  initialExpanded?: boolean;
}

export function SavedPosts({ onCollapse, refreshKey, isAuthenticated, onLoginClick, initialExpanded }: SavedPostsProps) {
  const [savedPosts, setSavedPosts] = useState<SavedPost[]>([])
  const [isCollapsed, setIsCollapsed] = useState(!initialExpanded)
  const [editingPost, setEditingPost] = useState<{ id: number, content: string } | null>(null)

  useEffect(() => {
    if (isAuthenticated) {
      loadSavedPosts()
    } else {
      setSavedPosts([])
    }
  }, [refreshKey, isAuthenticated])

  useEffect(() => {
    onCollapse(isCollapsed)
  }, [isCollapsed, onCollapse])

  useEffect(() => {
    if (initialExpanded !== undefined) {
      setIsCollapsed(!initialExpanded)
    }
  }, [initialExpanded])

  const loadSavedPosts = async () => {
    try {
      const posts = await getSavedPosts()
      setSavedPosts(posts)
    } catch (error) {
      console.error('Failed to load saved posts:', error)
    }
  }

  const handleDelete = async (id: number) => {
    try {
      await deleteSavedPost(id)
      setSavedPosts(posts => posts.filter(p => p.id !== id))
    } catch (error) {
      console.error('Failed to delete post:', error)
    }
  }

  const handleEdit = async (id: number, newContent: string) => {
    try {
      await updateSavedPost(id, newContent)
      setSavedPosts(posts => posts.map(p => 
        p.id === id ? { ...p, content: newContent } : p
      ))
      setEditingPost(null)
    } catch (error) {
      console.error('Failed to update post:', error)
    }
  }

  return (
    <>
  {/* Mobile: Bottom drawer */}
  <div className={`md:hidden fixed bottom-0 left-0 right-0 bg-white shadow-lg transition-transform duration-300 z-40 pb-[env(safe-area-inset-bottom)] ${isCollapsed ? 'translate-y-[calc(100%-3rem)]' : 'translate-y-0'}`} style={{ maxHeight: '50vh' }}>
  <div className="flex items-center justify-between p-3 border-b">
          <h2 className="text-lg font-bold text-gray-800">Gespeicherte Beiträge</h2>
          <div className="flex items-center gap-1">
            <button
            onClick={() => setIsCollapsed(!isCollapsed)}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <svg
              className={`w-5 h-5 text-gray-600 transition-transform duration-300 ${isCollapsed ? '' : 'rotate-180'}`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
            </svg>
          </button>
          </div>
        </div>
  <div className="p-4 space-y-4 overflow-y-auto" style={{ maxHeight: 'calc(50vh - 4rem)' }}>
          {!isAuthenticated ? (
            <div className="p-4 rounded-lg border border-gray-200 bg-white text-center space-y-2">
              <p className="text-gray-700 text-sm">Bitte logge dich ein, um gespeicherte Beiträge zu sehen.</p>
              {onLoginClick && (
                <Button onClick={onLoginClick} variant="primary" size="sm">Login</Button>
              )}
            </div>
          ) : savedPosts.length === 0 ? (
            <div className="p-4 rounded-lg border border-gray-200 bg-white text-center">
              <p className="text-gray-700 text-sm">Noch keine gespeicherten Beiträge.</p>
            </div>
          ) : savedPosts.map((post) => (
            <div key={post.id} className="p-3 rounded-lg border border-gray-200 bg-white">
              {editingPost?.id === post.id ? (
                <div className="space-y-2">
                  <textarea
                    value={editingPost.content}
                    onChange={(e) => setEditingPost({ ...editingPost, content: e.target.value })}
                    className="w-full p-2 border border-gray-300 rounded-lg text-sm resize-y"
                    rows={Math.max(8, editingPost.content.split('\n').length + 2)}
                    style={{ minHeight: '150px' }}
                  />
                  <div className="flex justify-end space-x-2">
                    <Button
                      onClick={() => setEditingPost(null)}
                      variant="ghost"
                      size="sm"
                    >
                      Abbrechen
                    </Button>
                    <SaveButton
                      onClick={() => handleEdit(post.id, editingPost.content)}
                      size="sm"
                    />
                  </div>
                </div>
              ) : (
                <>
                  <p className="text-gray-800 whitespace-pre-wrap text-sm">{post.content}</p>
                  <div className="mt-3 flex justify-end">
                    <div className="flex gap-1">
                      <EditButton
                        onClick={() => setEditingPost({ id: post.id, content: post.content })}
                        size="sm"
                        text=""
                        title="Beitrag bearbeiten"
                      />
                      {post.platform === 'x' ? (
                        <XShareButton
                          tweetContent={post.content}
                          size="sm"
                          text=""
                          title="Auf X teilen"
                        />
                      ) : post.platform === 'instagram' ? (
                        <InstagramShareButton
                          postContent={post.content}
                          size="sm"
                          text=""
                          title="Auf Instagram teilen"
                        />
                      ) : (
                        <LinkedInShareButton
                          postContent={post.content}
                          size="sm"
                          text=""
                          title="Auf LinkedIn teilen"
                        />
                      )}
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <div>
                            <DeleteButton
                              size="sm"
                              text=""
                              title="Beitrag löschen"
                            />
                          </div>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>
                              Möchtest du diesen Beitrag wirklich löschen?
                            </AlertDialogTitle>
                            <AlertDialogDescription>
                              Diese Aktion kann nicht rückgängig gemacht werden.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Nein</AlertDialogCancel>
                            <AlertDialogAction
                              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                              onClick={() => handleDelete(post.id)}
                            >
                              Ja
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  </div>
                </>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Desktop: Side panel (full right edge, below header) */}
      <div
        className={`hidden md:block fixed right-0 top-16 h-[calc(100vh-4rem)] bg-white shadow-lg transition-transform duration-300 z-20 ${isCollapsed ? 'translate-x-[calc(100%-3rem)]' : 'translate-x-0'}`}
        style={{ width: '22rem' }}
      >
        <div className="h-full flex flex-col">
          {/* Header with collapse button */}
          <div className="flex items-center h-16 border-b border-gray-200 bg-gray-50/50 sticky top-0 z-10">
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="p-3 hover:bg-gray-100 transition-colors duration-200"
              aria-label={isCollapsed ? "Seitenleiste öffnen" : "Seitenleiste schließen"}
            >
              <svg
                className={`w-5 h-5 text-gray-600 transition-transform duration-300 ${isCollapsed ? 'rotate-180' : ''}`}
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
            <h2 className={`text-lg font-semibold text-gray-800 py-3 transition-opacity duration-300 ${isCollapsed ? 'opacity-0' : 'opacity-100'}`}>
              Gespeicherte Beiträge
            </h2>
          </div>
          
          {/* Content area */}
          <div className="flex-1 overflow-hidden">
            <div className={`p-4 space-y-4 overflow-y-auto h-full transition-opacity duration-300 ${isCollapsed ? 'opacity-0 pointer-events-none' : 'opacity-100'}`}>
          {!isAuthenticated ? (
            <div className="p-4 rounded-lg border border-gray-200 bg-white text-center space-y-2">
              <p className="text-gray-700">Bitte logge dich ein, um gespeicherte Beiträge zu sehen.</p>
              {onLoginClick && (
                <Button onClick={onLoginClick} variant="primary" size="sm">Login</Button>
              )}
            </div>
          ) : savedPosts.length === 0 ? (
            <div className="p-4 rounded-lg border border-gray-200 bg-white text-center">
              <p className="text-gray-700">Noch keine gespeicherten Beiträge.</p>
            </div>
          ) : savedPosts.map((post) => (
            <div key={post.id} className="p-4 rounded-lg border border-gray-200 bg-white">
              {editingPost?.id === post.id ? (
                <div className="space-y-2">
                  <textarea
                    value={editingPost.content}
                    onChange={(e) => setEditingPost({ ...editingPost, content: e.target.value })}
                    className="w-full p-2 border border-gray-300 rounded-lg resize-y"
                    rows={Math.max(10, editingPost.content.split('\n').length + 2)}
                    style={{ minHeight: '200px' }}
                  />
                  <div className="flex justify-end space-x-2">
                    <Button
                      onClick={() => setEditingPost(null)}
                      variant="ghost"
                      size="sm"
                    >
                      Abbrechen
                    </Button>
                    <SaveButton
                      onClick={() => handleEdit(post.id, editingPost.content)}
                      size="sm"
                    />
                  </div>
                </div>
              ) : (
                <>
                  <p className="text-gray-800 whitespace-pre-wrap">{post.content}</p>
                  <div className="mt-4 flex justify-end">
                    <div className="flex gap-2">
                      <EditButton
                        onClick={() => setEditingPost({ id: post.id, content: post.content })}
                        size="sm"
                        text=""
                        title="Beitrag bearbeiten"
                      />
                      {post.platform === 'x' ? (
                        <XShareButton
                          tweetContent={post.content}
                          size="sm"
                          text=""
                          title="Auf X teilen"
                        />
                      ) : post.platform === 'instagram' ? (
                        <InstagramShareButton
                          postContent={post.content}
                          size="sm"
                          text=""
                          title="Auf Instagram teilen"
                        />
                      ) : (
                        <LinkedInShareButton
                          postContent={post.content}
                          size="sm"
                          text=""
                          title="Auf LinkedIn teilen"
                        />
                      )}
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <div>
                            <DeleteButton
                              size="sm"
                              text=""
                              title="Beitrag löschen"
                            />
                          </div>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>
                              Möchtest du diesen Beitrag wirklich löschen?
                            </AlertDialogTitle>
                            <AlertDialogDescription>
                              Diese Aktion kann nicht rückgängig gemacht werden.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Nein</AlertDialogCancel>
                            <AlertDialogAction
                              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                              onClick={() => handleDelete(post.id)}
                            >
                              Ja
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  </div>
                </>
              )}
            </div>
          ))}
            </div>
          </div>
        </div>
      </div>
    </>
  )
}
</file>

<file path="src/components/common/UpgradeButton.tsx">
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useEffect, useState, useRef, ButtonHTMLAttributes, ReactNode } from "react";
import { getSession } from "@/api/supabase";
import { supabase } from "@/api/supabase";
import { cn } from "@/lib/utils";
import { Check, Loader2, Sparkles } from "lucide-react";
import { toast } from "sonner";

interface SubscriptionStatus {
  status: 'free' | 'active' | 'cancelled';
  is_active: boolean;
}

interface UpgradeButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  children?: ReactNode;
  feature?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
  showBadge?: boolean;
}

export function UpgradeButton({
  children,
  feature = 'Pro',
  className,
  variant = 'default',
  size = 'default',
  showBadge = true,
  onClick,
  ...props
}: UpgradeButtonProps) {
  const { subscription, loading } = useSubscription();
  const subscriptionStatus = subscription?.status;

  const handleClick = () => {
    const paymentLink = import.meta.env.VITE_STRIPE_PAYMENT_LINK;
    if (paymentLink) {
      window.open(paymentLink, '_blank');
      // Re-check subscription after a delay
      setTimeout(() => {
        checkSubscription();
      }, 5000);
    } else {
      console.error('Stripe payment link not configured');
      toast.error('Zahlungslink nicht konfiguriert');
    }
    if (onClick) {
      const syntheticEvent = {} as React.MouseEvent<HTMLButtonElement>;
      onClick(syntheticEvent);
    }
  };

  const checkSubscription = () => {
    // This will trigger a re-render when the subscription status changes
    window.location.reload();
  };

  // Show loading state
  if (loading) {
    return (
      <Button 
        variant={variant} 
        size={size} 
        className={cn('relative', className)}
        disabled
        {...props}
      >
        <Loader2 className="h-4 w-4 animate-spin" />
      </Button>
    );
  }

  // User has active subscription - show children or default content
  if (subscriptionStatus === 'active') {
    return children ? (
      <>{children}</>
    ) : (
      <Button 
        variant="outline" 
        size={size} 
        className={cn('relative', className)}
        disabled
        {...props}
      >
        <Check className="h-4 w-4 mr-2" />
        Pro aktiv
      </Button>
    );
  }

  // User needs to upgrade
  return (
    <Button
      variant={variant}
      size={size}
      className={cn('relative', className)}
      onClick={handleClick}
      {...props}
    >
      {showBadge && (
        <Badge className="absolute -top-2 -right-2 px-1.5 py-0.5 text-xs">
          {feature}
        </Badge>
      )}
      <Sparkles className="h-4 w-4 mr-2" />
      Beta Lifetime Deal - nur 99€
    </Button>
  );
}

// Cache for subscription status to avoid redundant queries
let subscriptionCache: { data: SubscriptionStatus | null; timestamp: number } | null = null;
const CACHE_DURATION = 60000; // 1 minute cache

// Hook to use in other components
export function useSubscription() {
  const [subscription, setSubscription] = useState<SubscriptionStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    // Check cache first
    if (subscriptionCache && Date.now() - subscriptionCache.timestamp < CACHE_DURATION) {
      setSubscription(subscriptionCache.data);
      setLoading(false);
      return;
    }

    // Set timeout fallback - increased to 10 seconds
    timeoutRef.current = setTimeout(() => {
      console.warn('Subscription check timed out after 10s, defaulting to free');
      setSubscription({ status: 'free', is_active: false });
      setLoading(false);
    }, 10000); // 10 second timeout

    checkStatus();

    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  const checkStatus = async () => {
    try {
      console.log('[Subscription Check] Starting...');
      const startTime = Date.now();
      
      const { data: { session } } = await getSession();
      console.log('[Subscription Check] Session fetched in', Date.now() - startTime, 'ms');
      
      if (!session?.user) {
        console.log('[Subscription Check] No session found, defaulting to free');
        const freeStatus = { status: 'free' as const, is_active: false };
        setSubscription(freeStatus);
        subscriptionCache = { data: freeStatus, timestamp: Date.now() };
        setLoading(false);
        // Clear timeout since we're done
        if (timeoutRef.current) {
          clearTimeout(timeoutRef.current);
        }
        return;
      }

      console.log('[Subscription Check] User ID:', session.user.id);
      const queryStart = Date.now();
      
      const { data, error } = await supabase
        .from('subscriptions')
        .select('status')
        .eq('user_id', session.user.id)
        .order('created_at', { ascending: false })
        .limit(1)
        .maybeSingle();

      console.log('[Subscription Check] Query completed in', Date.now() - queryStart, 'ms');
      console.log('[Subscription Check] Result:', data, 'Error:', error);

      if (error) {
        console.error('[Subscription Check] Error fetching subscription:', error);
        // Default to free on error
        const freeStatus = { status: 'free' as const, is_active: false };
        setSubscription(freeStatus);
        subscriptionCache = { data: freeStatus, timestamp: Date.now() };
      } else if (data && data.status === 'active') {
        console.log('[Subscription Check] Active subscription found');
        const activeStatus = { status: 'active' as const, is_active: true };
        setSubscription(activeStatus);
        subscriptionCache = { data: activeStatus, timestamp: Date.now() };
      } else {
        console.log('[Subscription Check] No active subscription, defaulting to free');
        const freeStatus = { status: 'free' as const, is_active: false };
        setSubscription(freeStatus);
        subscriptionCache = { data: freeStatus, timestamp: Date.now() };
      }
      
      console.log('[Subscription Check] Total time:', Date.now() - startTime, 'ms');
    } catch (error) {
      console.error('[Subscription Check] Unexpected error:', error);
      const freeStatus = { status: 'free' as const, is_active: false };
      setSubscription(freeStatus);
      subscriptionCache = { data: freeStatus, timestamp: Date.now() };
    } finally {
      setLoading(false);
      // Clear timeout since we're done
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        console.log('[Subscription Check] Timeout cleared');
      }
    }
  };

  return { subscription, loading };
}
</file>

<file path="src/design-system/components/Button/Button.tsx">
import { forwardRef } from 'react'
import { cn } from '@/lib/utils'
import { buttonVariants } from './variants'
import { ButtonProps } from './Button.types'
import { Loader2 } from 'lucide-react'

export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant = 'primary',
      size = 'md',
      isLoading = false,
      leftIcon,
      rightIcon,
      fullWidth = false,
      disabled,
      children,
      ...props
    },
    ref
  ) => {
    const isDisabled = disabled || isLoading

    return (
      <button
        ref={ref}
        className={cn(
          buttonVariants({ variant, size, fullWidth }),
          className
        )}
        disabled={isDisabled}
        {...props}
      >
        {isLoading ? (
          <>
            <Loader2 className="animate-spin" size={size === 'sm' ? 14 : size === 'lg' ? 20 : 16} />
            <span>Loading...</span>
          </>
        ) : (
          <>
            {leftIcon && <span className="inline-flex">{leftIcon}</span>}
            {children}
            {rightIcon && <span className="inline-flex">{rightIcon}</span>}
          </>
        )}
      </button>
    )
  }
)

Button.displayName = 'Button'
</file>

<file path="src/design-system/components/Icons/InstagramLogo.tsx">
import React from 'react'

type InstagramLogoProps = {
  size?: number
  className?: string
}

// Instagram glyph in Lucide-like style: strokes only, no internal fill/background.
export const InstagramLogo: React.FC<InstagramLogoProps> = ({ size = 16, className }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    width={size}
    height={size}
    className={className}
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    aria-hidden="true"
  >
    {/* Outer rounded square (camera body) */}
    <rect x="2" y="2" width="20" height="20" rx="5" />
    {/* Lens */}
    <circle cx="12" cy="12" r="4" />
    {/* Flash dot */}
    <circle cx="17.5" cy="6.5" r="1" />
  </svg>
)

export default InstagramLogo
</file>

<file path="src/design-system/tokens/colors.ts">
export const colors = {
  // Primary colors - angepasst an aktuelles Theme (Violett)
  primary: {
    DEFAULT: 'hsl(262 83% 58%)', // Hauptfarbe aus CSS-Variablen
    hover: 'hsl(262 83% 52%)',
    active: 'hsl(262 83% 46%)',
    light: 'hsl(262 83% 68%)',
    dark: 'hsl(262 83% 40%)',
    foreground: 'hsl(210 40% 98%)',
  },
  
  // Accent colors - angepasst an aktuelles Theme (Blau)
  accent: {
    DEFAULT: 'hsl(217 91% 60%)', // Akzentfarbe aus CSS-Variablen
    hover: 'hsl(217 91% 54%)',
    active: 'hsl(217 91% 48%)',
    light: 'hsl(217 91% 70%)',
    dark: 'hsl(217 91% 42%)',
    foreground: 'hsl(210 40% 98%)',
  },
  
  // Claude AI brand color - bestehend aus ContentFlowGraphic
  claude: {
    DEFAULT: '#D97757', // Claude AI Markenfarbe
    hover: '#C56649',
    active: '#B15A3F',
    light: '#E88A6A',
    dark: '#A84A35',
  },
  
  // LinkedIn brand color
  linkedin: {
    DEFAULT: '#0A66C2', // LinkedIn Blau
    hover: '#084E99',
    active: '#063A70',
    light: '#3B82E6',
    dark: '#042847',
  },
  
  // Secondary colors - angepasst an shadcn/ui
  secondary: {
    DEFAULT: 'hsl(210 40% 96%)', // Sekundäre Hintergrundfarbe
    hover: 'hsl(210 40% 92%)',
    active: 'hsl(210 40% 88%)',
    foreground: 'hsl(222.2 84% 4.9%)',
  },
  
  // Muted colors - für weniger wichtige Elemente
  muted: {
    DEFAULT: 'hsl(210 40% 96%)',
    foreground: 'hsl(215.4 16.3% 46.9%)',
  },
  
  // Destructive colors
  destructive: {
    DEFAULT: 'hsl(0 84.2% 60.2%)', // Rot für Lösch-Aktionen
    hover: 'hsl(0 84.2% 54%)',
    active: 'hsl(0 84.2% 48%)',
    light: 'hsl(0 84.2% 70%)',
    dark: 'hsl(0 62.8% 30.6%)',
    foreground: 'hsl(0 0% 98%)',
  },
  
  // Base colors - angepasst an CSS-Variablen
  background: {
    DEFAULT: 'hsl(210 40% 98%)', // Haupthintergrund
    secondary: 'hsl(210 40% 96%)', // Sekundärer Hintergrund
    tertiary: 'hsl(210 40% 94%)', // Tertiärer Hintergrund
  },
  
  foreground: {
    DEFAULT: 'hsl(222.2 84% 4.9%)', // Haupttext
    muted: 'hsl(215.4 16.3% 46.9%)', // Gedämpfter Text
  },
  
  // Border colors
  border: {
    DEFAULT: 'hsl(214.3 31.8% 91.4%)',
    light: 'hsl(214.3 31.8% 95%)',
    dark: 'hsl(214.3 31.8% 85%)',
  },
  
  // Card colors
  card: {
    DEFAULT: 'hsl(0 0% 100%)',
    foreground: 'hsl(222.2 84% 4.9%)',
  },
  
  // Dark mode support
  dark: {
    background: 'hsl(0 0% 3.9%)',
    foreground: 'hsl(0 0% 98%)',
    card: 'hsl(0 0% 3.9%)',
    border: 'hsl(0 0% 14.9%)',
    muted: 'hsl(0 0% 14.9%)',
    'muted-foreground': 'hsl(0 0% 63.9%)',
  },
} as const

export type Colors = typeof colors
</file>

<file path="src/design-system/tokens/spacing.ts">
export const spacing = {
  // Base spacing scale - erweitert für bessere Flexibilität
  px: '1px',
  0: '0',
  0.5: '0.125rem',  // 2px
  1: '0.25rem',     // 4px
  1.5: '0.375rem',  // 6px
  2: '0.5rem',      // 8px
  2.5: '0.625rem',  // 10px
  3: '0.75rem',     // 12px
  3.5: '0.875rem',  // 14px
  4: '1rem',        // 16px
  5: '1.25rem',     // 20px
  6: '1.5rem',      // 24px
  7: '1.75rem',     // 28px
  8: '2rem',        // 32px
  9: '2.25rem',     // 36px
  10: '2.5rem',     // 40px
  11: '2.75rem',    // 44px
  12: '3rem',       // 48px
  14: '3.5rem',     // 56px
  16: '4rem',       // 64px
  20: '5rem',       // 80px
  24: '6rem',       // 96px
  28: '7rem',       // 112px
  32: '8rem',       // 128px
  36: '9rem',       // 144px
  40: '10rem',      // 160px
  44: '11rem',      // 176px
  48: '12rem',      // 192px
  52: '13rem',      // 208px
  56: '14rem',      // 224px
  60: '15rem',      // 240px
  64: '16rem',      // 256px
  72: '18rem',      // 288px
  80: '20rem',      // 320px
  96: '24rem',      // 384px
  
  // Component-specific spacing - angepasst an shadcn/ui
  button: {
    paddingX: {
      sm: '0.75rem',   // 12px
      md: '1rem',      // 16px
      lg: '1.5rem',    // 24px
      xl: '2rem',      // 32px
    },
    paddingY: {
      sm: '0.375rem',  // 6px
      md: '0.5rem',    // 8px
      lg: '0.625rem',  // 10px
      xl: '0.75rem',   // 12px
    },
    gap: '0.5rem',     // 8px - space between icon and text
  },
  
  // Card spacing
  card: {
    padding: {
      sm: '1rem',      // 16px
      md: '1.5rem',    // 24px
      lg: '2rem',      // 32px
      xl: '3rem',      // 48px
    },
    gap: '1rem',       // 16px - space between card elements
  },
  
  // Section spacing für Landing Page
  section: {
    paddingY: {
      sm: '3rem',      // 48px
      md: '5rem',      // 80px
      lg: '6rem',      // 96px
      xl: '8rem',      // 128px
    },
    gap: '2rem',       // 32px - space between sections
  },
  
  // Border radius - angepasst an CSS-Variable --radius
  borderRadius: {
    none: '0',
    sm: 'calc(var(--radius) - 4px)',    // ca. 8px
    DEFAULT: 'calc(var(--radius) - 2px)', // ca. 10px  
    md: 'var(--radius)',                 // 12px (0.75rem)
    lg: 'calc(var(--radius) + 2px)',    // ca. 14px
    xl: 'calc(var(--radius) + 4px)',    // ca. 16px
    '2xl': 'calc(var(--radius) + 8px)', // ca. 20px
    '3xl': 'calc(var(--radius) + 12px)', // ca. 24px
    full: '9999px',
  },
} as const

export type Spacing = typeof spacing
</file>

<file path="src/design-system/tokens/typography.ts">
export const typography = {
  // Font families - angepasst an aktuelles System
  fontFamily: {
    sans: [
      'Inter', 
      'ui-sans-serif', 
      'system-ui', 
      '-apple-system', 
      'BlinkMacSystemFont',
      '"Segoe UI"', 
      'Roboto', 
      '"Helvetica Neue"',
      'Arial', 
      'sans-serif'
    ],
    mono: [
      'JetBrains Mono', 
      '"Fira Code"',
      'Consolas',
      '"Courier New"',
      'ui-monospace', 
      'monospace'
    ],
  },
  
  // Font sizes - erweitert für bessere Hierarchie
  fontSize: {
    xs: '0.75rem',      // 12px
    sm: '0.875rem',     // 14px
    base: '1rem',       // 16px
    lg: '1.125rem',     // 18px
    xl: '1.25rem',      // 20px
    '2xl': '1.5rem',    // 24px
    '3xl': '1.875rem',  // 30px
    '4xl': '2.25rem',   // 36px
    '5xl': '3rem',      // 48px
    '6xl': '3.75rem',   // 60px
    '7xl': '4.5rem',    // 72px
    '8xl': '6rem',      // 96px
    '9xl': '8rem',      // 128px
  },
  
  // Font weights - erweitert
  fontWeight: {
    thin: '100',
    extralight: '200',
    light: '300',
    normal: '400',
    medium: '500',
    semibold: '600',
    bold: '700',
    extrabold: '800',
    black: '900',
  },
  
  // Line heights - angepasst an moderne Standards
  lineHeight: {
    none: '1',
    tight: '1.25',      // Für Headlines
    snug: '1.375',      // Für Subheadlines
    normal: '1.5',      // Standard für Body Text
    relaxed: '1.625',   // Für längere Texte
    loose: '2',         // Für sehr lockere Texte
    3: '0.75rem',       // 12px
    4: '1rem',          // 16px
    5: '1.25rem',       // 20px
    6: '1.5rem',        // 24px
    7: '1.75rem',       // 28px
    8: '2rem',          // 32px
    9: '2.25rem',       // 36px
    10: '2.5rem',       // 40px
  },
  
  // Letter spacing - erweitert
  letterSpacing: {
    tighter: '-0.05em',
    tight: '-0.025em',
    normal: '0',
    wide: '0.025em',
    wider: '0.05em',
    widest: '0.1em',
  },
  
  // Text decoration
  textDecoration: {
    none: 'none',
    underline: 'underline',
    'line-through': 'line-through',
  },
  
  // Text transform
  textTransform: {
    none: 'none',
    capitalize: 'capitalize',
    uppercase: 'uppercase',
    lowercase: 'lowercase',
  },
} as const

export type Typography = typeof typography
</file>

<file path="src/hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: actionTypes.REMOVE_TOAST,
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case actionTypes.ADD_TOAST:
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case actionTypes.UPDATE_TOAST:
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case actionTypes.DISMISS_TOAST: {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case actionTypes.REMOVE_TOAST:
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: actionTypes.UPDATE_TOAST,
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id })

  dispatch({
    type: actionTypes.ADD_TOAST,
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/hooks/useUsageTracking.ts">
import { useCallback } from 'react';
import { useSubscription } from '@/components/common/UpgradeButton';

const STORAGE_KEY = 'usage';
const DAILY_LIMIT = 2;

export function useUsageTracking() {
  const { subscription } = useSubscription();
  
  const getTodayUsage = (): number => {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (!stored) return 0;
    
    const { date, count } = JSON.parse(stored);
    const today = new Date().toDateString();
    
    return date === today ? count : 0;
  };

  const canTransform = useCallback(() => {
    if (subscription?.is_active) return true;
    return getTodayUsage() < DAILY_LIMIT;
  }, [subscription]);

  const incrementUsage = useCallback(() => {
    if (subscription?.is_active) return;
    
    const today = new Date().toDateString();
    const currentCount = getTodayUsage();
    
    localStorage.setItem(STORAGE_KEY, JSON.stringify({
      date: today,
      count: currentCount + 1
    }));
  }, [subscription]);

  const getRemainingCount = useCallback(() => {
    if (subscription?.is_active) return -1;
    return DAILY_LIMIT - getTodayUsage();
  }, [subscription]);

  return {
    canTransform,
    incrementUsage,
    getRemainingCount,
    isPro: subscription?.is_active || false
  };
}
</file>

<file path="src/pages/Terms.tsx">
import { useNavigate } from "react-router-dom";
import { FooterBar } from "@/components/landing/FooterBar";
import { HeaderBar } from "@/components/landing/HeaderBar";

export default function Terms() {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      {/* Header */}
      <div className="container mx-auto px-4">
        <HeaderBar 
          isVisible={true}
          onSignup={() => navigate('/')}
        />
      </div>

      {/* Content */}
      <main className="container mx-auto px-4 py-12 max-w-4xl">
        <h1 className="text-4xl font-bold mb-8">Allgemeine Geschäftsbedingungen (AGB)</h1>
        
        <div className="prose prose-slate dark:prose-invert max-w-none space-y-6">
          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 1 Geltungsbereich</h2>
            <p className="mb-4">
              (1) Diese Allgemeinen Geschäftsbedingungen (nachfolgend "AGB") gelten für alle Verträge zwischen 
              Social Transformer (nachfolgend "Anbieter") und dem Kunden über die Nutzung der Social Transformer 
              Plattform und zugehörigen Dienstleistungen.
            </p>
            <p className="mb-4">
              (2) Abweichende, entgegenstehende oder ergänzende AGB des Kunden werden nur dann und insoweit 
              Vertragsbestandteil, als der Anbieter ihrer Geltung ausdrücklich zugestimmt hat.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 2 Vertragsgegenstand</h2>
            <p className="mb-4">
              (1) Der Anbieter stellt dem Kunden eine webbasierte Software-as-a-Service (SaaS) Lösung zur 
              Verfügung, die es ermöglicht, Newsletter und Blog-Inhalte in Social Media Posts für verschiedene 
              Plattformen umzuwandeln.
            </p>
            <p className="mb-4">
              (2) Der genaue Funktionsumfang ergibt sich aus der aktuellen Leistungsbeschreibung auf der Website.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 3 Vertragsschluss</h2>
            <p className="mb-4">
              (1) Die Darstellung der Produkte auf unserer Website stellt kein rechtlich bindendes Angebot, 
              sondern eine Aufforderung zur Bestellung dar.
            </p>
            <p className="mb-4">
              (2) Durch die Registrierung und Auswahl eines Tarifs gibt der Kunde ein verbindliches Angebot 
              zum Abschluss eines Nutzungsvertrags ab.
            </p>
            <p className="mb-4">
              (3) Der Vertrag kommt durch die Annahme des Angebots durch den Anbieter zustande, welche durch 
              die Freischaltung des Zugangs erfolgt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 4 Preise und Zahlungsbedingungen</h2>
            <p className="mb-4">
              (1) Es gelten die zum Zeitpunkt der Bestellung auf der Website angegebenen Preise. Alle Preise 
              verstehen sich inklusive der gesetzlichen Mehrwertsteuer.
            </p>
            <p className="mb-4">
              (2) Die Zahlung erfolgt über den Zahlungsdienstleister Stripe. Der Kunde ermächtigt den Anbieter, 
              die fälligen Beträge über Stripe einzuziehen.
            </p>
            <p className="mb-4">
              (3) Bei Zahlungsverzug ist der Anbieter berechtigt, den Zugang zur Plattform zu sperren.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 5 Lifetime Deal</h2>
            <p className="mb-4">
              (1) Der "Lifetime Deal" gewährt dem Kunden gegen eine einmalige Zahlung von 99 € ein zeitlich 
              unbegrenztes Nutzungsrecht an der Plattform.
            </p>
            <p className="mb-4">
              (2) Das Lifetime Deal gilt ausschließlich für die zum Zeitpunkt des Kaufs verfügbaren Funktionen. 
              Zukünftige Premium-Features können zusätzliche Kosten verursachen.
            </p>
            <p className="mb-4">
              (3) Das Lifetime Deal ist nicht übertragbar und gilt nur für den ursprünglichen Käufer.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 6 Nutzungsrechte</h2>
            <p className="mb-4">
              (1) Der Kunde erhält ein nicht ausschließliches, nicht übertragbares Nutzungsrecht an der 
              Software für die Dauer des Vertragsverhältnisses.
            </p>
            <p className="mb-4">
              (2) Eine Weitergabe der Zugangsdaten an Dritte ist untersagt.
            </p>
            <p className="mb-4">
              (3) Der Kunde ist verpflichtet, die Plattform nur für rechtmäßige Zwecke zu nutzen.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 7 Verfügbarkeit</h2>
            <p className="mb-4">
              (1) Der Anbieter bemüht sich um eine möglichst unterbrechungsfreie Verfügbarkeit der Plattform. 
              Eine Verfügbarkeit von 100% wird jedoch nicht garantiert.
            </p>
            <p className="mb-4">
              (2) Wartungsarbeiten werden, soweit möglich, im Voraus angekündigt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 8 Haftung</h2>
            <p className="mb-4">
              (1) Der Anbieter haftet unbeschränkt für Vorsatz und grobe Fahrlässigkeit sowie nach Maßgabe 
              des Produkthaftungsgesetzes.
            </p>
            <p className="mb-4">
              (2) Bei leichter Fahrlässigkeit haftet der Anbieter nur bei Verletzung wesentlicher Vertragspflichten 
              und begrenzt auf den vertragstypischen, vorhersehbaren Schaden.
            </p>
            <p className="mb-4">
              (3) Die Haftung für Datenverlust ist auf den typischen Wiederherstellungsaufwand beschränkt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 9 Datenschutz</h2>
            <p className="mb-4">
              (1) Die Verarbeitung personenbezogener Daten erfolgt gemäß unserer Datenschutzerklärung.
            </p>
            <p className="mb-4">
              (2) Der Kunde verpflichtet sich, nur solche Inhalte zu verarbeiten, für die er die erforderlichen 
              Rechte besitzt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 10 Vertragslaufzeit und Kündigung</h2>
            <p className="mb-4">
              (1) Der Vertrag läuft auf unbestimmte Zeit.
            </p>
            <p className="mb-4">
              (2) Monatliche Abonnements können mit einer Frist von 14 Tagen zum Monatsende gekündigt werden.
            </p>
            <p className="mb-4">
              (3) Das Recht zur außerordentlichen Kündigung aus wichtigem Grund bleibt unberührt.
            </p>
            <p className="mb-4">
              (4) Lifetime Deals sind von der ordentlichen Kündigung ausgeschlossen, können aber aus wichtigem 
              Grund gekündigt werden.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 11 Widerrufsrecht</h2>
            <p className="mb-4">
              (1) Verbrauchern steht ein Widerrufsrecht nach Maßgabe der gesetzlichen Bestimmungen zu.
            </p>
            <p className="mb-4">
              (2) Das Widerrufsrecht beträgt 14 Tage ab Vertragsschluss.
            </p>
            <p className="mb-4">
              (3) Bei digitalen Inhalten erlischt das Widerrufsrecht, wenn der Kunde der sofortigen 
              Vertragsausführung zugestimmt hat.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 12 Änderungen der AGB</h2>
            <p className="mb-4">
              (1) Der Anbieter behält sich vor, diese AGB jederzeit zu ändern.
            </p>
            <p className="mb-4">
              (2) Änderungen werden dem Kunden mindestens 30 Tage vor Inkrafttreten per E-Mail mitgeteilt.
            </p>
            <p className="mb-4">
              (3) Widerspricht der Kunde den Änderungen nicht innerhalb von 30 Tagen, gelten diese als akzeptiert.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 13 Schlussbestimmungen</h2>
            <p className="mb-4">
              (1) Es gilt das Recht der Bundesrepublik Deutschland unter Ausschluss des UN-Kaufrechts.
            </p>
            <p className="mb-4">
              (2) Gerichtsstand für alle Streitigkeiten aus diesem Vertrag ist, soweit gesetzlich zulässig, 
              der Sitz des Anbieters.
            </p>
            <p className="mb-4">
              (3) Sollten einzelne Bestimmungen unwirksam sein, bleibt die Wirksamkeit der übrigen Bestimmungen 
              unberührt.
            </p>
          </section>

          <div className="mt-12 pt-8 border-t border-slate-200 dark:border-slate-700">
            <p className="text-sm text-muted-foreground">
              Stand: Januar 2025<br />
              Version 1.0
            </p>
          </div>
        </div>
      </main>

      <FooterBar />
    </div>
  );
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import './styles/animations.css'
import App from './App.tsx'
import { BrowserRouter } from 'react-router-dom'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>,
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🔄</text></svg>" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Social Transformer - Newsletter zu Social Media Posts</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="src/components/graphics/HowItWorks.tsx">
import React from 'react';
import HowItWorksGraphic from './HowItWorksGraphic';
import { Badge } from '@/components/ui/badge';

const HowItWorks: React.FC = () => {
  const steps = [
    {
      number: 1,
      title: "URL einfügen",
      description: "Füge eine URL ein oder kopiere deinen Text direkt ins Eingabefeld"
    },
    {
      number: 2,
      title: "Content extrahiert",
      description: "Automatische Erkennung und Extraktion deines Inhalts"
    },
    {
      number: 3,
      title: "Plattform wählen",
      description: "LinkedIn, X oder Instagram - optimiert für jede Plattform"
    },
    {
      number: 4,
      title: "Posts generieren & anpassen",
      description: "Claude AI erstellt mehrere Posts - bearbeite und speichere deine Favoriten"
    },
    {
      number: 5,
      title: "Direkt posten",
      description: "Mit einem Klick auf allen Plattformen veröffentlichen"
    }
  ];

  return (
    <section id="how-it-works" className="py-16 md:py-24 relative overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-br from-slate-50 via-white to-slate-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900" />
      <div className="relative z-10 max-w-6xl mx-auto px-4">
        <div className="text-center mb-12 md:mb-16">
          <Badge variant="outline" className="px-3 py-1 text-sm font-medium rounded-full border-primary/30 bg-primary/5 text-primary mb-4 md:mb-6">
            Workflow
          </Badge>
          <h2 className="text-3xl md:text-5xl font-bold leading-tight tracking-tight mb-4 md:mb-6">
            So einfach geht's
          </h2>
          <p className="text-lg md:text-xl leading-relaxed text-muted-foreground max-w-2xl mx-auto">
            Von Newsletter zu Social Media in{" "}
            <span className="font-semibold text-primary">30 Sekunden</span>
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 md:gap-12 items-center">
          {/* Mobile: Graphic first, Desktop: Steps first */}
          <div className="order-2 lg:order-1 space-y-5 md:space-y-6">
            {steps.map((step) => (
              <div key={step.number} className="flex gap-4 md:gap-6 group">
                <div className="flex-shrink-0 w-10 h-10 md:w-12 md:h-12 bg-gradient-to-br from-primary to-accent text-white rounded-full flex items-center justify-center font-bold text-sm md:text-lg shadow-lg group-hover:scale-110 transition-transform duration-300">
                  {step.number}
                </div>
                <div className="flex-1">
                  <h3 className="text-lg md:text-xl font-semibold leading-snug mb-2 md:mb-3">
                    {step.title}
                  </h3>
                  <p className="text-sm md:text-base leading-relaxed text-muted-foreground">
                    {step.description}
                  </p>
                </div>
              </div>
            ))}
          </div>

          {/* Right side - Visual graphic */}
          <div className="order-1 lg:order-2 relative">
            <HowItWorksGraphic />
          </div>
        </div>
      </div>
    </section>
  );
};

export default HowItWorks;
</file>

<file path="src/components/landing/CTASection.tsx">
import { Button } from "@/components/ui/button";

export function CTASection() {
  return (
    <section className="py-12 sm:py-16 md:py-24 relative overflow-hidden bg-gradient-to-br from-primary/5 via-accent/5 to-primary/5">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[400px] sm:w-[600px] md:w-[800px] h-[400px] sm:h-[600px] md:h-[800px] bg-gradient-to-r from-primary/10 to-accent/10 rounded-full blur-3xl animate-pulse" />
      </div>
      
      <div className="relative z-10 max-w-4xl mx-auto px-4 text-center">
        <h2 className="text-2xl sm:text-3xl md:text-5xl font-bold mb-3 sm:mb-4 md:mb-6">
          Bereit, deine Social-Media-Reichweite zu{" "}
          <span className="bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
            vervielfachen
          </span>
          ?
        </h2>
        
        <p className="text-base sm:text-lg md:text-xl text-muted-foreground mb-6 sm:mb-8 md:mb-10 max-w-2xl mx-auto">
          Während andere noch kopieren und anpassen, transformierst du bereits deinen nächsten Newsletter in viralen Social-Media-Content.
        </p>
        
        <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-6 sm:mb-8">
          <Button 
            size="lg"
            className="w-full sm:w-auto bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-semibold shadow-lg shadow-primary/20 hover:shadow-xl hover:scale-105 transition-all duration-300 px-6 sm:px-8 py-5 sm:py-6 text-sm sm:text-base md:text-lg"
            onClick={() => window.location.href = '/signup'}
          >
            Starte jetzt kostenlos →
          </Button>
          
          <Button 
            size="lg"
            variant="outline"
            className="w-full sm:w-auto font-semibold hover:scale-105 transition-all duration-300 px-6 sm:px-8 py-5 sm:py-6 text-sm sm:text-base md:text-lg"
            onClick={() => window.open('https://buy.stripe.com/9B628qejY6rtfPi8Fl0x200', '_blank')}
          >
            Direkt Lifetime sichern
          </Button>
        </div>
        
        <div className="flex flex-wrap justify-center gap-4 md:gap-6 text-sm text-muted-foreground">
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            <span>Keine Kreditkarte nötig</span>
          </div>
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            <span>Sofort startklar</span>
          </div>
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            <span>14 Tage Geld-zurück</span>
          </div>
        </div>
        
        <div className="mt-12 pt-8 border-t border-slate-200 dark:border-slate-700">
          <p className="text-sm text-muted-foreground mb-4">
            Schon über <span className="font-semibold text-foreground">100+ Content Creator</span> nutzen Social Transformer
          </p>
          <div className="flex justify-center items-center gap-2">
            {[...Array(5)].map((_, i) => (
              <svg key={i} className="w-5 h-5 text-yellow-500 fill-current" viewBox="0 0 24 24">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
            ))}
            <span className="ml-2 text-sm font-medium">4.9/5 Bewertung</span>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/landing/HeaderBar.tsx">
import { Button } from "@/components/ui/button";
import { Logo } from "@/components/Logo";

type HeaderBarProps = {
  isVisible: boolean;
  onSignup: () => void;
};

export function HeaderBar({ isVisible, onSignup }: HeaderBarProps) {
  return (
    <header className={`flex justify-between items-center py-6 transition-all duration-500 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 -translate-y-4'}`}>
      <Logo 
        className="w-8 h-8 sm:w-10 sm:h-10 shadow-lg rounded-xl" 
        showText={true} 
        textClassName="font-bold text-lg sm:text-2xl tracking-tight"
      />
      <Button 
        variant="outline" 
        className="border-primary/30 hover:border-primary/60 transition-all duration-300"
        onClick={onSignup}
      >
        Anmelden
      </Button>
    </header>
  );
}
</file>

<file path="src/design-system/components/ActionButtons/index.ts">
export { SaveButton } from './SaveButton'
export { EditButton } from './EditButton'
export { DeleteButton } from './DeleteButton'
export { LinkedInShareButton } from './LinkedInShareButton'
export { XShareButton } from './XShareButton'
export { InstagramShareButton } from './InstagramShareButton'
</file>

<file path="src/design-system/components/Button/Button.types.ts">
import { ButtonHTMLAttributes, ReactNode } from 'react'

export type ButtonVariant = 'primary' | 'secondary' | 'linkedin' | 'x' | 'instagram' | 'destructive' | 'ghost' | 'outline'
export type ButtonSize = 'sm' | 'md' | 'lg'

export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant
  size?: ButtonSize
  isLoading?: boolean
  leftIcon?: ReactNode
  rightIcon?: ReactNode
  fullWidth?: boolean
  children: ReactNode
}
</file>

<file path="src/design-system/components/Button/variants.ts">
import { cva } from 'class-variance-authority'

export const buttonVariants = cva(
  // Base styles
  'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed active:scale-95',
  {
    variants: {
      variant: {
        primary: 'bg-purple-600 text-white hover:bg-purple-700 focus:ring-purple-500',
        secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
        linkedin: 'bg-[#0077B5] text-white hover:bg-[#006097] focus:ring-[#0077B5]',
        x: 'bg-black text-white hover:bg-black/90 focus:ring-black',
        instagram: 'bg-[#e706ab] text-white hover:bg-[#d005a0] focus:ring-[#e706ab]',
        destructive: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
        ghost: 'bg-transparent hover:bg-gray-100 text-gray-700 focus:ring-gray-500',
        outline: 'border-2 border-gray-300 bg-transparent hover:bg-gray-50 text-gray-700 focus:ring-gray-500',
      },
      size: {
        sm: 'px-3 py-1.5 text-sm rounded-md gap-1.5',
        md: 'px-4 py-2 text-base rounded-md gap-2',
        lg: 'px-6 py-2.5 text-lg rounded-lg gap-2.5',
      },
      fullWidth: {
        true: 'w-full',
        false: 'w-auto',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
      fullWidth: false,
    },
  }
)

export type ButtonVariantsProps = Parameters<typeof buttonVariants>[0]
</file>

<file path=".env.example">
# Environment variables for linkedin-posts (Vite)
# Copy this file to `.env` in the same folder and fill in your values.
# Only variables prefixed with VITE_ are exposed to the client by Vite.

# --- Claude (Anthropic) ---
# API key (server-side) from https://console.anthropic.com/
# Used by Edge Function under /api/claude/v1/messages
CLAUDE_API_KEY=""
# Optional: override Claude base URL (proxy) for the frontend SDK
# Default points to your deployed /api/claude proxy
VITE_CLAUDE_BASE=""
# (Legacy) If you previously put the key in client env, leave empty. The app uses server key above.
VITE_CLAUDE_API_KEY=""

# --- Supabase ---
# Project URL and anon key from Supabase project settings (Public)
VITE_SUPABASE_URL=""
VITE_SUPABASE_ANON_KEY=""
# Public site URL used for Supabase auth email redirects.
# Add this URL to Supabase Auth → URL Configuration → Redirect URLs.
# Examples:
#  - http://localhost:5173
#  - https://your-production-domain.tld
# Preferred:
VITE_SITE_URL=""
# Alternatively supported (fallback):
VITE_APP_URL=""
# Service role key for backend/webhooks only (Keep secret! Only for Vercel env)
SUPABASE_SERVICE_ROLE_KEY=""

# --- Stripe ---
# Payment Link URL from Stripe Dashboard
VITE_STRIPE_PAYMENT_LINK="https://buy.stripe.com/your-payment-link-id"
# Webhook secret from Stripe Dashboard > Webhooks (starts with whsec_)
STRIPE_WEBHOOK_SECRET=""
# Optional: Customer billing portal URL (Stripe hosted)
VITE_STRIPE_BILLING_PORTAL=""


# --- LinkedIn (optional) ---
# Use these to enable creating Draft posts via the LinkedIn REST API.
# If not provided, the app falls back to the LinkedIn share dialog.
# Access Token must include w_member_social permissions.
VITE_LINKEDIN_ACCESS_TOKEN=""
# URN format examples:
#  - Person: urn:li:person:YOUR_PERSON_ID
#  - Organization: urn:li:organization:YOUR_ORG_ID
VITE_LINKEDIN_AUTHOR_URN=""

# --- Dev API Proxy (local dev) ---
# If set, Vite will proxy `/api/*` to this target while running `npm run dev`.
# Example: https://your-app.vercel.app
VITE_DEV_API_TARGET=""

# --- Firecrawl (Premium Extraction) ---
# API key from https://www.firecrawl.dev/
# Required for premium content extraction (JavaScript rendering, PDFs)
FIRECRAWL_API_KEY=""

# --- File Extraction (Managed Providers) ---
# Unstructured Hosted API (documents/images with OCR)
# Docs: https://docs.unstructured.io
UNSTRUCTURED_API_KEY=""
# Optional custom base URL if self-hosted/region-specific
UNSTRUCTURED_API_URL="https://api.unstructured.io"

# Deepgram (audio speech-to-text)
# Docs: https://developers.deepgram.com
DEEPGRAM_API_KEY=""
</file>

<file path=".gitignore">
# Dependencies
node_modules
.pnp
.pnp.js

# Testing
coverage

# Production
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# TypeScript
*.tsbuildinfo

# Screenshots
screenshots/

# Tools
.serena
.claude

# Supabase
supabase/.branches
supabase/.temp
</file>

<file path="src/api/supabase.ts">
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

export interface SavedPost {
  id: number
  content: string
  created_at: string
  user_id?: string | null
  platform?: 'linkedin' | 'x' | 'instagram'
}

export const savePost = async (content: string, platform: 'linkedin' | 'x' | 'instagram' = 'linkedin') => {
  console.log('Saving post to Supabase:', { content, platform })
  
  // Insert with implicit user_id via DEFAULT auth.uid()
  const { data, error } = await supabase
    .from('saved_posts')
    .insert([{ content, platform }])
    .select()
  
  if (error) {
    console.error('Supabase save error:', error)
    throw new Error(`Supabase error: ${error.message}`)
  }
  
  console.log('Post saved successfully:', data)
  return data[0]
}

export const getSavedPosts = async () => {
  const { data, error } = await supabase
    .from('saved_posts')
    .select('*')
    .order('created_at', { ascending: false })
  
  if (error) throw error
  return data as SavedPost[]
}

export const deleteSavedPost = async (id: number) => {
  const { error } = await supabase
    .from('saved_posts')
    .delete()
    .eq('id', id)
  
  if (error) throw error
}

export const updateSavedPost = async (id: number, content: string) => {
  const { error } = await supabase
    .from('saved_posts')
    .update({ content })
    .eq('id', id)
  
  if (error) throw error
} 

// Auth helpers
const getRedirectUrl = () => {
  // Prefer explicit site URL from env for reliable email redirects
  const envSiteUrl = (import.meta.env.VITE_SITE_URL || import.meta.env.VITE_APP_URL) as string | undefined
  if (envSiteUrl && envSiteUrl.length > 0) return envSiteUrl.replace(/\/$/, '')

  // Fallback to current origin (useful in local dev)
  if (typeof window !== 'undefined' && window.location?.origin) {
    return window.location.origin
  }
  // Last resort: production URL (ensure this matches Supabase Allowed Redirect URLs)
  return 'https://linkedin-posts-ashen.vercel.app'
}

// Magic Link (OTP) Login
export const signInWithEmail = (email: string) => {
  return supabase.auth.signInWithOtp({ 
    email, 
    options: { emailRedirectTo: getRedirectUrl() } 
  });
}

// Password-based Sign Up
export const signUpWithPassword = (email: string, password: string) => {
  return supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: getRedirectUrl()
    }
  });
}

// Password-based Sign In
export const signInWithPassword = (email: string, password: string) => {
  return supabase.auth.signInWithPassword({
    email,
    password
  });
}

// Password Reset
export const resetPasswordForEmail = (email: string) => {
  return supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${getRedirectUrl()}/reset-password`
  });
}

// Update Password (after reset)
export const updatePassword = (newPassword: string) => {
  return supabase.auth.updateUser({ password: newPassword });
}

export const signOut = () => supabase.auth.signOut()

export const getSession = () => supabase.auth.getSession()

export const onAuthStateChange = (callback: Parameters<typeof supabase.auth.onAuthStateChange>[0]) =>
  supabase.auth.onAuthStateChange(callback)
</file>

<file path="src/pages/SignUp.tsx">
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Auth } from "@/components/common/Auth";
import { getSession, onAuthStateChange } from "@/api/supabase";
import { HeaderBar } from "@/components/landing/HeaderBar";

export default function SignUp() {
  const navigate = useNavigate();
  const [checking, setChecking] = useState(true);

  useEffect(() => {
    // Auto-redirect if already logged in
    getSession().then(({ data }) => {
      if (data.session) navigate("/app", { replace: true });
      else setChecking(false);
    });
    const { data: sub } = onAuthStateChange((_event, session) => {
      if (session) navigate("/app", { replace: true });
    });
    return () => sub?.subscription?.unsubscribe?.();
  }, [navigate]);

  if (checking) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 overflow-hidden relative">
      {/* Decorative elements */}
      <div className="absolute inset-0 overflow-hidden z-0">
        <div className="absolute -left-40 -top-40 w-80 h-80 rounded-full bg-primary/10 blur-3xl" />
        <div className="absolute right-0 top-1/4 w-96 h-96 rounded-full bg-accent/10 blur-3xl" />
        <div className="absolute left-1/3 bottom-0 w-80 h-80 rounded-full bg-secondary/10 blur-3xl" />
      </div>

      <div className="relative z-10 container mx-auto px-4 py-8 flex flex-col min-h-screen">
        {/* Header */}
        <HeaderBar isVisible={!checking} onSignup={() => {}} />

        {/* Main content */}
        <main className="flex-grow flex flex-col items-center justify-center py-12">
          <div className="max-w-md w-full mx-auto">
            <Card className="bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border-0 shadow-xl overflow-hidden relative">
              <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-accent/5 z-0" />
              <CardHeader className="relative z-10">
                <CardTitle className="text-2xl">Willkommen bei Social Transformer</CardTitle>
                <CardDescription>
                  Melde dich an oder registriere dich, um deine Newsletter in Social Media Content zu verwandeln.
                </CardDescription>
              </CardHeader>
              <CardContent className="relative z-10">
                <Auth />
                <p className="text-xs text-muted-foreground mt-4">
                  Mit der Registrierung stimmst du zu, dass wir deine E-Mail zur Anmeldung verwenden.
                </p>
            </CardContent>
            </Card>
          </div>
        </main>

        {/* Footer */}
        <footer className="py-6 text-center text-sm text-muted-foreground border-t border-slate-200 dark:border-slate-800 mt-12">
          <p>© 2025 Social Transformer • Newsletter zu Social Media Posts</p>
        </footer>
      </div>
    </div>
  );
}
</file>

<file path="README.md">
# Social Transformer

Transform newsletters and blog posts into platform-optimized social media content using AI.

## Features

- 🤖 **AI-Powered Transformation** - Uses Claude AI to intelligently transform long-form content
- 📱 **Multi-Platform Support** - Generate posts for LinkedIn, X (Twitter), and Instagram
- 💾 **Save & Manage Posts** - Store your generated posts for later use
- 🚀 **Direct Sharing** - Share directly to social platforms or save as drafts
- 💰 **Monetization Ready** - Integrated Stripe payments with Beta Lifetime Deal (€49)
- 🔒 **Usage Limits** - Free users get 2 transformations/day, Pro users get unlimited

## Tech Stack

- **Frontend**: React 18 + TypeScript + Vite
- **Styling**: TailwindCSS + shadcn/ui components
- **Backend**: Vercel Edge Functions
- **Database**: Supabase (PostgreSQL)
- **AI**: Anthropic Claude API
- **Payments**: Stripe (webhooks + payment links)
- **Auth**: Supabase Auth

## Setup

### Prerequisites

- Node.js 18+
- Supabase account
- Stripe account (for payments)
- Anthropic API key (for Claude)

### Installation

1. **Clone and install dependencies:**
```bash
git clone https://github.com/your-username/linkedin-posts.git
cd linkedin-posts
npm install
```

2. **Set up environment variables:**
```bash
cp .env.example .env
```

3. **Configure `.env` file:**

#### Client-side variables (VITE_ prefix):
- `VITE_SUPABASE_URL` — Your Supabase project URL
- `VITE_SUPABASE_ANON_KEY` — Supabase anon key (public)
- `VITE_STRIPE_PAYMENT_LINK` — Stripe payment link URL

#### Server-side variables (for Vercel deployment):
- `CLAUDE_API_KEY` — Anthropic Claude API key
- `SUPABASE_URL` — Same as VITE_SUPABASE_URL (without prefix)
- `SUPABASE_SERVICE_ROLE_KEY` — Supabase service role key (secret)
- `STRIPE_WEBHOOK_SECRET` — Stripe webhook signing secret

#### Optional:
- `VITE_LINKEDIN_ACCESS_TOKEN` — LinkedIn API token with `w_member_social` scope
- `VITE_LINKEDIN_AUTHOR_URN` — LinkedIn author URN (e.g., `urn:li:person:XXX`)

4. **Set up Supabase database:**

Run the migrations in `/supabase/migrations/` in your Supabase SQL editor.

5. **Start development server:**
```bash
npm run dev
```

## Stripe Setup

### Test Mode (Development)

1. **Create Test Payment Link:**
   - Go to Stripe Dashboard → Switch to TEST mode
   - Create product: "Beta Lifetime Deal" - €49 one-time
   - Create payment link with email collection enabled
   - Add to `.env`: `VITE_STRIPE_PAYMENT_LINK`

2. **Configure Webhook:**
   - Go to Developers → Webhooks → Add endpoint
   - URL: `https://your-domain.vercel.app/api/stripe-webhook`
   - Events: `payment_intent.succeeded`, `checkout.session.completed`
   - Copy signing secret to `STRIPE_WEBHOOK_SECRET`

3. **Test with card:** `4242 4242 4242 4242`

### Production Mode

Replace test credentials with live ones when ready to accept real payments.

## Deployment

### Vercel Deployment

1. **Push to GitHub**

2. **Import to Vercel:**
   - Connect GitHub repository
   - Configure environment variables (all from `.env` plus server-side ones)

3. **Environment Variables in Vercel:**
   - All `VITE_*` variables from `.env`
   - `CLAUDE_API_KEY` (server-side)
   - `SUPABASE_URL` (without VITE_ prefix)
   - `SUPABASE_SERVICE_ROLE_KEY`
   - `STRIPE_WEBHOOK_SECRET`

## Usage

### For Users

1. **Free Tier:** 2 transformations per day
2. **Pro Tier:** €49 lifetime access, unlimited transformations
3. **Workflow:**
   - Paste newsletter/blog content
   - Select target platforms (LinkedIn, X, Instagram)
   - Click "Transform"
   - Edit, save, or share generated posts

### API Routes

- `/api/claude/v1/messages` - Claude AI proxy endpoint
- `/api/stripe-webhook` - Stripe payment webhook handler

## Commands

```bash
npm run dev        # Start development server
npm run build      # Build for production
npm run preview    # Preview production build
npm run lint       # Run ESLint
```

### LinkedIn Stil-Beispiele (optional)

Du kannst Beispiele von LinkedIn-Posts, deren Stil dir gefällt, in `src/config/linkedin-style-examples.md` einfügen. Diese werden automatisch in die Prompting-Logik für die LinkedIn-Generierung eingespeist und dienen als Stil-Referenz (Ton, Hook, Satzlänge, Struktur). Die strikten Formatregeln im Prompt bleiben unverändert.

Tipps:
- 3–8 kurze Beispiele sind ideal.
- Trenne Beispiele mit `---` für bessere Lesbarkeit.
- Vermeide unnötige Emojis/Hashtags, wenn du sie nicht im Output möchtest.

## License

Private repository - All rights reserved
</file>

<file path="api/stripe-webhook.ts">
import { createClient } from '@supabase/supabase-js';

export const config = {
  runtime: 'edge',
};

// Initialize Supabase with service role key (for bypassing RLS)
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// Verify webhook signature from Stripe using Web Crypto API
async function verifyStripeSignature(
  body: string,
  signature: string,
  secret: string
): Promise<boolean> {
  const elements = signature.split(',');
  const timestamp = elements.find(e => e.startsWith('t='))?.slice(2);
  const signatures = elements
    .filter(e => e.startsWith('v1='))
    .map(e => e.slice(3));

  if (!timestamp || !signatures.length) {
    return false;
  }

  // Create the signed payload string
  const signedPayload = `${timestamp}.${body}`;
  
  // Use Web Crypto API to create HMAC
  const encoder = new TextEncoder();
  const key = await crypto.subtle.importKey(
    'raw',
    encoder.encode(secret),
    { name: 'HMAC', hash: 'SHA-256' },
    false,
    ['sign']
  );
  
  const signatureBuffer = await crypto.subtle.sign(
    'HMAC',
    key,
    encoder.encode(signedPayload)
  );
  
  // Convert to hex string
  const expectedSignature = Array.from(new Uint8Array(signatureBuffer))
    .map(b => b.toString(16).padStart(2, '0'))
    .join('');

  // Check if any of the signatures match
  return signatures.some(sig => sig === expectedSignature);
}

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 });
  }

  try {
    // Get raw body for signature verification
    const body = await req.text();
    const signature = req.headers.get('stripe-signature');
    
    if (!signature) {
      console.error('No Stripe signature found');
      return new Response('No signature', { status: 401 });
    }

    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    if (!webhookSecret) {
      console.error('STRIPE_WEBHOOK_SECRET not configured');
      return new Response('Server configuration error', { status: 500 });
    }

    // Verify the webhook signature
    const isValid = await verifyStripeSignature(body, signature, webhookSecret);
    if (!isValid) {
      console.error('Invalid Stripe signature');
      return new Response('Invalid signature', { status: 401 });
    }

    // Parse the webhook payload
    const event = JSON.parse(body);
    console.log('Stripe Event:', event.type);

    // Handle different event types
    switch (event.type) {
      case 'payment_intent.succeeded': {
        // Payment successful - activate subscription
        const paymentIntent = event.data.object;
        const userEmail = paymentIntent.receipt_email || paymentIntent.charges?.data?.[0]?.billing_details?.email;
        const userId = paymentIntent.metadata?.user_id || paymentIntent.client_reference_id;
        
        console.log('Processing payment for:', { userEmail, userId });

        // Try to find user by ID first, then by email
        let user: { id: string; email?: string } | null = null;
        
        if (userId) {
          // Get user by ID
          const { data: userData, error } = await supabase.auth.admin.getUserById(userId);
          if (!error && userData?.user) {
            user = { id: userData.user.id, email: userData.user.email };
          }
        }
        
        if (!user && userEmail) {
          // Fall back to email lookup
          const { data: userData, error } = await supabase.auth.admin.listUsers();
          if (!error && userData?.users) {
            user = userData.users.find(u => u.email === userEmail) || null;
          }
        }
        
        if (user) {
          console.log('Found user:', user.id);
          
          // Create or update subscription record
          // First check if subscription exists
          const { data: existingSub } = await supabase
            .from('subscriptions')
            .select('id')
            .eq('user_id', user.id)
            .single();

          let error;
          if (existingSub) {
            // Update existing subscription
            const { error: updateError } = await supabase
              .from('subscriptions')
              .update({
                stripe_customer_id: paymentIntent.customer || null,
                stripe_payment_intent_id: paymentIntent.id,
                status: 'active',
                updated_at: new Date().toISOString()
              })
              .eq('user_id', user.id);
            error = updateError;
          } else {
            // Create new subscription
            const { error: insertError } = await supabase
              .from('subscriptions')
              .insert({
                user_id: user.id,
                stripe_customer_id: paymentIntent.customer || null,
                stripe_payment_intent_id: paymentIntent.id,
                payment_provider: 'stripe',
                status: 'active',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              });
            error = insertError;
          }

          if (error) {
            console.error('Error updating subscription:', error);
            return new Response('Database error', { status: 500 });
          }

          console.log('Subscription activated for user:', user.id);
        } else {
          console.log('User not found for payment_intent event - likely handled by checkout.session.completed');
          // Return 200 to acknowledge receipt - checkout.session.completed will handle the subscription
        }
        break;
      }

      case 'checkout.session.completed': {
        // Alternative event for Stripe Checkout
        const session = event.data.object;
        const userEmail = session.customer_email;
        const userId = session.client_reference_id;
        
        console.log('Checkout completed for:', { userEmail, userId });

        // Similar logic as payment_intent.succeeded
        let user: { id: string; email?: string } | null = null;
        
        if (userId) {
          const { data: userData, error } = await supabase.auth.admin.getUserById(userId);
          if (!error && userData?.user) {
            user = { id: userData.user.id, email: userData.user.email };
          }
        }
        
        if (!user && userEmail) {
          const { data: userData, error } = await supabase.auth.admin.listUsers();
          if (!error && userData?.users) {
            user = userData.users.find(u => u.email === userEmail) || null;
          }
        }
        
        if (user) {
          console.log('Found user:', user.id);
          
          // First check if subscription exists
          const { data: existingSub } = await supabase
            .from('subscriptions')
            .select('id')
            .eq('user_id', user.id)
            .single();

          let error;
          if (existingSub) {
            // Update existing subscription
            const { error: updateError } = await supabase
              .from('subscriptions')
              .update({
                stripe_customer_id: session.customer || null,
                stripe_payment_intent_id: session.payment_intent || null,
                status: 'active',
                updated_at: new Date().toISOString()
              })
              .eq('user_id', user.id);
            error = updateError;
          } else {
            // Create new subscription
            const { error: insertError } = await supabase
              .from('subscriptions')
              .insert({
                user_id: user.id,
                stripe_customer_id: session.customer || null,
                stripe_payment_intent_id: session.payment_intent || null,
                payment_provider: 'stripe',
                status: 'active',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              });
            error = insertError;
          }

          if (error) {
            console.error('Error updating subscription:', error);
            return new Response('Database error', { status: 500 });
          }

          console.log('Subscription activated for user:', user.id);
        }
        break;
      }

      case 'customer.subscription.created':
      case 'customer.subscription.updated': {
        // For future subscription-based pricing
        console.log('Subscription event received but not processed (lifetime deal only)');
        break;
      }

      default:
        console.log(`Unhandled event type: ${event.type}`);
    }

    return new Response('Webhook processed', { status: 200 });
  } catch (error) {
    console.error('Webhook error:', error);
    return new Response('Webhook processing failed', { status: 500 });
  }
}
</file>

<file path="src/components/landing/FooterBar.tsx">
import { Button } from "@/components/ui/button";
import { Logo } from "@/components/Logo";
import { useNavigate } from "react-router-dom";

export function FooterBar() {
  const navigate = useNavigate();
  
  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  const navigateToTop = (path: string) => {
    navigate(path);
    // Nach Navigation zum Seitenanfang scrollen
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 100);
  };

  return (
    <footer className="relative py-12 sm:py-16 md:py-20 bg-slate-50 dark:bg-slate-900 border-t border-slate-200 dark:border-slate-700">
      <div className="relative max-w-6xl mx-auto px-4 z-10">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 sm:gap-8 mb-8 sm:mb-12">
          {/* Brand Column */}
          <div className="sm:col-span-2 md:col-span-2 space-y-4">
            <Logo 
              className="w-8 h-8 sm:w-10 sm:h-10 shadow-md rounded-xl" 
              showText={true} 
              textClassName="text-lg sm:text-xl font-bold"
            />
            <p className="text-sm text-muted-foreground max-w-md">
              Verwandle Newsletter in virale Social-Media-Posts mit präzise optimierten 
              Claude AI Prompts. Entwickelt und getestet mit Anthropic Console für 
              maximale Qualität und Konsistenz.
            </p>
            <div className="flex gap-3">
              <Button
                size="sm"
                className="bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white relative z-20"
                onClick={() => navigate('/signup')}
              >
                Jetzt starten →
              </Button>
              <Button
                size="sm"
                variant="outline"
                className="relative z-20"
                onClick={() => window.open(import.meta.env.VITE_STRIPE_PAYMENT_LINK, '_blank')}
              >
                Lifetime Deal
              </Button>
            </div>
          </div>

          {/* Product Column */}
          <div className="space-y-3">
            <h4 className="font-semibold text-sm uppercase tracking-wider text-muted-foreground">Produkt</h4>
            <ul className="space-y-2">
              <li>
                <button 
                  onClick={() => navigate('/app')}
                  className="text-sm hover:text-primary transition-colors text-left block w-full cursor-pointer relative z-20"
                >
                  Generator ausprobieren
                </button>
              </li>
              <li>
                <button 
                  onClick={() => scrollToSection('pricing')}
                  className="text-sm hover:text-primary transition-colors text-left block w-full cursor-pointer relative z-20"
                >
                  Preise
                </button>
              </li>
              <li>
                <button 
                  onClick={() => scrollToSection('features')}
                  className="text-sm hover:text-primary transition-colors text-left block w-full cursor-pointer relative z-20"
                >
                  Features
                </button>
              </li>
              <li>
                <button 
                  onClick={() => scrollToSection('how-it-works')}
                  className="text-sm hover:text-primary transition-colors text-left block w-full cursor-pointer relative z-20"
                >
                  So funktioniert's
                </button>
              </li>
            </ul>
          </div>

          {/* Support Column */}
          <div className="space-y-3">
            <h4 className="font-semibold text-sm uppercase tracking-wider text-muted-foreground">Support</h4>
            <ul className="space-y-2">
              <li>
                <a href="mailto:lukas@zangerlcoachingdynamics.com" className="text-sm hover:text-primary transition-colors relative z-20 inline-block">
                  Kontakt
                </a>
              </li>
              <li>
                <button 
                  onClick={() => navigateToTop('/privacy')}
                  className="text-sm hover:text-primary transition-colors text-left block w-full cursor-pointer relative z-20"
                >
                  Datenschutz
                </button>
              </li>
              <li>
                <button 
                  onClick={() => navigateToTop('/terms')}
                  className="text-sm hover:text-primary transition-colors text-left block w-full cursor-pointer relative z-20"
                >
                  AGB
                </button>
              </li>
              <li>
                <button 
                  onClick={() => navigateToTop('/imprint')}
                  className="text-sm hover:text-primary transition-colors text-left block w-full cursor-pointer relative z-20"
                >
                  Impressum
                </button>
              </li>
            </ul>
          </div>
        </div>

        {/* Trust Badges */}
        <div className="border-t border-slate-200 dark:border-slate-700 pt-8 mb-8">
          <div className="flex flex-wrap justify-center items-center gap-6 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              <span>SSL verschlüsselt</span>
            </div>
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
              </svg>
              <span>Sichere Zahlung via Stripe</span>
            </div>
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              <span>4.9/5 Bewertung</span>
            </div>
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
              </svg>
              <span>14 Tage Geld-zurück</span>
            </div>
          </div>
        </div>

        {/* Bottom Bar */}
        <div className="text-center space-y-2">
          <p className="text-sm text-muted-foreground">
            © 2025 Social Transformer • Made with ❤️ in Germany
          </p>
          <p className="text-xs text-muted-foreground">
            Powered by Claude AI • Content-Extraktion mit Jina & Firecrawl • Newsletter zu Social Media in Sekunden
          </p>
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="package.json">
{
  "name": "content-remixer",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --port 5173",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.33.1",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@supabase/supabase-js": "^2.47.12",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.534.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.8.2",
    "sonner": "^2.0.7",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}
</file>

<file path="src/components/landing/FeaturesGrid.tsx">
import { Card, CardContent } from "@/components/ui/card";
import { 
  Link2, 
  Share2, 
  Save, 
  Edit3, 
  Send,
  Zap
} from "lucide-react";

type FeaturesGridProps = {
  isVisible: boolean;
  variant?: "desktop" | "mobile";
};

export function FeaturesGrid({ isVisible, variant = "desktop" }: FeaturesGridProps) {
  const containerClass = variant === "desktop"
    ? `grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 transition-all duration-700 delay-200 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`
    : `grid grid-cols-1 sm:grid-cols-2 lg:hidden gap-4 transition-all duration-700 delay-200 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`;

  return (
    <div className={containerClass}>
      <Card className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md border-0 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
        <CardContent className="pt-6 pb-6">
          <div className="rounded-full bg-primary/10 w-10 h-10 flex items-center justify-center mb-4">
            <Link2 className="h-5 w-5 text-primary" />
          </div>
          <h3 className="text-lg font-semibold leading-snug mb-3">Paste & Go</h3>
          <p className="text-sm leading-normal text-muted-foreground">
            URL oder Text einfügen. Fertig.
          </p>
        </CardContent>
      </Card>

      <Card className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md border-0 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
        <CardContent className="pt-6 pb-6">
          <div className="rounded-full bg-gradient-to-br from-primary/10 to-accent/10 w-10 h-10 flex items-center justify-center mb-4">
            <Zap className="h-5 w-5 text-primary" />
          </div>
          <h3 className="text-lg font-semibold leading-snug mb-3">Premium-Scraping</h3>
          <p className="text-sm leading-normal text-muted-foreground">
            Unbegrenzt. Sicher und zuverlässig.
          </p>
        </CardContent>
      </Card>

      <Card className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md border-0 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
        <CardContent className="pt-6 pb-6">
          <div className="rounded-full bg-primary/10 w-10 h-10 flex items-center justify-center mb-4">
            <Share2 className="h-5 w-5 text-primary" />
          </div>
          <h3 className="text-lg font-semibold leading-snug mb-3">3 Plattformen</h3>
          <p className="text-sm leading-normal text-muted-foreground">
            LinkedIn, X, Instagram. Ein Klick.
          </p>
        </CardContent>
      </Card>

      <Card className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md border-0 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
        <CardContent className="pt-6 pb-6">
          <div className="rounded-full bg-primary/10 w-10 h-10 flex items-center justify-center mb-4">
            <Save className="h-5 w-5 text-primary" />
          </div>
          <h3 className="text-lg font-semibold leading-snug mb-3">Posts speichern</h3>
          <p className="text-sm leading-normal text-muted-foreground">
            Editieren. Später verwenden.
          </p>
        </CardContent>
      </Card>

      <Card className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md border-0 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
        <CardContent className="pt-6 pb-6">
          <div className="rounded-full bg-primary/10 w-10 h-10 flex items-center justify-center mb-4">
            <Edit3 className="h-5 w-5 text-primary" />
          </div>
          <h3 className="text-lg font-semibold leading-snug mb-3">Post-Editor</h3>
          <p className="text-sm leading-normal text-muted-foreground">
            Manuell anpassen. Perfektionieren.
          </p>
        </CardContent>
      </Card>

      <Card className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md border-0 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
        <CardContent className="pt-6 pb-6">
          <div className="rounded-full bg-gradient-to-br from-primary/10 to-accent/10 w-10 h-10 flex items-center justify-center mb-4">
            <Send className="h-5 w-5 text-primary" />
          </div>
          <h3 className="text-lg font-semibold leading-snug mb-3">Direct-Posting</h3>
          <p className="text-sm leading-normal text-muted-foreground">
            Direkt auf LinkedIn, X & Co. posten.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/landing/HeroSection.tsx">
import { useMemo } from "react";
import { Button } from "@/components/ui/button";
import { useTypewriter } from "@/hooks/useTypewriter";

type HeroSectionProps = {
  isVisible: boolean;
  onSignup: () => void;
};

export function HeroSection({ isVisible, onSignup }: HeroSectionProps) {
  const phrases = useMemo(() => ([
    { text: "LinkedIn Post", color: "text-[#0a66c2]" },
    { text: "Twitter Thread", color: "text-black dark:text-white" },
    { text: "Instagram Story", color: "text-[#e706ab]" }
  ]), []);

  const { displayText, currentIndex } = useTypewriter(phrases.map(p => p.text), { enabled: true });

  return (
    <div className={`space-y-6 md:space-y-8 transition-all duration-700 delay-100 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
      <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold leading-tight tracking-tight">
        <span className="text-foreground">Mach aus jedem Newsletter einen</span>
        <br />
        <span className={`${phrases[currentIndex].color} transition-colors duration-300`}>
          {displayText}
          <span className="animate-pulse">|</span>
        </span>
      </h1>
      <p className="text-base sm:text-lg md:text-xl leading-relaxed text-muted-foreground max-w-2xl">
        <span className="font-semibold">15 Minuten sparen pro Post.</span> Kopiere deinen Newsletter rein oder gib eine URL ein, 
        erhalte perfekt formatierte Social-Media-Beiträge raus. 
      </p>
      <div className="flex flex-col sm:flex-row gap-4 pt-4 md:pt-8">
        <Button 
          size="lg" 
          className="w-full sm:w-auto bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-semibold shadow-lg shadow-primary/20 hover:shadow-xl hover:scale-105 transition-all duration-300 px-6 py-5 text-sm sm:text-base" 
          onClick={onSignup}
        >
          Kostenlos testen →
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="api/extract.ts">
// Serverless function: Extract main article content from a URL using Jina Reader
// Simple, robust, and free content extraction

export const config = {
  runtime: 'edge', // Now using Edge runtime since no Node dependencies needed
  regions: ['fra1'], // Frankfurt for low latency in Europe
};

type ExtractResponse = {
  title?: string;
  byline?: string | null;
  excerpt?: string | null;
  content: string; // plain text/markdown
  length?: number;
  siteName?: string | null;
};

// Simple function to truncate content at common footer markers
function truncateContent(content: string): string {
  // End markers that usually indicate footer/archive sections
  const endMarkers = [
    // English - Newsletter specific
    'read past issues',
    'newsletter archive',
    'browse our archive',
    'subscribe',
    'unsubscribe',
    'view in browser',
    'forward to a friend',
    'forward to friend',
    'update preferences',
    'manage preferences',
    'email preferences',
    'update your preferences',
    'update subscription',
    'manage subscription',
    'why am i getting this',
    'you are receiving this',
    'sent to you because',
    'mailing list',
    
    // English - Blog specific
    'related posts',
    'you might also like',
    'you may also like',
    'see also',
    'continue reading',
    'read more posts',
    'more articles',
    'similar articles',
    'related articles',
    'recommended for you',
    'more from',
    
    // German - Newsletter specific
    'abmelden',
    'abbestellen',
    'newsletter abbestellen',
    'im browser ansehen',
    'im browser anzeigen',
    'an einen freund weiterleiten',
    'weiterleiten',
    'einstellungen verwalten',
    'einstellungen ändern',
    'präferenzen verwalten',
    'e-mail-einstellungen',
    'mehr anzeigen',
    
    // German - Blog specific
    'weitere artikel',
    'ähnliche beiträge',
    'verwandte artikel',
    'mehr lesen',
    'weiterlesen',
    'das könnte sie auch interessieren',
    'das könnte dich auch interessieren',
    'siehe auch',
    'empfohlene artikel',
    'mehr aus',
    'verwandte beiträge',
    
    // Common footer markers (multilingual)
    '©',
    'copyright',
    'impressum',
    'datenschutz',
    'privacy policy',
    'terms of service',
    'contact us',
    'kontakt',
    'about us',
    'über uns',
  ];
  
  // Search from 20% of content (newsletter archives can appear early)
  const searchStart = Math.floor(content.length * 0.2);
  const lowerContent = content.toLowerCase();
  
  for (const marker of endMarkers) {
    const index = lowerContent.indexOf(marker, searchStart);
    if (index !== -1) {
      return content.slice(0, index).trim();
    }
  }
  
  return content;
}

export default async function handler(req: Request) {
  const cors = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
  };

  // Handle preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: cors });
  }

  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ error: 'Method not allowed' }), {
      status: 405,
      headers: { ...cors, 'Content-Type': 'application/json' },
    });
  }

  try {
    const { url } = (await req.json()) as { url?: string };
    
    if (!url || typeof url !== 'string') {
      return new Response(JSON.stringify({ error: 'Missing url parameter' }), {
        status: 400,
        headers: { ...cors, 'Content-Type': 'application/json' },
      });
    }

    // Basic URL validation
    try {
      const u = new URL(url);
      if (!/^https?:$/.test(u.protocol)) {
        throw new Error('Invalid protocol');
      }
    } catch {
      return new Response(JSON.stringify({ error: 'Invalid URL format' }), {
        status: 400,
        headers: { ...cors, 'Content-Type': 'application/json' },
      });
    }

    // Use Jina Reader for content extraction
    const jinaUrl = `https://r.jina.ai/${encodeURIComponent(url)}`;
    
    console.log('Fetching content from:', url);
    
    // Create an AbortController for timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
    
    try {
      const response = await fetch(jinaUrl, {
        headers: {
          'Accept': 'text/markdown, text/plain',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          // Use Jina's x-remove-selector to remove common non-content elements
          'x-remove-selector': 'nav,header,footer,.newsletter,.subscribe,.archive,.sidebar,.social',
          'x-respond-with': 'markdown',
        },
        signal: controller.signal,
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        console.error(`Jina Reader returned status: ${response.status}`);
        throw new Error(`Content extraction failed with status: ${response.status}`);
      }
      
      let content = await response.text();
      
      // Basic content validation
      if (!content || content.trim().length < 100) {
        return new Response(
          JSON.stringify({ error: 'Could not extract meaningful content from the URL' }),
          { status: 422, headers: { ...cors, 'Content-Type': 'application/json' } }
        );
      }
      
      // Apply truncation to remove footer/archive sections
      content = truncateContent(content);
      
      // Extract title from first markdown heading if present
      const titleMatch = content.match(/^#\s+(.+?)$/m);
      const title = titleMatch ? titleMatch[1].trim() : undefined;
      
      // Extract site name from URL
      const urlObj = new URL(url);
      const siteName = urlObj.hostname.replace(/^www\./, '');
      
      // Clean up content - remove excessive line breaks
      const cleanContent = content.replace(/\n{3,}/g, '\n\n').trim();
      
      const payload: ExtractResponse = {
        title,
        byline: null, // Jina doesn't typically provide byline
        excerpt: null, // Could extract from first paragraph if needed
        content: cleanContent,
        length: cleanContent.length,
        siteName,
      };
      
      return new Response(JSON.stringify(payload), {
        status: 200,
        headers: { ...cors, 'Content-Type': 'application/json' },
      });
      
    } catch (fetchError) {
      if (fetchError instanceof Error && fetchError.name === 'AbortError') {
        console.error('Request timeout after 30 seconds');
        return new Response(
          JSON.stringify({ error: 'Request timed out. The page took too long to load.' }),
          { status: 504, headers: { ...cors, 'Content-Type': 'application/json' } }
        );
      }
      throw fetchError;
    }
    
  } catch (error) {
    console.error('Extract error:', error);
    
    // Return user-friendly error message
    const errorMessage = error instanceof Error ? error.message : 'Failed to extract content';
    const statusCode = 500;
    
    return new Response(
      JSON.stringify({ 
        error: errorMessage,
        details: 'Unable to extract content from this URL. Please ensure the URL is accessible and contains readable content.'
      }),
      { 
        status: statusCode, 
        headers: { ...cors, 'Content-Type': 'application/json' } 
      }
    );
  }
}
</file>

<file path="src/components/landing/PricingSection.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Check, X, Sparkles, Clock, Shield, ChevronDown, ChevronUp, Zap, TrendingUp, Users } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useSubscription } from "@/components/common/UpgradeButton";

export function PricingSection() {
  const navigate = useNavigate();
  const { subscription } = useSubscription();
  const subscriptionStatus = subscription?.status;
  const [expandedFaq, setExpandedFaq] = useState<number | null>(null);

  const handleGetStarted = () => {
    if (subscriptionStatus === 'active') {
      navigate('/app');
    } else {
      navigate('/signup');
    }
  };

  const handleBuyLifetimeDeal = () => {
    const paymentLink = import.meta.env.VITE_STRIPE_PAYMENT_LINK;
    if (paymentLink) {
      window.open(paymentLink, '_blank');
    } else {
      console.error('Stripe payment link not configured');
    }
  };

  const faqs = [
    {
      question: "Was ist ein Lifetime Deal?",
      answer: "Du zahlst einmal 99€ und kannst Social Transformer für immer nutzen - inklusive aller zukünftigen Updates und neuen Features. Kein Abo, keine versteckten Kosten."
    },
    {
      question: "Warum ist der Beta-Preis so günstig?",
      answer: "Als Early Adopter hilfst du uns, Social Transformer zu verbessern. Dein Feedback ist Gold wert! Als Dankeschön bekommst du den dauerhaften Zugang zum Spezialpreis."
    },
    {
      question: "Kann ich später upgraden?",
      answer: "Ja! Du kannst jederzeit vom Free Plan zum Lifetime Deal wechseln. Der Beta-Preis gilt aber nur für kurze Zeit."
    },
    {
      question: "Wie sicher sind meine Daten?",
      answer: "Deine Daten werden verschlüsselt bei Supabase gespeichert. Die Zahlung läuft sicher über Stripe. Wir haben keinen Zugriff auf deine Zahlungsdaten."
    },
    {
      question: "Was passiert mit meinen gespeicherten Posts?",
      answer: "Im Free Plan kannst du keine Posts speichern. Mit dem Lifetime Deal bleiben alle deine Posts dauerhaft gespeichert und du kannst sie jederzeit abrufen und wiederverwenden."
    }
  ];

  return (
    <section id="pricing" className="py-12 sm:py-16 md:py-24 px-4 max-w-7xl mx-auto relative overflow-hidden">
      {/* Background decoration */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-accent/5 pointer-events-none" />
      
      <div className="text-center mb-8 sm:mb-12 relative z-10">
        <div className="inline-flex items-center gap-2 bg-gradient-to-r from-primary/10 to-accent/10 px-4 py-2 rounded-full mb-4">
          <Sparkles className="w-4 h-4 text-primary" />
          <span className="text-sm font-semibold text-primary">Beta Phase - Limitiertes Angebot</span>
        </div>
        <h2 className="text-2xl sm:text-3xl md:text-4xl font-bold text-foreground mb-3 sm:mb-4">
          Werde Beta-Tester und sichere dir den besten Deal
        </h2>
        <p className="text-base sm:text-lg text-muted max-w-3xl mx-auto px-4">
          Spare 15 Minuten pro Newsletter und erreiche 3x mehr Menschen auf Social Media
        </p>
      </div>

      {/* Value Props */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 max-w-3xl mx-auto mb-12">
        <div className="flex items-center justify-center gap-2 p-3 bg-background/50 backdrop-blur rounded-lg border border-border/50">
          <Clock className="w-5 h-5 text-primary" />
          <span className="text-sm font-medium">15 Min gespart pro Post</span>
        </div>
        <div className="flex items-center justify-center gap-2 p-3 bg-background/50 backdrop-blur rounded-lg border border-border/50">
          <TrendingUp className="w-5 h-5 text-primary" />
          <span className="text-sm font-medium">3x mehr Reichweite</span>
        </div>
        <div className="flex items-center justify-center gap-2 p-3 bg-background/50 backdrop-blur rounded-lg border border-border/50">
          <Users className="w-5 h-5 text-primary" />
          <span className="text-sm font-medium">Multi-Platform Posts</span>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 sm:gap-8 max-w-5xl mx-auto relative z-10">
        {/* Monthly Subscription Tier */}
        <div className="bg-background rounded-xl p-6 sm:p-8 border-2 border-gray-200 hover:border-gray-300 transition-all duration-300 hover:shadow-lg group">
          <div className="mb-6 sm:mb-8">
            <h3 className="text-xl sm:text-2xl font-bold text-foreground mb-2">Pro Monthly</h3>
            <p className="text-sm sm:text-base text-muted">Flexibel und monatlich kündbar</p>
            <div className="mt-4">
              <span className="text-2xl sm:text-3xl md:text-4xl font-bold text-foreground">29€</span>
              <span className="text-muted ml-2">pro Monat</span>
            </div>
          </div>
          <ul className="space-y-4 mb-8 text-foreground">
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.1s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span>Tägliche Post-Generierung</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.2s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span>Alle Plattformen (LinkedIn, X, Instagram)</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.3s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span>Standard URL-Extraktion mit Jina Reader</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.4s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span>Posts speichern & verwalten</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.5s' }}>
              <X className="h-5 w-5 text-gray-400 mr-3 flex-shrink-0 mt-0.5" />
              <span className="text-muted">Premium JavaScript-Extraktion</span>
            </li>
          </ul>
          <Button 
            onClick={handleGetStarted}
            className="w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-semibold transition-all duration-300 group-hover:shadow-lg"
          >
            Monatlich abonnieren
          </Button>
        </div>

        {/* Lifetime Deal */}
        <div className="bg-gradient-to-br from-primary/5 to-accent/5 rounded-xl p-6 sm:p-8 border-2 border-primary hover:border-accent transition-all duration-300 relative hover:shadow-2xl hover:scale-[1.02] group">
          {/* Glow effect */}
          <div className="absolute inset-0 bg-gradient-to-br from-primary/20 to-accent/20 blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
          
          <div className="absolute -top-3 sm:-top-4 left-1/2 transform -translate-x-1/2">
            <span className="bg-gradient-to-r from-primary to-accent text-white px-3 sm:px-4 py-1 rounded-full text-xs sm:text-sm font-semibold whitespace-nowrap flex items-center gap-1">
              <Zap className="w-3 h-3" />
              BETA LIFETIME DEAL - NUR KURZE ZEIT
            </span>
          </div>
          <div className="mb-6 sm:mb-8 relative">
            <h3 className="text-xl sm:text-2xl font-bold text-foreground mb-2">Pro - Lifetime</h3>
            <p className="text-sm sm:text-base text-muted">Einmal zahlen, für immer nutzen</p>
            <div className="mt-4 flex items-baseline gap-3">
              <span className="text-2xl sm:text-3xl md:text-4xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent animate-pulse">99€</span>
              <span className="text-muted ml-2">einmalig</span>
            </div>
            <div className="mt-2 inline-flex items-center gap-1 bg-green-500/10 text-green-600 px-2 py-1 rounded-full text-xs">
              <Check className="w-3 h-3" />
              <span>Beta-Preis für Early Adopters</span>
            </div>
          </div>
          <ul className="space-y-4 mb-8 text-foreground relative">
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.1s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span className="font-semibold">Unbegrenzte Posts generieren</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.2s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span>Alle Plattformen (LinkedIn, X, Instagram)</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.3s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span>Premium URL-Extraktion (JavaScript-Support)</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.4s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span>Posts dauerhaft speichern & verwalten</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.5s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span>Direct-Posting zu Social Media</span>
            </li>
            <li className="flex items-start opacity-0 animate-fadeIn" style={{ animationDelay: '0.6s' }}>
              <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
              <span className="font-semibold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">Alle zukünftigen Features inklusive</span>
            </li>
          </ul>
          <Button 
            onClick={handleBuyLifetimeDeal}
            className="w-full bg-white hover:bg-white/90 text-foreground font-semibold transition-all duration-300 shadow-lg hover:shadow-xl relative overflow-hidden group"
          >
            <span className="relative z-10 flex items-center justify-center gap-2">
              <Sparkles className="w-4 h-4" />
              Lifetime Deal sichern
            </span>
            <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-accent/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
          </Button>
        </div>
      </div>

      {/* Trust badges */}
      <div className="flex flex-wrap justify-center gap-6 mt-12 text-sm text-muted">
        <div className="flex items-center gap-2">
          <Shield className="w-4 h-4" />
          <span>Sichere Zahlung mit Stripe</span>
        </div>
        <div className="flex items-center gap-2">
          <Check className="w-4 h-4" />
          <span>Powered by Claude AI</span>
        </div>
        <div className="flex items-center gap-2">
          <Clock className="w-4 h-4" />
          <span>Beta-Preis nur limitiert verfügbar</span>
        </div>
      </div>

      {/* FAQ Section */}
      <div className="max-w-3xl mx-auto mt-16">
        <h3 className="text-2xl font-bold text-center mb-8">Häufige Fragen</h3>
        <div className="space-y-4">
          {faqs.map((faq, index) => (
            <div 
              key={index}
              className="bg-background/50 backdrop-blur rounded-lg border border-border/50 overflow-hidden transition-all duration-300 hover:border-primary/50"
            >
              <button
                onClick={() => setExpandedFaq(expandedFaq === index ? null : index)}
                className="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-background/80 transition-colors"
              >
                <span className="font-medium">{faq.question}</span>
                {expandedFaq === index ? (
                  <ChevronUp className="w-5 h-5 text-muted-foreground" />
                ) : (
                  <ChevronDown className="w-5 h-5 text-muted-foreground" />
                )}
              </button>
              {expandedFaq === index && (
                <div className="px-6 pb-4 text-muted-foreground animate-fadeIn">
                  {faq.answer}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/pages/Settings.tsx">
import { useEffect, useState } from "react";
import { useSubscription, UpgradeButton } from "@/components/common/UpgradeButton";
import { getSession, signOut } from "@/api/supabase";
import { useUsageTracking } from "@/hooks/useUsageTracking";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Link, useNavigate } from "react-router-dom";
import { 
  User, 
  CreditCard, 
  FileText, 
  HelpCircle, 
  LogOut, 
  ArrowLeft,
  Mail,
  Shield,
  FileHeart,
  Crown,
  Sparkles
} from "lucide-react";

export default function Settings() {
  const { subscription, loading } = useSubscription();
  const { getRemainingCount, isPro } = useUsageTracking();
  const [email, setEmail] = useState<string | null>(null);
  const [isLoggingOut, setIsLoggingOut] = useState(false);
  const { toast } = useToast();
  const navigate = useNavigate();
  const [styleText, setStyleText] = useState<string>("");

  useEffect(() => {
    getSession().then(({ data }) => setEmail(data.session?.user.email ?? null));
    // Load saved style examples
    try {
      const saved = window.localStorage.getItem('styleExamples');
      if (saved) setStyleText(saved);
    } catch { /* noop */ }
  }, []);

  const handleLogout = async () => {
    setIsLoggingOut(true);
    try {
      await signOut();
      toast({ title: "Abgemeldet", description: "Du wurdest erfolgreich abgemeldet." });
      navigate("/");
    } catch {
      toast({ 
        title: "Fehler", 
        description: "Beim Abmelden ist ein Fehler aufgetreten.",
        variant: "destructive"
      });
    } finally {
      setIsLoggingOut(false);
    }
  };

  const planLabel = loading
    ? "Lädt…"
    : subscription?.is_active
    ? "Pro (Lifetime)"
    : "Free";

  const billingPortalUrl = import.meta.env.VITE_STRIPE_BILLING_PORTAL as string | undefined;

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-accent/5 to-secondary">
      {/* Mobile Header */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-lg border-b md:hidden">
        <div className="flex items-center justify-between p-4">
          <Link to="/app">
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-5 w-5" />
            </Button>
          </Link>
          <h1 className="text-lg font-semibold">Einstellungen</h1>
          <div className="w-10" /> {/* Spacer for centering */}
        </div>
      </div>

      {/* Desktop Header */}
      <div className="hidden md:block border-b bg-background/50 backdrop-blur-sm">
        <div className="max-w-5xl mx-auto px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent">
                Einstellungen
              </h1>
              <p className="text-muted-foreground mt-1">Verwalte dein Konto und deine Präferenzen</p>
            </div>
            <Link to="/app">
              <Button variant="outline" className="gap-2">
                <ArrowLeft className="h-4 w-4" />
                Zurück zum Generator
              </Button>
            </Link>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-5xl mx-auto p-4 md:p-8">
        <div className="grid gap-4 md:gap-6 md:grid-cols-2 lg:grid-cols-3">
          
          {/* Account Card */}
          <Card className="bg-card/50 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-shadow md:col-span-2 lg:col-span-1">
            <CardHeader className="pb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-primary/10">
                  <User className="h-5 w-5 text-primary" />
                </div>
                <div>
                  <CardTitle className="text-lg">Konto</CardTitle>
                  <CardDescription className="text-xs">Persönliche Informationen</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center gap-2 text-sm">
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <span className="text-muted-foreground">E-Mail:</span>
                </div>
                <div className="font-medium truncate">{email ?? "Nicht eingeloggt"}</div>
              </div>
              
              {email && (
                <Button 
                  variant="outline" 
                  onClick={handleLogout}
                  disabled={isLoggingOut}
                  className="w-full gap-2"
                >
                  <LogOut className="h-4 w-4" />
                  {isLoggingOut ? "Abmelden..." : "Abmelden"}
                </Button>
              )}
            </CardContent>
          </Card>

          {/* Style Examples Card */}
          <Card className="bg-card/50 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-shadow md:col-span-2 lg:col-span-2">
            <CardHeader className="pb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-accent/10">
                  <FileHeart className="h-5 w-5 text-accent" />
                </div>
                <div>
                  <CardTitle className="text-lg">Style-Vorlagen (LinkedIn)</CardTitle>
                  <CardDescription className="text-xs">Beispiele von Posts, deren Stil du magst</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="style-upload">Datei hinzufügen (.txt, .md)</Label>
                <Input
                  id="style-upload"
                  type="file"
                  accept=".txt,.md,text/plain, text/markdown"
                  multiple
                  onChange={async (e) => {
                    const files = Array.from(e.target.files || []);
                    if (!files.length) return;
                    let aggregated = styleText.trim();
                    for (const f of files) {
                      try {
                        const text = await f.text();
                        aggregated = [aggregated, text.trim()].filter(Boolean).join("\n\n---\n\n");
                    } catch { /* noop */ }
                    }
                    setStyleText(aggregated);
                    toast({ title: "Importiert", description: `${files.length} Datei(en) hinzugefügt.` });
                  }}
                />
                <p className="text-xs text-muted-foreground">
                  Tipp: Trenne Beispiele mit "---". Emojis nur nutzen, wenn du sie auch im Output möchtest.
                </p>
              </div>
              <div className="space-y-2">
                <Label htmlFor="style-text">Beispiele (Text)</Label>
                <Textarea
                  id="style-text"
                  value={styleText}
                  onChange={(e) => setStyleText(e.target.value)}
                  placeholder={"LINKEDIN:\nDein Beispiel-Hook...\n\n---\n\nLINKEDIN:\nWeiteres Beispiel..."}
                  className="min-h-[220px]"
                />
              </div>
              <div className="flex gap-2">
                <Button
                  onClick={() => {
                    try {
                      window.localStorage.setItem('styleExamples', styleText);
                      toast({ title: "Gespeichert", description: "Style-Vorlagen lokal gespeichert." });
                    } catch {
                      toast({ title: "Fehler", description: "Konnte nicht speichern.", variant: "destructive" });
                    }
                  }}
                >
                  Speichern
                </Button>
                <Button
                  variant="outline"
                  onClick={() => {
                    setStyleText("");
                    try { window.localStorage.removeItem('styleExamples'); } catch { /* noop */ }
                    toast({ title: "Zurückgesetzt", description: "Style-Vorlagen entfernt." });
                  }}
                >
                  Zurücksetzen
                </Button>
              </div>
              <p className="text-xs text-muted-foreground">
                Bilder (PNG/JPG) als Vorlage? OCR-Unterstützung folgt. Bis dahin Text bitte hineinkopieren.
              </p>
            </CardContent>
          </Card>

          {/* Subscription Card */}
          <Card className="bg-card/50 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-shadow md:col-span-2 lg:col-span-1">
            <CardHeader className="pb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-accent/10">
                  <CreditCard className="h-5 w-5 text-accent" />
                </div>
                <div>
                  <CardTitle className="text-lg">Abo-Status</CardTitle>
                  <CardDescription className="text-xs">Dein aktueller Plan</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-muted-foreground">Plan:</span>
                  <div className="flex items-center gap-2">
                    {isPro && <Crown className="h-4 w-4 text-yellow-500" />}
                    <span className="font-medium">{planLabel}</span>
                  </div>
                </div>
                
                {!isPro && (
                  <>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Verfügbar heute:</span>
                      <span className="font-bold text-lg">{Math.max(0, getRemainingCount())}</span>
                    </div>
                  </>
                )}
                
                <div className="pt-2">
                  {!isPro ? (
                    <UpgradeButton />
                  ) : (
                    <Badge className="w-full justify-center bg-gradient-to-r from-yellow-500 to-yellow-600 text-white border-0 py-2">
                      <Sparkles className="h-4 w-4 mr-2" />
                      Pro Lifetime Zugang
                    </Badge>
                  )}
                </div>

                {billingPortalUrl && isPro && (
                  <Button 
                    variant="secondary" 
                    onClick={() => window.open(billingPortalUrl, "_blank")}
                    className="w-full text-sm"
                  >
                    Rechnungen verwalten
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Quick Actions Card */}
          <Card className="bg-card/50 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-shadow md:col-span-2 lg:col-span-1">
            <CardHeader className="pb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-secondary/10">
                  <FileText className="h-5 w-5 text-secondary" />
                </div>
                <div>
                  <CardTitle className="text-lg">Schnellzugriff</CardTitle>
                  <CardDescription className="text-xs">Wichtige Funktionen</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-3">
              <Link to="/app?expand=saved" className="block">
                <Button variant="outline" className="w-full justify-start gap-2">
                  <FileHeart className="h-4 w-4" />
                  Gespeicherte Posts
                </Button>
              </Link>
              <p className="text-xs text-muted-foreground px-1">
                Mobile: Untere Leiste | Desktop: Rechte Seitenleiste
              </p>
            </CardContent>
          </Card>

          {/* Support Card - Full Width on Mobile/Tablet, Normal on Desktop */}
          <Card className="bg-card/50 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-shadow col-span-full lg:col-span-3">
            <CardHeader className="pb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-muted">
                  <HelpCircle className="h-5 w-5 text-muted-foreground" />
                </div>
                <div>
                  <CardTitle className="text-lg">Support & Rechtliches</CardTitle>
                  <CardDescription className="text-xs">Hilfe und wichtige Dokumente</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                <Button 
                  variant="outline" 
                  onClick={() => window.open("mailto:support@example.com", "_blank")}
                  className="gap-2 justify-start"
                >
                  <Mail className="h-4 w-4" />
                  Support
                </Button>
                <Button 
                  variant="ghost" 
                  onClick={() => window.open("/privacy", "_blank")}
                  className="gap-2 justify-start"
                >
                  <Shield className="h-4 w-4" />
                  Datenschutz
                </Button>
                <Button 
                  variant="ghost" 
                  onClick={() => window.open("/imprint", "_blank")}
                  className="gap-2 justify-start"
                >
                  <FileText className="h-4 w-4" />
                  Impressum
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* App Version Footer - Mobile Only */}
        <div className="mt-8 text-center text-xs text-muted-foreground md:hidden">
          <p>Social Transformer v1.0.0</p>
          <p className="mt-1">© 2024 Alle Rechte vorbehalten</p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/App.tsx">
import { Routes, Route } from 'react-router-dom'
import Landing from '@/pages/Landing'
import Generator from '@/pages/Generator'
import SignUp from '@/pages/SignUp'
import Settings from '@/pages/Settings'
import Privacy from '@/pages/Privacy'
import Imprint from '@/pages/Imprint'
import Terms from '@/pages/Terms'
import ProtectedRoute from '@/components/common/ProtectedRoute'
import { Toaster } from '@/components/ui/toaster'

export default function App() {
  return (
    <>
      <Routes>
        <Route path="/" element={<Landing />} />
        <Route path="/signup" element={<SignUp />} />
        <Route path="/privacy" element={<Privacy />} />
        <Route path="/imprint" element={<Imprint />} />
        <Route path="/terms" element={<Terms />} />
        <Route
          path="/app"
          element={
            <ProtectedRoute>
              <Generator />
            </ProtectedRoute>
          }
        />
        <Route
          path="/settings"
          element={
            <ProtectedRoute>
              <Settings />
            </ProtectedRoute>
          }
        />
        <Route path="*" element={<Landing />} />
      </Routes>
      <Toaster />
    </>
  )
}
</file>

<file path="src/api/claude.ts">
import Anthropic from '@anthropic-ai/sdk';
// Optional style examples for LinkedIn posts (raw import of markdown)
// Put posts you like into src/config/linkedin-style-examples.md
// and they will be injected as style references for LinkedIn generation.
// If the file is empty, nothing changes.
// Vite supports `?raw` to import file content as string.
import linkedInStyleExamplesRaw from '@/config/linkedin-style-examples.md?raw';

// API Key wird jetzt serverseitig in der Edge Function verwendet
const CLAUDE_API_KEY = 'not-needed' // Dummy-Wert, wird von Edge Function überschrieben

function getClaudeBase(): string {
  const envBase = import.meta.env?.VITE_CLAUDE_BASE as string | undefined;
  if (envBase && envBase.length > 0) return envBase.replace(/\/$/, '');
  if (typeof window !== 'undefined' && window.location?.origin) {
    return `${window.location.origin}/api/claude`;
  }
  // Fallback for non-browser contexts
  return 'https://linkedin-posts-ashen.vercel.app/api/claude';
}

const anthropic = new Anthropic({
  apiKey: CLAUDE_API_KEY,
  dangerouslyAllowBrowser: true,
  // Absolute URL required by SDK; computed for dev/prod
  baseURL: getClaudeBase(),
});

const linkedInFromNewsletterPrompt = `
Du bist ein Social-Media-Experte und Ghostwriter für LinkedIn im DACH-Markt.
Du arbeitest für einen beliebten Blogger. Deine Aufgabe: Den folgenden Blogbeitrag/Newsletter in LinkedIn-Posts umwandeln und dabei Stil, Ton und Stimme des Originals so genau wie möglich treffen.

Wenn <style_examples> vorhanden ist:
- Analysiere die Beispiele und bilde ein implizites Stilprofil (nur intern, nicht ausgeben): Hook-Muster, Satzlänge/Rhythmus, Einsatz von Trennern (z. B. "--"), Listenformat (z. B. 1️⃣ 2️⃣ 3️⃣), Abschlussfrage/Call-to-Action sowie Umgang mit Emojis.
- Emuliere dieses Stilprofil streng, ohne Phrasen wörtlich zu kopieren.
- Emojis nur, wenn das Stilprofil es vorsieht; dann maximal 1, dezent eingesetzt, vorzugsweise am Ende. Keine Hashtags.

Erzeuge GENAU DREI LinkedIn-Posts.

Harte Format- und Stilregeln (zwingend):
- Jeder Post beginnt mit dem Präfix "LINKEDIN:" (genau so) in der ersten Zeile.
- Trenne die drei Posts mit genau einer Leerzeile.
- Sehr kurze Sätze. Nach jedem Satz eine LEERE Zeile setzen (also eine Zeile auslassen).
- Die ersten ZWEI Sätze sind der Hook und transportieren ~80% der Aussage/Wert des Posts.
- Keine Hashtags. Emojis nur gemäß Stilprofil (max. 1, optional).
- Ton: gesprächig, klar, autoritativ; professionell-persönlich; Du-Form.
- Struktur: starker Hook → Kernidee(n) in kurzen Sätzen → klare Erkenntnis/Takeaway → dezente Abschlussfrage (Engagement), ebenfalls kurz.
- Bleibe deutlich unter dem LinkedIn-Limit; lieber prägnant als lang.
- Erlaube nummerierte Kurzlisten (z. B. 1️⃣ 2️⃣ 3️⃣) und Abschnittstrenner "--", falls stiltypisch; sonst weglassen.

Best Practices (sichtbar im Text, wenn sinnvoll):
- Mini-Fallbeispiel/Erfahrung für Glaubwürdigkeit.
- Konkrete, umsetzbare Hinweise.
- Zahlen/Signale/Studien nutzen, wenn vorhanden (sehr kurz, prägnant).

Blog/Newsletter-Inhalt:
`;

export async function linkedInPostsFromNewsletter(content: string) {
  try {
   // Prepare optional style examples section: prefer localStorage over static file
   let lsExamples = '';
   try {
     if (typeof window !== 'undefined' && window.localStorage) {
       lsExamples = (window.localStorage.getItem('styleExamples') || '').trim();
     }
  } catch { /* noop */ }
   const examples = (lsExamples || linkedInStyleExamplesRaw || '').trim();
   const limitedExamples = examples.length > 8000 ? examples.slice(0, 8000) + '\n…' : examples;
   const styleSection = limitedExamples
     ? `\n\nStil-Beispiele (Posts, die mir gefallen):\n<style_examples>\n${limitedExamples}\n</style_examples>\n\nWICHTIG: Nutze diese nur als Stil-Referenz (Ton, Hook, Satzlänge, Struktur). Halte dich strikt an alle "Harten Format- und Stilregeln" oben.`
     : '';

   const finalPrompt = `${linkedInFromNewsletterPrompt}${styleSection} \n\n${content}`;

   const response = await anthropic.messages.create({
    model: 'claude-3-5-sonnet-20241022',
    max_tokens: 4096,
    temperature: 0.7,
    messages: [{
      role: 'user',
      content: finalPrompt
    }]
   });
   
   const text = (response.content[0] as { text?: string })?.text || '';
   // Robustly parse multi-line blocks starting with LINKEDIN:
   const regex = /(?:^|\n)\s*LINKEDIN:\s*([\s\S]*?)(?=\n\s*LINKEDIN:|$)/g;
   const posts: string[] = [];
   let match: RegExpExecArray | null;
   while ((match = regex.exec(text)) !== null) {
     const body = match[1].trim();
     if (body) posts.push(body);
   }
   // Fallback to line-based parsing if needed
   const parsed = posts.length > 0
     ? posts
     : text.split('\n')
         .filter(line => line.trim().startsWith('LINKEDIN:'))
         .map(line => line.replace(/^\s*LINKEDIN:\s*/, '').trim());

   return parsed.slice(0, 3);
  } catch (error) {
    console.error('Error:', error);
    throw new Error('Failed to remix content');
  }
}

// === Topic idea generation from uploads ===
type ImageMediaType = "image/jpeg" | "image/png" | "image/gif" | "image/webp";

export async function suggestTopicIdeasFromInputs(params: {
  userNotes?: string;
  texts?: string[];
  images?: { media_type: ImageMediaType; data: string }[];
}): Promise<string[]> {
  const blocks: Array<
    | { type: 'text'; text: string }
    | { type: 'image'; source: { type: 'base64'; media_type: ImageMediaType; data: string } }
  > = [];
  const header = `Du bist ein deutschsprachiger Content-Strateg(e) für LinkedIn.
Analysiere die bereitgestellten Hinweise/Uploads und schlage 7 prägnante Themen-Ideen vor.
Format:
<ideas>\n- [Kurzer Titel] — 1 Satz, klarer Angle\n… (7 Zeilen)\n</ideas>
Nur die Liste ausgeben, keine Erklärtexte.`;

  blocks.push({ type: 'text', text: header });

  const textBundle = [
    params.userNotes?.trim() || '',
    ...(params.texts || []).map(t => t.trim()).filter(Boolean),
  ].filter(Boolean).join('\n\n---\n\n');
  if (textBundle) {
    blocks.push({ type: 'text', text: `<inputs>\n${textBundle}\n</inputs>` });
  }
  for (const img of params.images || []) {
    if (!img?.data) continue;
    blocks.push({
      type: 'image',
      source: { type: 'base64', media_type: img.media_type, data: img.data },
    });
  }

  const response = await anthropic.messages.create({
    model: 'claude-3-5-sonnet-20241022',
    max_tokens: 800,
    temperature: 0.5,
    messages: [
      { role: 'user', content: blocks },
    ],
  });

  const text = (response.content[0] as { text?: string })?.text || '';
  const within = /<ideas>[\s\S]*?<\/ideas>/i.exec(text)?.[0] || text;
  const lines = within
    .replace(/<\/?ideas>/gi, '')
    .split('\n')
    .map(l => l.trim())
    .filter(l => l.startsWith('-'))
    .map(l => l.replace(/^[-•]\s*/, ''))
    .filter(Boolean);
  return lines.slice(0, 10);
}

// === Instagram generation ===
const instagramFromBlogPrompt_de = `
Du bist ein erfahrener Social-Media-Content-Creator mit der Aufgabe, deutsche Blogpost- oder Newsletter-Inhalte in ansprechende Instagram-Beschreibungen umzuwandeln. Dein Ziel ist es, drei unterschiedliche Instagram-Beschreibungen zu erstellen, die den Kern des ursprünglichen Inhalts erfassen und dabei die Instagram-Best-Practices berücksichtigen.

Hier ist der deutsche Blogpost oder Newsletter, den du analysieren sollst:

<blogpost>
{{BLOGPOST}}
</blogpost>

Wenn <style_examples> vorhanden ist:
- Analysiere die Beispiele und bilde ein implizites Stilprofil (nur intern, nicht ausgeben): Hook-Muster, Satzlänge/Rhythmus, Bildsprache, Einsatz von Emojis, Hashtag-Verwendung, Abschlussfrage/Call-to-Action.
- Emuliere dieses Stilprofil streng, ohne Phrasen wörtlich zu kopieren.
- Verwende Emojis nur, wenn das Stilprofil es vorsieht; dann dezent eingesetzt. Hashtags nur, wenn im Stilprofil üblich.

Bitte folge diesen Schritten, um drei Instagram-Beschreibungen basierend auf dem obigen Inhalt zu erstellen. Lege deinen Denkprozess in <analyse_und_planung> Tags dar:

1. Analysiere den Blogpost:
   - Identifiziere den Schreibstil, Ton und einzigartige Ausdrücke des Autors
   - Liste charakteristische Phrasen oder Redewendungen auf
   - Notiere die Hauptthemen oder -themen
   - Schreibe wichtige Zitate auf, die die Hauptpunkte repräsentieren

2. Extrahiere drei unterschiedliche Kernelemente oder Hauptpunkte aus dem Blogpost. Diese werden die Grundlage für deine Instagram-Beschreibungen bilden.

3. Für jedes Kernelement:
   - Wähle ein passendes Zitat aus
   - Erstelle eine Liste von 10-15 relevanten Hashtags, wobei die Hälfte allgemeine, weitreichende Begriffe zum Themenbereich sein sollten und die andere Hälfte sehr spezifische und nischenbasierte Hashtags
   - Wähle 3-5 der besten Hashtags aus und begründe deine Auswahl
   - Berücksichtige die Zielgruppe (18-30 jährige deutsche Instagram-Nutzer) und erkläre, wie dieses Kernelement sie ansprechen kann

4. Plane für jedes Kernelement eine Instagram-Beschreibung, die:
   - Den Stil und Ausdruck des Autors beibehält
   - Prägnant (3-5 Sätze) und ansprechend ist
   - Die ausgewählten 3-5 relevanten Hashtags aus deiner Liste enthält
   - Mit einem Call-to-Action oder einer Frage endet
   - Die Zielgruppe anspricht (verwende "du" statt "ihr")

5. Berücksichtige diese Instagram-Best-Practices für jede Beschreibung:
   - Nutze die maximalen 2.200 Zeichen effektiv
   - Erstelle einen starken Hook in den ersten 125 Zeichen, um Aufmerksamkeit zu erregen
   - Verwende Storytelling, um Emotionen zu wecken und Mehrwert zu bieten
   - Füge einen klaren Call-to-Action (CTA) hinzu
   - Verwende Emojis sparsam für visuellen Reiz
   - Teile den Text in kürzere Absätze für bessere Lesbarkeit
   - Bewahre Authentizität und Konsistenz mit der Markenstimme
   - Stelle sicher, dass jeder Post ohne Kontext von den anderen eigenständig funktioniert

6. Erstelle deine drei Instagram-Beschreibungen unter Berücksichtigung aller oben genannten Punkte.

7. Überprüfe und verfeinere jede Beschreibung:
   - Zähle die Zeichen, um sicherzustellen, dass sie unter 2.200 bleiben
   - Stelle sicher, dass sie alle Anforderungen und Best Practices erfüllt
   - Prüfe, ob der Stil und Ton des ursprünglichen Autors beibehalten wurde

Nach Abschluss deiner Analyse und Planung erstelle bitte drei Instagram-Beschreibungen basierend auf dem Blogpost-Inhalt. Formatiere deine Ausgabe wie folgt:

<instagram_descriptions>
INSTAGRAM: [Erste Instagram-Beschreibung]

INSTAGRAM: [Zweite Instagram-Beschreibung]

INSTAGRAM: [Dritte Instagram-Beschreibung]
</instagram_descriptions>

Beachte:
- Schreibe auf Deutsch
- Jede Beschreibung sollte sich auf ein anderes Kernelement aus dem ursprünglichen Inhalt konzentrieren
- Behalte durchgehend die Stimme und den Stil des Autors bei
- Halte dich an die oben genannten Instagram-Best-Practices
- Sprich die Zielgruppe mit "du" an, nicht mit "ihr"
- Füge keine erklärenden Texte nach der dritten Instagram-Beschreibung hinzu

Deine Beschreibungen sollten einzigartig, ansprechend und für Instagram optimiert sein, während sie der Botschaft und dem Ton des ursprünglichen Inhalts treu bleiben.
`;

// === X (Twitter) generation ===
const xFromBlogPrompt_de = `
Sie sind ein erfahrener Content-Marketer mit der Aufgabe, ansprechende Tweets aus einem Blogbeitrag zu erstellen. Ihr Ziel ist es, 5 unterschiedliche Tweets zu verfassen, die das Wesen des Blogbeitrags erfassen und dabei den einzigartigen Schreibstil des Autors beibehalten. Diese Tweets sollen auf Deutsch sein, unabhängig von der Sprache des ursprünglichen Blogbeitrags.

Hier ist der Blogbeitrag, den Sie analysieren sollen:

<blogpost>
{{BLOGPOST}}
</blogpost>

Wenn <style_examples> vorhanden ist:
- Analysieren Sie die Beispiele gründlich und bilden Sie ein implizites Stilprofil (nur intern, nicht ausgeben): Satzbau, Hook-Techniken, Sprachstil, Einsatz von Fragen oder Aussagen, typische Satzlänge.
- Emulieren Sie dieses Stilprofil streng in den zu erstellenden Tweets, ohne Phrasen wörtlich zu kopieren.
- Achten Sie auf charakteristische Elemente wie kurze vs. lange Sätze, direkte vs. indirekte Ansprache, informell vs. formell, fragend vs. behauptend.

Bevor Sie die Tweets erstellen, analysieren Sie bitte den Blogbeitrag gründlich. Wrap your analysis in <blogpost_analysis> tags:

<blogpost_analysis>
1. Identifizieren Sie 5-7 Hauptpunkte oder interessante Fakten aus dem Blogbeitrag. Für jeden Punkt:
   a. Zitieren Sie die relevante Passage aus dem Blogbeitrag.
   b. Falls der Blogbeitrag nicht auf Deutsch ist, geben Sie eine kurze deutsche Übersetzung des Zitats.
   c. Beschreiben Sie, wie dieser Punkt in einen Tweet umgewandelt werden könnte.

2. Beschreiben Sie den Schreibstil und Ton des Autors. Notieren Sie spezifische Phrasen oder Satzstrukturen, die charakteristisch für den Autor sind.

3. Für jeden Hauptpunkt, entwickeln Sie eine Tweet-Idee:
   a. Formulieren Sie den Tweet auf Deutsch.
   b. Zählen Sie die Zeichen laut, indem Sie jedes Wort mit einer Nummer versehen (z.B. 1.Dieses 2.ist 3.ein 4.Beispieltweet).
   c. Notieren Sie, wie der Stil und Ton des Tweets dem des Autors entspricht.
   d. Wenn die Zeichenzahl 280 überschreitet, überarbeiten und zählen Sie erneut, bis der Tweet passt.

4. Identifizieren Sie potenzielle "Scrollstopper"-Elemente für jeden Tweet, die die Leser zum Innehalten und Interagieren bringen könnten.

5. Basierend auf dem Inhalt, beschreiben Sie die Zielgruppe und wie die Tweets für deutschsprachige Leser ansprechend gestaltet werden können.

6. Wählen Sie die 5 besten Tweet-Ideen aus, die verschiedene Aspekte des Blogbeitrags abdecken und innerhalb des Zeichenlimits liegen.
</blogpost_analysis>

Erstellen Sie nun 5 Tweets basierend auf Ihrer Analyse. Jeder Tweet sollte einen anderen Hauptpunkt oder eine wichtige Idee aus dem Inhalt hervorheben. Befolgen Sie diese Richtlinien:

1. Schreiben Sie alle Tweets auf Deutsch, unabhängig von der Originalsprache des Blogbeitrags.
2. Stellen Sie sicher, dass jeder Tweet in sich geschlossen ist und ohne Kontext aus den anderen Tweets verstanden werden kann.
3. Behalten Sie durchgehend den Schreibstil und Ton des Autors bei.
4. Konzentrieren Sie sich auf interessante, überraschende oder zum Nachdenken anregende Fakten oder Ideen aus dem Blogbeitrag. Diese sollten als "Scrollstopper" fungieren - Inhalte, die Leser zum Innehalten und Interagieren bringen.
5. Halten Sie jeden Tweet innerhalb des Twitter-Limits von 280 Zeichen.
6. Verwenden Sie keine Emojis in den Tweets.
7. Vermeiden Sie die Verwendung von Hashtags, es sei denn, sie werden speziell im Blogbeitrag erwähnt.
8. Verwenden Sie keine Twitter-spezifischen Funktionen wie @mentions oder URLs, es sei denn, sie sind entscheidend für den Inhalt des Blogbeitrags.
9. Wenn es relevante Statistiken oder Zitate im Blogbeitrag gibt, erwägen Sie, diese gegebenenfalls einzubauen.
10. Formulieren Sie die Tweets nicht als Empfehlungen oder Anweisungen (z.B. vermeiden Sie Phrasen wie "Machen Sie dies..." oder "Sie sollten...").
11. Konzentrieren Sie sich auf konkrete, wertvolle Informationen. Vermeiden Sie allgemeine Aussagen oder Verallgemeinerungen.

Präsentieren Sie Ihre Tweets in folgendem Format:

<tweets>
<tweet1>
[Tweet-Inhalt für den ersten Hauptpunkt auf Deutsch]
</tweet1>

<tweet2>
[Tweet-Inhalt für den zweiten Hauptpunkt auf Deutsch]
</tweet2>

<tweet3>
[Tweet-Inhalt für den dritten Hauptpunkt auf Deutsch]
</tweet3>

<tweet4>
[Tweet-Inhalt für den vierten Hauptpunkt auf Deutsch]
</tweet4>

<tweet5>
[Tweet-Inhalt für den fünften Hauptpunkt auf Deutsch]
</tweet5>
</tweets>

Denken Sie daran, dass jeder Tweet ein "Scrollstopper" sein sollte, der plausibel vom ursprünglichen Autor zur Förderung seines Blogbeitrags geschrieben worden sein könnte, gegebenenfalls ins Deutsche übersetzt. Ziel ist es, die Aufmerksamkeit des Lesers zu fesseln und ihn dazu zu ermutigen, sich mit dem vollständigen Blogbeitrag auseinanderzusetzen.`;

function sanitizeTweet(tweet: string): string {
  let t = tweet.trim();

  // Entferne Hashtags vorsichtshalber
  t = t.replace(/#[^\s#]+/g, '').trim();

  // Entferne gängige Plattform-/Meta-Labels im Text
  t = t
    .replace(/\bX\s*\(Twitter\)\s*·\s*Post\s*#?\d+\b/gi, '')
    .replace(/\bPost\s*#?\d+\b/gi, '')
    .replace(/\bTweet\s*#?\d+\b/gi, '')
    .trim();

  // Entferne führende Labels/Nummerierung (Tweet 1:, Punkt 2:, 1) 1. - * • (1) etc.)
  t = t
    .replace(/^\s*(Tweet|Tweets|Punkt)\s*\d+\s*:\s*/i, '')
  .replace(/^\s*[-*•]\s+/, '')
    .replace(/^\s*\(?\d+\)?\s*[-.)]\s+/, '')
    .replace(/^\s*\(?\d+\/\d+\)?\s+/, '')
    .trim();

  // Entferne Thread-Hinweise (am Anfang oder Ende)
  t = t
    .replace(/\s*\(?\d+\/\d+\)?\s*$/g, '') // z. B. "1/5" am Ende
    .replace(/^\s*(Teil\s*\d+(?:\/\d+)?)\s*[:-]?\s*/i, '')
    .replace(/\b(Thread|Fortsetzung|weiter(\s*geht's)?|Teil\s*\d+)\b/gi, '')
    .replace(/\s{2,}/g, ' ')
    .trim();

  // Entferne Emojis (grobe Unicode-Emoji-Range und gängige Symbole)
  // Hinweis: bewusst konservativ, um deutsche Umlaute/Sonderzeichen nicht zu treffen
  t = t
    .replace(/[\u{1F300}-\u{1F6FF}\u{1F700}-\u{1F77F}\u{1F900}-\u{1F9FF}\u{1FA70}-\u{1FAFF}\u{2600}-\u{27BF}]/gu, '')
    .replace(/[\u2702-\u27B0]/g, '')
    .trim();

  // Kürze hart auf 280 Zeichen
  if (t.length > 280) t = t.slice(0, 279) + '…';

  return t;
}

export async function xTweetsFromBlog(content: string) {
  try {
    // Prepare optional style examples section: prefer localStorage over static file
    let lsExamples = '';
    try {
      if (typeof window !== 'undefined' && window.localStorage) {
        lsExamples = (window.localStorage.getItem('styleExamples') || '').trim();
      }
    } catch { /* noop */ }
    const examples = lsExamples.trim();
    const limitedExamples = examples.length > 8000 ? examples.slice(0, 8000) + '\n…' : examples;
    const styleSection = limitedExamples
      ? `\n\nStil-Beispiele (Posts, die mir gefallen):\n<style_examples>\n${limitedExamples}\n</style_examples>\n\nWICHTIG: Nutzen Sie diese nur als Stil-Referenz. Folgen Sie weiterhin den Richtlinien für X/Twitter-Posts.`
      : '';

    // Replace {{BLOGPOST}} placeholder with actual content
    const promptWithContent = xFromBlogPrompt_de.replace('{{BLOGPOST}}', content) + styleSection;
    
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 2500,
      temperature: 0.7,
      messages: [{
        role: 'user',
        content: promptWithContent
      }]
    });

    const text = (response.content[0] as { text: string }).text.trim();

    // Parse tweets from XML tags
    const tweets: string[] = [];
    
    // Extract tweets from <tweet1> through <tweet5> tags
    for (let i = 1; i <= 5; i++) {
      const regex = new RegExp(`<tweet${i}>\\s*([\\s\\S]*?)\\s*</tweet${i}>`, 'i');
      const match = text.match(regex);
      if (match && match[1]) {
        const tweetContent = match[1].trim();
        // Remove placeholder text if present
        if (!tweetContent.startsWith('[') && tweetContent.length > 0) {
          tweets.push(tweetContent);
        }
      }
    }

    // Fallback: if no XML tags found, try line-based parsing
    if (tweets.length === 0) {
      let lines = text
        .split(/\r?\n+/)
        .map((l) => l.trim())
        .filter((l) => l.length > 0);

      // Filter out meta lines and analysis content
      lines = lines.filter((l) => 
        !l.startsWith('<') && 
        !l.includes('tweet1>') && 
        !l.includes('tweet2>') &&
        !l.includes('tweet3>') &&
        !l.includes('tweet4>') &&
        !l.includes('tweet5>') &&
        !l.includes('blogpost_analysis>') &&
        !l.includes('tweets>')
      );
      
      lines.forEach(line => {
        if (line.length > 10 && line.length <= 280) {
          tweets.push(line);
        }
      });
    }

    // Clean and deduplicate tweets
    const seen = new Set<string>();
    const finalTweets = tweets
      .map(sanitizeTweet)
      .filter((t) => t.length > 0)
      .filter((t) => {
        const key = t.toLowerCase();
        if (seen.has(key)) return false;
        seen.add(key);
        return true;
      });
    
    // Return up to 5 tweets
    return finalTweets.slice(0, 5);
  } catch (error) {
    console.error('X generation error:', error);
    throw new Error('Failed to generate X tweets');
  }
}

export async function instagramPostsFromBlog(content: string) {
  try {
    // Prepare optional style examples section: prefer localStorage over static file
    let lsExamples = '';
    try {
      if (typeof window !== 'undefined' && window.localStorage) {
        lsExamples = (window.localStorage.getItem('styleExamples') || '').trim();
      }
    } catch { /* noop */ }
    const examples = lsExamples.trim();
    const limitedExamples = examples.length > 8000 ? examples.slice(0, 8000) + '\n…' : examples;
    const styleSection = limitedExamples
      ? `\n\nStil-Beispiele (Posts, die mir gefallen):\n<style_examples>\n${limitedExamples}\n</style_examples>\n\nWICHTIG: Nutze diese nur als Stil-Referenz. Folge weiterhin den Instagram-Best-Practices oben.`
      : '';

    // Replace {{BLOGPOST}} placeholder with actual content
    const promptWithContent = instagramFromBlogPrompt_de.replace('{{BLOGPOST}}', content) + styleSection;
    
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 4096,
      temperature: 0.7,
      messages: [{
        role: 'user',
        content: promptWithContent
      }]
    });

    const text = (response.content[0] as { text: string }).text;
    
    // Parse Instagram posts from XML tags
    const posts: string[] = [];
    
    // First try to extract from instagram_descriptions tags
    const descriptionsMatch = text.match(/<instagram_descriptions>([\s\S]*?)<\/instagram_descriptions>/i);
    if (descriptionsMatch) {
      const descriptionsText = descriptionsMatch[1];
      // Extract posts starting with INSTAGRAM:
      const regex = /(?:^|\n)\s*INSTAGRAM:\s*([\s\S]*?)(?=\n\s*INSTAGRAM:|$)/g;
      let match: RegExpExecArray | null;
      while ((match = regex.exec(descriptionsText)) !== null) {
        const body = match[1].trim();
        if (body) posts.push(body);
      }
    }
    
    // Fallback to line-based parsing if needed
    if (posts.length === 0) {
      const parsed = text.split('\n')
        .filter(line => line.trim().startsWith('INSTAGRAM:'))
        .map(line => line.replace(/^\s*INSTAGRAM:\s*/, '').trim())
        .filter(line => line.length > 0);
      posts.push(...parsed);
    }

    // Clean and return up to 3 posts
    const finalPosts = posts
      .filter(post => post.length > 0)
      .slice(0, 3);

    return finalPosts;
  } catch (error) {
    console.error('Instagram generation error:', error);
    throw new Error('Failed to generate Instagram posts');
  }
}
</file>

<file path="api/extract-premium.ts">
// Edge Function: Premium Content-Extraktion mit Firecrawl
// Limitiert auf 20 Extraktionen pro Monat für Premium-Nutzer

import { createClient } from '@supabase/supabase-js';

export const config = {
  runtime: 'edge',
  regions: ['fra1'], // Frankfurt für niedrige Latenz in Europa
};

type ExtractPremiumRequest = {
  url: string;
  userId?: string; // Wird aus Auth-Header extrahiert
};

type ExtractPremiumResponse = {
  title?: string;
  content: string;
  markdown?: string;
  html?: string;
  screenshot?: string;
  metadata?: {
    sourceUrl: string;
    extractedAt: string;
    extractionType: 'firecrawl';
  };
  usage?: {
    used: number;
    limit: number;
    remaining: number;
    resetsAt: string;
  };
};

type UsageInfo = {
  used_count: number;
  limit_count: number;
  remaining_count: number;
  reset_at: string;
};

// Initialisiere Supabase Client mit Service Role für RLS-Bypass
function getSupabaseClient() {
  const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !supabaseServiceKey) {
    throw new Error('Supabase-Konfiguration fehlt');
  }

  return createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false,
    },
    // WICHTIG: Keine Authorization-Header hier, damit Service Role aktiv bleibt
  });
}

// Extrahiere User ID aus JWT Token
async function getUserFromAuth(authHeader: string, supabase: ReturnType<typeof getSupabaseClient>) {
  try {
    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error } = await supabase.auth.getUser(token);
    
    if (error || !user) {
      console.error('Auth-Fehler:', error);
      return null;
    }
    
    return user;
  } catch (error) {
    console.error('Token-Parsing-Fehler:', error);
    return null;
  }
}

// Prüfe und aktualisiere Nutzungslimit
async function checkAndUpdateUsage(
  supabase: ReturnType<typeof getSupabaseClient>, 
  userId: string, 
  url: string
): Promise<{ allowed: boolean; usage: UsageInfo | null; error?: string }> {
  try {
    // Hole aktuelle Nutzungsstatistik
    const { data: usageData, error: usageError } = await supabase
      .rpc('get_monthly_extraction_usage', {
        p_user_id: userId,
        p_extraction_type: 'firecrawl'
      })
      .single();

    if (usageError) {
      console.error('Usage-Abfrage-Fehler:', usageError);
      return { allowed: false, usage: null, error: 'Nutzungsabfrage fehlgeschlagen' };
    }

    const usage = usageData as UsageInfo;

    // Prüfe ob Limit erreicht
    if (usage.remaining_count <= 0) {
      return { 
        allowed: false, 
        usage,
        error: `Monatliches Limit von ${usage.limit_count} Premium-Extraktionen erreicht. Zurücksetzung am ${new Date(usage.reset_at).toLocaleDateString('de-DE')}.`
      };
    }

    // Logge die Nutzung
    const { error: insertError } = await supabase
      .from('extraction_usage')
      .insert({
        user_id: userId,
        extraction_type: 'firecrawl',
        url: url,
        success: true,
        metadata: {
          timestamp: new Date().toISOString(),
          source: 'extract-premium'
        }
      });

    if (insertError) {
      console.error('Usage-Logging-Fehler:', insertError);
      // Fahre trotzdem fort, da das Logging fehlschlagen könnte
    }

    return { 
      allowed: true, 
      usage: {
        ...usage,
        used_count: usage.used_count + 1,
        remaining_count: usage.remaining_count - 1
      }
    };
  } catch (error) {
    console.error('Usage-Check-Fehler:', error);
    return { allowed: false, usage: null, error: 'Interner Fehler bei Nutzungsprüfung' };
  }
}

// Hauptfunktion
export default async function handler(req: Request) {
  const cors = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
  };


  // Handle Preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: cors });
  }

  if (req.method !== 'POST') {
    return new Response(
      JSON.stringify({ error: 'Methode nicht erlaubt' }), 
      { status: 405, headers: { ...cors, 'Content-Type': 'application/json' } }
    );
  }

  try {
    // 1. Authentifizierung prüfen
    const authHeader = req.headers.get('Authorization');
    if (!authHeader?.startsWith('Bearer ')) {
      return new Response(
        JSON.stringify({ error: 'Authentifizierung erforderlich' }),
        { status: 401, headers: { ...cors, 'Content-Type': 'application/json' } }
      );
    }

    const supabase = getSupabaseClient();
    const user = await getUserFromAuth(authHeader, supabase);
    
    if (!user) {
      return new Response(
        JSON.stringify({ error: 'Ungültiger Authentifizierungs-Token' }),
        { status: 401, headers: { ...cors, 'Content-Type': 'application/json' } }
      );
    }

    // 2. Subscription prüfen
    const { data: subscription, error: subError } = await supabase
      .from('subscriptions')
      .select('*')
      .eq('user_id', user.id)
      .single();

    if (subError || subscription?.status !== 'active') {
      return new Response(
        JSON.stringify({ 
          error: 'Premium-Abo erforderlich',
          details: 'Diese Funktion ist nur für Nutzer mit aktivem Premium-Abo verfügbar.'
        }),
        { status: 403, headers: { ...cors, 'Content-Type': 'application/json' } }
      );
    }

    // 3. Request-Body parsen
    const { url } = (await req.json()) as ExtractPremiumRequest;
    
    if (!url || typeof url !== 'string') {
      return new Response(
        JSON.stringify({ error: 'URL-Parameter fehlt' }),
        { status: 400, headers: { ...cors, 'Content-Type': 'application/json' } }
      );
    }

    // URL validieren
    try {
      const urlObj = new URL(url);
      if (!/^https?:$/.test(urlObj.protocol)) {
        throw new Error('Ungültiges Protokoll');
      }
    } catch {
      return new Response(
        JSON.stringify({ error: 'Ungültiges URL-Format' }),
        { status: 400, headers: { ...cors, 'Content-Type': 'application/json' } }
      );
    }

    // 4. Nutzungslimit prüfen
    const { allowed, usage, error: usageError } = await checkAndUpdateUsage(supabase, user.id, url);
    
    if (!allowed) {
      return new Response(
        JSON.stringify({ 
          error: usageError || 'Nutzungslimit erreicht',
          usage: usage ? {
            used: usage.used_count,
            limit: usage.limit_count,
            remaining: usage.remaining_count,
            resetsAt: usage.reset_at
          } : undefined
        }),
        { status: 429, headers: { ...cors, 'Content-Type': 'application/json' } }
      );
    }

    // 5. Firecrawl API aufrufen
    const firecrawlApiKey = process.env.FIRECRAWL_API_KEY;
    if (!firecrawlApiKey) {
      console.error('FIRECRAWL_API_KEY nicht konfiguriert');
      return new Response(
        JSON.stringify({ error: 'Premium-Extraktion nicht konfiguriert' }),
        { status: 500, headers: { ...cors, 'Content-Type': 'application/json' } }
      );
    }

    console.log('Rufe Firecrawl Scrape API auf für:', url);
    
    // Nutze Scrape API für synchrone Inhaltsextraktion
    const firecrawlResponse = await fetch('https://api.firecrawl.dev/v1/scrape', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${firecrawlApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: url,
        formats: ['markdown', 'html'],
        onlyMainContent: true,
        waitFor: 2000, // Warte auf JavaScript-Rendering
        removeBase64Images: true // Entferne Base64-Bilder für kleinere Payloads
      }),
    });

    if (!firecrawlResponse.ok) {
      const errorText = await firecrawlResponse.text();
      console.error('Firecrawl API Fehler:', firecrawlResponse.status, errorText);
      
      // Logge Fehler in Datenbank
      await supabase
        .from('extraction_usage')
        .update({ 
          success: false, 
          error_message: `Firecrawl API Fehler: ${firecrawlResponse.status}` 
        })
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(1);
      
      return new Response(
        JSON.stringify({ 
          error: 'Premium-Extraktion fehlgeschlagen',
          details: 'Die Webseite konnte nicht extrahiert werden. Bitte versuchen Sie es später erneut.'
        }),
        { status: 502, headers: { ...cors, 'Content-Type': 'application/json' } }
      );
    }

    const firecrawlData = await firecrawlResponse.json();

    // Scrape API Response Format:
    // {
    //   success: true,
    //   data: {
    //     markdown: "...",
    //     content: "...",
    //     html: "...",
    //     metadata: {
    //       title: "...",
    //       description: "...",
    //       ...
    //     }
    //   }
    // }

    console.log('Firecrawl Scrape API Response:', {
      success: firecrawlData?.success,
      hasData: !!firecrawlData?.data,
      hasMarkdown: !!firecrawlData?.data?.markdown,
      hasContent: !!firecrawlData?.data?.content,
      hasTitle: !!firecrawlData?.data?.metadata?.title
    });

    // Extrahiere die relevanten Daten aus der Scrape API Response
    const extractedData = {
      title: firecrawlData?.data?.metadata?.title || 
             firecrawlData?.data?.metadata?.ogTitle || 
             firecrawlData?.data?.metadata?.description ||
             'Kein Titel gefunden',
      content: firecrawlData?.data?.content || '',
      markdown: firecrawlData?.data?.markdown || '',
      metadata: firecrawlData?.data?.metadata || {}
    };
    
    // 6. Response formatieren
    const response: ExtractPremiumResponse = {
      title: extractedData.title,
      content: extractedData.content || extractedData.markdown || '',
      markdown: extractedData.markdown || extractedData.content,
      metadata: {
        sourceUrl: url,
        extractedAt: new Date().toISOString(),
        extractionType: 'firecrawl',
      },
      // Nutzung bereits in checkAndUpdateUsage erhöht; hier nicht nochmals inkrementieren
      usage: usage ? {
        used: usage.used_count,
        limit: usage.limit_count,
        remaining: usage.remaining_count,
        resetsAt: usage.reset_at,
      } : undefined,
    };

    return new Response(JSON.stringify(response), {
      status: 200,
      headers: { ...cors, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Premium-Extraction-Fehler:', error);
    
    return new Response(
      JSON.stringify({ 
        error: 'Interner Server-Fehler',
        details: 'Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.'
      }),
      { status: 500, headers: { ...cors, 'Content-Type': 'application/json' } }
    );
  }
}
</file>

<file path="src/pages/Landing.tsx">
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getSession, onAuthStateChange } from "@/api/supabase";
import HowItWorks from "@/components/graphics/HowItWorks";
import { DecorativeBackground } from "@/components/landing/DecorativeBackground";
import { HeaderBar } from "@/components/landing/HeaderBar";
import { HeroSection } from "@/components/landing/HeroSection";
import { FeaturesGrid } from "@/components/landing/FeaturesGrid";
import { PricingSection } from "@/components/landing/PricingSection";
import { FooterBar } from "@/components/landing/FooterBar";
import { CTASection } from "@/components/landing/CTASection";

export default function Landing() {
  const navigate = useNavigate();
  const [checking, setChecking] = useState(true);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    // Auto-redirect if already logged in
    getSession().then(({ data }) => {
      if (data.session) navigate("/app", { replace: true });
      else setChecking(false);
    });
    const { data: sub } = onAuthStateChange((_event, session) => {
      if (session) navigate("/app", { replace: true });
    });

    const timer = setTimeout(() => {
      setIsVisible(true);
    }, 300);

    return () => {
      sub?.subscription?.unsubscribe?.();
      clearTimeout(timer);
    };
  }, [navigate]);


  if (checking) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 overflow-hidden relative">
  <DecorativeBackground />

      <div className="relative z-10 container mx-auto px-4 py-8 flex flex-col min-h-screen">
    <HeaderBar isVisible={isVisible} onSignup={() => navigate("/signup")} />

        {/* Main content with staggered animations */}
        <main className="flex flex-col items-stretch py-8 lg:py-16">
          <div className="max-w-6xl w-full grid lg:grid-cols-2 items-start gap-10 lg:gap-16 mx-auto">
            {/* Left column: Marketing content with entrance animations */}
            <div className="space-y-8 flex flex-col justify-start">
      <HeroSection isVisible={isVisible} onSignup={() => navigate("/signup")} />
            </div>

            {/* Right column: Demo Video */}
            <div className="flex flex-col justify-start">
              <div className={`self-start mt-6 lg:mt-0 transition-all duration-700 delay-400 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'} order-first lg:order-none`}>
                {/* Demo Video with GIF-like behavior */}
                <div className="w-full rounded-2xl overflow-hidden shadow-2xl bg-gradient-to-br from-primary/5 to-accent/5">
                  <video 
                    className="w-full h-auto"
                    autoPlay
                    loop
                    muted
                    playsInline
                    preload="auto"
                  >
                    <source src="https://pw-bunny.b-cdn.net/Linkedin-Posts-Landing/First%20SaSS.mp4" type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                </div>
              </div>
            </div>
          </div>
          {/* Features grid below the hero+graphic section */}
          <div id="features" className="max-w-6xl w-full mx-auto mt-10 lg:mt-14">
            <div className="lg:hidden">
              <FeaturesGrid isVisible={isVisible} variant="mobile" />
            </div>
            <div className="hidden lg:block">
              <FeaturesGrid isVisible={isVisible} variant="desktop" />
            </div>
          </div>
        </main>
      </div>

      {/* How It Works Section - außerhalb des Containers für vollen Hintergrund */}
      <HowItWorks />

      {/* Pricing Section - außerhalb des Containers für vollen Hintergrund */}
      <PricingSection />

      {/* CTA Section - new section before footer */}
      <CTASection />

      {/* Footer Section - außerhalb des Containers für vollen Hintergrund */}
      <FooterBar />
    </div>
  );
}
</file>

<file path="src/pages/Generator.tsx">
import { useEffect, useState } from "react";
import { linkedInPostsFromNewsletter, xTweetsFromBlog, instagramPostsFromBlog, suggestTopicIdeasFromInputs } from "@/api/claude";
import { savePost } from "@/api/supabase";
import { SavedPosts } from "@/components/common/SavedPosts";
import {
  createLinkedInDraftPost,
  createLinkedInShareUrl,
  LinkedInAPIError,
} from "@/api/linkedin";
import { Button } from "@/components/ui/button";
import { Button as DSButton } from "@/design-system/components/Button";
import {
  SaveButton,
  EditButton,
  LinkedInShareButton,
  XShareButton,
  InstagramShareButton,
} from "@/design-system/components/ActionButtons";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { Loader2, Settings as SettingsIcon } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Auth } from "@/components/common/Auth";
import { getSession, onAuthStateChange, signOut } from "@/api/supabase";
import { Link, useSearchParams } from "react-router-dom";
import { PlatformSelector } from "@/components/common/PlatformSelector";
import type { Platform } from "@/config/platforms";
import { PLATFORM_LABEL } from "@/config/platforms";
import { InstagramLogo } from "@/design-system/components/Icons/InstagramLogo";
import { useUsageTracking } from "@/hooks/useUsageTracking";
import { PaywallModal } from "@/components/common/PaywallModal";
import { extractFromUrl } from "@/api/extract";

export default function Generator() {
  const [searchParams] = useSearchParams();
  const [inputText, setInputText] = useState("");
  const [postsByPlatform, setPostsByPlatform] = useState<Record<Platform, string[]>>({
    linkedin: [],
    x: [],
    instagram: [],
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isExtracting, setIsExtracting] = useState(false);
  const [refreshKey, setRefreshKey] = useState(0);
  const [editing, setEditing] = useState<{ platform: Platform; index: number } | null>(null);
  const [editedContent, setEditedContent] = useState("");
  const { toast } = useToast();
  const [userEmail, setUserEmail] = useState<string | null>(null);
  const [loginOpen, setLoginOpen] = useState(false);
  const [selectedPlatforms, setSelectedPlatforms] = useState<Platform[]>(["linkedin"]);
  const [showPaywall, setShowPaywall] = useState(false);
  const { canTransform, incrementUsage, getRemainingCount, isPro } = useUsageTracking();
  // Track sidebar collapsed state to adjust content padding
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [sourceUrl, setSourceUrl] = useState("");
  const [usePremiumExtraction, setUsePremiumExtraction] = useState(false);
  const [extractionUsage, setExtractionUsage] = useState<{ used: number; limit: number; remaining: number } | null>(null);
  // Progress tracking states
  const [generationProgress, setGenerationProgress] = useState(0); // 0-100
  const [currentPlatformGenerating, setCurrentPlatformGenerating] = useState<string>("");
  const [totalPlatforms, setTotalPlatforms] = useState(0);
  const [completedPlatforms, setCompletedPlatforms] = useState(0);
  // Idea generation from uploads
  const [ideaNotes, setIdeaNotes] = useState("");
  const [ideaTexts, setIdeaTexts] = useState<string[]>([]);
  const [ideaSuggestions, setIdeaSuggestions] = useState<string[]>([]);
  const [topicCount, setTopicCount] = useState<number>(7);
  const [isSuggesting, setIsSuggesting] = useState(false);
  const [ideaLinks, setIdeaLinks] = useState<string[]>([]);
  const [tabsValue, setTabsValue] = useState<"posts" | "ideas">("posts");

  // Dev API base: use VITE_DEV_API_TARGET if set; otherwise, when on localhost, fall back to deployed URL
  const DEV_DEFAULT_TARGET = 'https://linkedin-posts-ashen.vercel.app';
  const envTarget = import.meta.env?.VITE_DEV_API_TARGET as string | undefined;
  const apiBase = envTarget && envTarget.length > 0
    ? envTarget.replace(/\/$/, '')
    : (typeof window !== 'undefined' && /^(localhost|127\.0\.0\.1)/.test(window.location.hostname)
        ? DEV_DEFAULT_TARGET
        : '');

  useEffect(() => {
    getSession().then(({ data }) => {
      setUserEmail(data.session?.user.email ?? null);
    });
    const { data: sub } = onAuthStateChange((_event, session) => {
      setUserEmail(session?.user.email ?? null);
      if (session) setLoginOpen(false);
    });
    
    // Load saved style examples
    const savedStyles = window.localStorage.getItem('styleExamples');
    if (savedStyles) {
      setStyleExamples(savedStyles);
    }
    
    return () => {
      sub?.subscription?.unsubscribe?.();
    };
  }, []);

  const handleRemix = async () => {
    // Check usage limit
    if (!canTransform()) {
      setShowPaywall(true);
      return;
    }
    
    // Initialize progress tracking
    setIsLoading(true);
    setGenerationProgress(0);
    setCompletedPlatforms(0);
    setCurrentPlatformGenerating("");
    setTotalPlatforms(selectedPlatforms.length);
    
    try {
      const next: Record<Platform, string[]> = { linkedin: [], x: [], instagram: [] };
      const progressStep = 100 / selectedPlatforms.length;
      
      // Process each platform sequentially with progress updates
      for (let i = 0; i < selectedPlatforms.length; i++) {
        const platform = selectedPlatforms[i];
        setCurrentPlatformGenerating(PLATFORM_LABEL[platform]);
        
        if (platform === "linkedin") {
          next.linkedin = await linkedInPostsFromNewsletter(inputText);
        } else if (platform === "x") {
          // Nutze den exakten X-Prompt über Claude
          next.x = await xTweetsFromBlog(inputText);
        } else if (platform === "instagram") {
          // Nutze den speziellen Instagram-Prompt
          next.instagram = await instagramPostsFromBlog(inputText);
        }
        
        // Update progress
        const newCompleted = i + 1;
        setCompletedPlatforms(newCompleted);
        setGenerationProgress(newCompleted * progressStep);
      }
      
      setPostsByPlatform(next);
      const names = selectedPlatforms.join(", ");
      toast({ title: "Beiträge erstellt!", description: `Generiert für: ${names}` });
      
      // Reset progress states
      setCurrentPlatformGenerating("");
      
      // Increment usage after successful transformation
      incrementUsage();
    } catch (error) {
      console.error("Remix error:", error);
      toast({
        title: "Fehler beim Erstellen",
        description: "LinkedIn-Beiträge konnten nicht erstellt werden.",
        variant: "destructive",
      });
      // Reset progress states on error
      setGenerationProgress(0);
      setCompletedPlatforms(0);
      setCurrentPlatformGenerating("");
    } finally {
      setIsLoading(false);
    }
  };

  const handleExtract = async () => {
    if (!sourceUrl) return;
    
    // Check if trying to use premium without Pro
    if (usePremiumExtraction && !isPro) {
      setShowPaywall(true);
      return;
    }
    
    setIsExtracting(true);
    try {
      let result;
      
      if (usePremiumExtraction && isPro) {
        // Premium extraction with Firecrawl
        const { data: session } = await getSession();
        if (!session) throw new Error("Keine aktive Session");
        
        const response = await fetch("/api/extract-premium", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${session?.session?.access_token}`,
          },
          body: JSON.stringify({ url: sourceUrl }),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          if (data.usage) {
            setExtractionUsage(data.usage);
          }
          throw new Error(data.error || "Premium-Extraktion fehlgeschlagen");
        }
        
        result = {
          title: data.title,
          content: data.markdown || data.content || "",
        };
        
        // Update usage information
        if (data.usage) {
          setExtractionUsage(data.usage);
          toast({ 
            title: "Premium-Import erfolgreich ✨", 
            description: `${data.usage.remaining} von ${data.usage.limit} Premium-Extraktionen übrig diesen Monat`
          });
        } else {
          toast({ 
            title: "Premium-Import erfolgreich ✨", 
            description: data.title || "Inhalt wurde mit verbesserter Qualität importiert"
          });
        }
      } else {
        // Standard extraction with Jina
        result = await extractFromUrl(sourceUrl);
        toast({ title: "Inhalt importiert", description: result.title || sourceUrl });
      }
      
      const prefill = [result.title, result.content]
        .filter(Boolean)
        .join("\n\n");
      setInputText(prefill);
    } catch (e) {
      console.error("Extract error", e);
      toast({
        title: "Import fehlgeschlagen",
        description: e instanceof Error ? e.message : String(e),
        variant: "destructive",
      });
    } finally {
      setIsExtracting(false);
    }
  };

  const handleSavePost = async (content: string, platform: 'linkedin' | 'x' | 'instagram' = 'linkedin') => {
    if (!userEmail) {
      setLoginOpen(true);
      toast({
        title: "Login erforderlich",
        description: "Bitte logge dich ein, um Beiträge zu speichern.",
      });
      return;
    }
    try {
      await savePost(content, platform);
      setRefreshKey((prev) => prev + 1);
      toast({
  title: "Erfolgreich gespeichert",
  description: "Du findest den Beitrag in der Seitenleiste \"Gespeicherte Beiträge\".",
      });
    } catch (error) {
      console.error("Save post error:", error);
      toast({
        title: "Speichern fehlgeschlagen",
        description: `Fehler beim Speichern: ${
          error instanceof Error ? error.message : String(error)
        }`,
        variant: "destructive",
      });
    }
  };

  const handleStartEdit = (platform: Platform, index: number, content: string) => {
    setEditing({ platform, index });
    setEditedContent(content);
  };

  const handleCancelEdit = () => {
    setEditing(null);
    setEditedContent("");
  };

  const handleSaveEdit = () => {
    if (!editing) return;
    const { platform, index } = editing;
    const updated = { ...postsByPlatform };
    updated[platform] = [...updated[platform]];
    updated[platform][index] = editedContent;
    setPostsByPlatform(updated);
    setEditing(null);
    setEditedContent("");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-accent/5 to-secondary overflow-x-hidden">
      {/* Professional Header Bar */}
      <header className="sticky top-0 z-30 bg-background/95 backdrop-blur-sm border-b border-border/50">
        <div className="container mx-auto px-4 h-16 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h1 className="text-xl font-semibold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
              Social Transformer
            </h1>
          </div>
          
          <div className="flex items-center gap-4">
            {/* Mobile Settings button */}
            <Link to="/settings" className="md:hidden">
              <Button variant="ghost" size="sm" aria-label="Einstellungen">
                <SettingsIcon className="h-4 w-4" />
              </Button>
            </Link>
            <Link to="/settings" className="hidden md:block">
              <Button variant="ghost" size="sm">Einstellungen</Button>
            </Link>
            {userEmail ? (
              <div className="flex items-center gap-3">
                <Button variant="ghost" size="sm" onClick={() => signOut()}>
                  Logout
                </Button>
              </div>
            ) : (
              <Dialog open={loginOpen} onOpenChange={setLoginOpen}>
                <DialogTrigger asChild>
                  <Button variant="default" size="sm">Login</Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Einloggen</DialogTitle>
                  </DialogHeader>
                  <Auth />
                </DialogContent>
              </Dialog>
            )}
          </div>
        </div>
      </header>
      
  <div className="p-4 md:p-8 pt-6 md:pt-8">
  <div className={`max-w-4xl mx-auto space-y-8 ${isSidebarCollapsed ? 'md:pr-[3rem]' : 'md:pr-[22rem]'}`}>
          <div className="text-center space-y-4 pt-8">
          <h1 className="text-3xl md:text-5xl font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent">
            Vom Newsletter zu viralen Posts
          </h1>
          <p className="text-muted-foreground text-base md:text-lg">
            Mehr Sichtbarkeit aus vorhandenem Content
          </p>
          <Badge variant="secondary" className="text-xs md:text-sm">
            Powered by Claude AI ✨
          </Badge>
        </div>

        <Tabs value={tabsValue} onValueChange={(v) => setTabsValue(v as 'posts' | 'ideas' | 'workflow')} className="w-full">
          <TabsList className="w-full justify-start">
            <TabsTrigger value="posts">Posts erstellen</TabsTrigger>
            <TabsTrigger value="ideas">Themen‑Ideen</TabsTrigger>
          </TabsList>

          <TabsContent value="posts">
            <Card className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>Newsletter eingeben oder importieren</CardTitle>
                <CardDescription>
                  Füge deinen Newsletter-Text ein oder importiere ihn per URL, und wähle die Zielplattformen
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
            <div className="space-y-3">
              <div className="flex gap-2 flex-col md:flex-row">
                <input
                  type="url"
                  placeholder="https://example.com/dein-blogpost"
                  value={sourceUrl}
                  onChange={(e) => setSourceUrl(e.target.value)}
                  className="flex-1 h-10 px-3 rounded-md border bg-background"
                  aria-label="Quelle-URL"
                />
                <Button onClick={handleExtract} disabled={!sourceUrl || isExtracting} className="md:w-48">
                  {isExtracting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Importiere…
                    </>
                  ) : (
                    <>Von URL importieren</>
                  )}
                </Button>
              </div>
              
              {/* Premium extraction toggle - visible to all, but gated for free users */}
              <div className="flex items-center justify-between text-sm">
                <label className="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={usePremiumExtraction}
                    onChange={(e) => {
                      if (!isPro && e.target.checked) {
                        setShowPaywall(true);
                        return;
                      }
                      setUsePremiumExtraction(e.target.checked);
                    }}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-muted-foreground">
                    Premium-Extraktion
                    {!isPro ? (
                      <Badge variant="secondary" className="ml-2 text-xs">Pro</Badge>
                    ) : extractionUsage && (
                      <span className="ml-2 text-xs">
                        ({extractionUsage.remaining}/20 übrig)
                      </span>
                    )}
                  </span>
                </label>
                <span className="text-xs text-muted-foreground">
                  Bessere Qualität • JavaScript-Support
                </span>
              </div>
            </div>
            <Textarea
              placeholder="Newsletter hier einfügen..."
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              className="min-h-[12rem] text-base resize-none"
            />
            <div className="space-y-2">
              <PlatformSelector value={selectedPlatforms} onChange={setSelectedPlatforms} />
              {!isPro && (
                <div className="flex justify-center">
                  <Badge variant="outline" className="px-3 py-1">
                    {getRemainingCount() > 0 
                      ? `${getRemainingCount()} kostenlose Transformationen heute` 
                      : "Keine kostenlosen Transformationen mehr"}
                  </Badge>
                </div>
              )}
            </div>

            {/* Progress bar - only visible when generating */}
            {isLoading && (
              <div className="space-y-2">
                <Progress value={generationProgress} className="h-2" />
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>
                    {currentPlatformGenerating && `Erstelle ${currentPlatformGenerating}-Posts...`}
                  </span>
                  <span>
                    {completedPlatforms}/{totalPlatforms} Plattformen
                  </span>
                </div>
              </div>
            )}

            <Button
              onClick={handleRemix}
              disabled={isLoading || !inputText || selectedPlatforms.length === 0}
              size="lg"
              className="w-full text-lg h-12 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  {generationProgress > 0 
                    ? `${Math.round(generationProgress)}% - ${currentPlatformGenerating}`
                    : "Initialisiere..."}
                </>
              ) : (
                <>✨ Transformieren</>
              )}
            </Button>
          </CardContent>
        </Card>
          </TabsContent>

          <TabsContent value="ideas">
            <Card className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>Themen-Ideen aus Uploads (Beta)</CardTitle>
                <CardDescription>
                  Lade Bild/Text-Dokumente hoch (bis 20MB/Datei) oder füge unten Notizen ein. Wir schlagen dir prägnante Themen-Ideen vor.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Input
                    id="idea-files"
                    type="file"
                    multiple
                    accept="image/png,image/jpeg,image/webp,text/plain,text/markdown,.txt,.md,application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,audio/mpeg,audio/wav,audio/mp4,audio/aac,audio/ogg"
                    onChange={async (e) => {
                      const files = Array.from(e.target.files || []);
                      if (!files.length) return;
                      const addedTexts: string[] = [];
                      let usedApi = 0;
                  for (const f of files) {
                    if (f.size > 20 * 1024 * 1024) {
                          toast({ title: "Datei zu groß", description: `${f.name} überschreitet 20MB`, variant: "destructive" });
                          continue;
                        }
                        const type = (f.type || '').toLowerCase();
                        try {
                          const isText = type.startsWith('text/') || /\.(txt|md)$/i.test(f.name);
                          const needsApi = type.startsWith('image/') || type.startsWith('audio/') || type === 'application/pdf' || /\.(pdf|docx)$/i.test(f.name);
                          if (isText && !needsApi) {
                            const t = (await f.text()).trim();
                            if (t) addedTexts.push(t);
                          } else {
                        const form = new FormData();
                        form.append('file', f, f.name);
                        const url = apiBase ? `${apiBase}/api/extract-file` : '/api/extract-file';
                        const resp = await fetch(url, { method: 'POST', body: form, redirect: 'follow' as RequestRedirect });
                        if (!resp.ok) {
                          let msg = '';
                          try {
                            const j = await resp.json();
                            msg = j?.error || '';
                          } catch { /* noop */ }
                          if (!msg) {
                            try { msg = await resp.text(); } catch { /* noop */ }
                          }
                          throw new Error(msg || `${resp.status} ${resp.statusText}`);
                        }
                        const data = await resp.json();
                        if (data?.text) {
                          addedTexts.push(String(data.text));
                          usedApi++;
                        }
                        if (data?.meta?.links?.length) {
                          setIdeaLinks((prev) => {
                            const set = new Set(prev);
                            for (const l of data.meta.links as string[]) set.add(l);
                            return Array.from(set).slice(0, 200);
                          });
                        }
                      }
                    } catch (err) {
                      console.error('upload extract error', err);
                      const msg = err instanceof Error && err.message ? `: ${err.message.slice(0, 180)}` : '';
                      toast({ title: "Extraktion fehlgeschlagen", description: `${f.name}${msg}` , variant: "destructive" });
                    }
                  }
                  if (addedTexts.length) setIdeaTexts(prev => [...prev, ...addedTexts]);
                  if (!addedTexts.length) return;
                  toast({ title: "Uploads verarbeitet", description: `${addedTexts.length} Textquelle(n) ${usedApi ? `(via API: ${usedApi})` : ''}` });
                  e.currentTarget.value = '';
                }}
              />
              <p className="text-xs text-muted-foreground">Unterstützt: PNG/JPG/WEBP, PDF/DOCX, TXT/MD, Audio (mp3/wav/aac/ogg). Max 20MB/Datei.</p>
            </div>
            {/* Links aus Uploads / Studien */}
            {!!ideaLinks.length && (
              <div className="space-y-2">
                <div className="text-sm font-medium">Gefundene Links / Studien</div>
                <div className="max-h-48 overflow-auto rounded-md border divide-y">
                  {ideaLinks.slice(0, 50).map((link, i) => (
                    <div key={i} className="p-2 text-xs flex items-center gap-2">
                      <span className="truncate flex-1" title={link}>{link}</span>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setSourceUrl(link);
                          setTabsValue("posts");
                        }}
                      >
                        Übernehmen
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            )}
            {/* Manuelles Einfügen von Links */}
            <div className="space-y-2">
              <Textarea
                placeholder="Optional: Mehrere Links (je Zeile eine URL) einfügen…"
                className="min-h-[6rem]"
                onBlur={(e) => {
                  const lines = e.target.value.split(/\n+/).map(s => s.trim()).filter(Boolean);
                  if (!lines.length) return;
                  setIdeaLinks(prev => Array.from(new Set([...prev, ...lines])));
                  e.target.value = '';
                  toast({ title: "Links hinzugefügt", description: `${lines.length} Link(s) gespeichert.` });
                }}
              />
            </div>
            <div className="space-y-2">
              <Textarea
                placeholder="Kurz einfügen: Worüber willst du posten? Was gefällt dir am Stil? (optional)"
                value={ideaNotes}
                onChange={(e) => setIdeaNotes(e.target.value)}
                className="min-h-[8rem]"
              />
            </div>
                <div className="flex flex-wrap gap-2 text-xs text-muted-foreground">
                  {!!ideaTexts.length && <span>{ideaTexts.length} Text-Quelle(n)</span>}
                </div>
                <div className="flex gap-2">
                  <Button
                    disabled={isSuggesting || (!ideaNotes && ideaTexts.length === 0)}
                    onClick={async () => {
                      setIsSuggesting(true);
                      try {
                    const ideas = await suggestTopicIdeasFromInputs({ userNotes: ideaNotes, texts: ideaTexts });
                        setIdeaSuggestions(ideas);
                        if (!ideas.length) {
                          toast({ title: "Keine Ideen", description: "Bitte mehr Kontext/Text hinzufügen." });
                        }
                      } catch (e) {
                        console.error(e);
                        toast({ title: "Fehler", description: "Ideen konnten nicht generiert werden.", variant: "destructive" });
                      } finally {
                        setIsSuggesting(false);
                      }
                    }}
                    className="md:w-56"
                  >
                    {isSuggesting ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analysiere…</>) : (<>Themen-Ideen generieren</>)}
                  </Button>
                  {!!ideaSuggestions.length && (
                    <Button
                      variant="outline"
                      onClick={() => {
                        const joined = ideaSuggestions.slice(0, 3).map((s, i) => `${i+1}. ${s}`).join("\n");
                        setInputText(prev => [joined, prev].filter(Boolean).join("\n\n"));
                        toast({ title: "Übernommen", description: "Top-Ideen zum Eingabetext hinzugefügt." });
                      }}
                    >
                      Top‑Ideen übernehmen
                    </Button>
                  )}
                </div>
                {!!ideaSuggestions.length && (
                  <div className="bg-muted/40 rounded-md p-3 text-sm whitespace-pre-wrap">
                    {ideaSuggestions.map((s) => `• ${s}`).join("\n")}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

                      />
                      <p className="text-xs text-muted-foreground">
                        Unterstützt: Bilder, PDFs, Dokumente, Audio-Dateien
                      </p>
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Oder URL eingeben</label>
                      <div className="flex gap-2">
                        <Input
                          placeholder="https://..."
                          value={sourceUrl}
                          onChange={(e) => setSourceUrl(e.target.value)}
                        />
                        <Button
                          onClick={async () => {
                            if (!sourceUrl.trim()) return;
                            setIsExtracting(true);
                            try {
                              const result = await extractFromUrl(sourceUrl);
                              const content = [result.title, result.content].filter(Boolean).join("\n\n");
                              setInputText(content);
                              toast({ title: "Inhalt importiert", description: result.title || sourceUrl });
                            } catch (e) {
                              console.error("Extract error", e);
                              toast({
                                title: "Import fehlgeschlagen",
                                description: e instanceof Error ? e.message : String(e),
                                variant: "destructive",
                              });
                            } finally {
                              setIsExtracting(false);
                            }
                          }}
                          disabled={isExtracting || !sourceUrl.trim()}
                        >
                          {isExtracting ? <Loader2 className="h-4 w-4 animate-spin" /> : "Extrahieren"}
                        </Button>
                      </div>
                    </div>
                    
                    {uploadedFiles.length > 0 && (
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Hochgeladene Dateien ({uploadedFiles.length})</label>
                        <div className="max-h-48 overflow-auto rounded-md border divide-y">
                          {uploadedFiles.map((file, i) => (
                            <div key={i} className="p-2 flex items-center justify-between hover:bg-muted/50">
                              <div className="flex-1 min-w-0">
                                <p className="text-sm font-medium truncate">{file.name}</p>
                                <p className="text-xs text-muted-foreground">
                                  {(file.size / 1024).toFixed(1)} KB • {file.type.split('/')[0] || 'text'}
                                  {file.text && ` • ${file.text.slice(0, 50)}...`}
                                </p>
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => {
                                  setUploadedFiles(prev => prev.filter((_, idx) => idx !== i));
                                  setIdeaTexts(prev => {
                                    const newTexts = [...prev];
                                    newTexts.splice(i, 1);
                                    return newTexts;
                                  });
                                  toast({ title: "Datei entfernt", description: file.name });
                                }}
                              >
                                ✕
                              </Button>
                            </div>
                          ))}
                        </div>
                        <p className="text-xs text-muted-foreground">
                          {ideaTexts.length} Textquelle(n) bereit für Themenextraktion
                        </p>
                      </div>
                    )}
                  </div>
                ),
                topics: (
                  <div className="space-y-4">
                    {/* Context info */}
                    {(ideaTexts.length > 0 || uploadedFiles.length > 0) && (
                      <div className="p-3 bg-muted/50 rounded-md">
                        <p className="text-sm font-medium mb-1">Verfügbare Quellen</p>
                        <p className="text-xs text-muted-foreground">
                          {uploadedFiles.length} Datei(en) hochgeladen • {ideaTexts.length} Textquelle(n) extrahiert
                        </p>
                      </div>
                    )}
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Zusätzlicher Kontext</label>
                      <Textarea
                        placeholder="Beschreibe deine Zielgruppe, gewünschte Themen oder spezielle Anforderungen..."
                        value={ideaNotes}
                        onChange={(e) => setIdeaNotes(e.target.value)}
                        className="min-h-[100px]"
                      />
                    </div>
                    
                    <div className="flex items-center gap-4">
                      <div className="flex-1">
                        <label className="text-sm font-medium">Anzahl Themen</label>
                        <div className="flex items-center gap-2 mt-1">
                          <Input
                            type="number"
                            min="3"
                            max="15"
                            value={topicCount}
                            onChange={(e) => setTopicCount(Math.min(15, Math.max(3, parseInt(e.target.value) || 7)))}
                            className="w-20"
                          />
                          <span className="text-sm text-muted-foreground">Ideen generieren</span>
                        </div>
                      </div>
                    </div>
                    
                    <Button
                      onClick={async () => {
                        if (!ideaNotes && ideaTexts.length === 0) {
                          toast({ 
                            title: "Keine Quellen verfügbar", 
                            description: "Bitte lade erst Dateien hoch oder füge Notizen hinzu.",
                            variant: "destructive" 
                          });
                          return;
                        }
                        
                        setIsSuggesting(true);
                        try {
                          const ideas = await suggestTopicIdeasFromInputs({ 
                            userNotes: ideaNotes, 
                            texts: ideaTexts 
                          });
                          setIdeaSuggestions(ideas.slice(0, topicCount));
                          if (!ideas.length) {
                            toast({ 
                              title: "Keine Ideen generiert", 
                              description: "Bitte mehr Kontext oder andere Dateien hinzufügen." 
                            });
                          } else {
                            toast({ 
                              title: "Themen erfolgreich generiert", 
                              description: `${ideas.length} Themen-Ideen erstellt` 
                            });
                          }
                        } catch (e) {
                          console.error('Topic generation error:', e);
                          const errorMsg = e instanceof Error ? e.message : 'Unbekannter Fehler';
                          toast({ 
                            title: "Fehler bei der Themengenerierung", 
                            description: errorMsg.slice(0, 100), 
                            variant: "destructive" 
                          });
                        } finally {
                          setIsSuggesting(false);
                        }
                      }}
                      disabled={isSuggesting || (!ideaNotes && ideaTexts.length === 0)}
                      className="w-full"
                    >
                      {isSuggesting ? (
                        <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analysiere...</>
                      ) : (
                        <>Themen-Ideen generieren</>
                      )}
                    </Button>
                    
                    {ideaSuggestions.length > 0 && (
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <p className="text-sm font-medium">Generierte Themen ({ideaSuggestions.length})</p>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => {
                              setIsSuggesting(true);
                              // Regenerate with same parameters
                              suggestTopicIdeasFromInputs({ 
                                userNotes: ideaNotes, 
                                texts: ideaTexts 
                              }).then(ideas => {
                                setIdeaSuggestions(ideas.slice(0, topicCount));
                                toast({ title: "Neue Themen generiert" });
                              }).finally(() => setIsSuggesting(false));
                            }}
                            disabled={isSuggesting}
                          >
                            Neu generieren
                          </Button>
                        </div>
                        <div className="bg-muted/40 rounded-md p-3 text-sm space-y-2">
                          {ideaSuggestions.map((s, i) => (
                            <div key={i} className="flex items-start gap-2 group hover:bg-background/50 p-1 rounded">
                              <span className="text-muted-foreground">{i + 1}.</span>
                              <span className="flex-1">{s}</span>
                              <Button
                                variant="ghost"
                                size="sm"
                                className="opacity-0 group-hover:opacity-100 transition-opacity h-6 px-2"
                                onClick={() => {
                                  setInputText(prev => prev ? `${prev}\n\n${i+1}. ${s}` : `${i+1}. ${s}`);
                                  toast({ title: "Thema hinzugefügt", description: `"${s.slice(0, 50)}..."` });
                                }}
                              >
                                +
                              </Button>
                            </div>
                          ))}
                        </div>
                        <div className="flex gap-2">
                          <Button
                            variant="outline"
                            onClick={() => {
                              const joined = ideaSuggestions.slice(0, 3).map((s, i) => `${i+1}. ${s}`).join("\n");
                              setInputText(prev => [joined, prev].filter(Boolean).join("\n\n"));
                              toast({ title: "Übernommen", description: "Top-3 Themen zum Eingabetext hinzugefügt." });
                            }}
                          >
                            Top-3 übernehmen
                          </Button>
                          <Button
                            variant="outline"
                            onClick={() => {
                              const allJoined = ideaSuggestions.map((s, i) => `${i+1}. ${s}`).join("\n");
                              setInputText(allJoined);
                              toast({ title: "Alle übernommen", description: `${ideaSuggestions.length} Themen als Eingabetext gesetzt.` });
                            }}
                          >
                            Alle verwenden
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                ),
                style: (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Schreibstil wählen</label>
                      <div className="grid grid-cols-2 gap-2">
                        {[
                          { id: 'professional', label: '📚 Professionell', desc: 'Sachlich und strukturiert' },
                          { id: 'casual', label: '💬 Casual', desc: 'Locker und persönlich' },
                          { id: 'storytelling', label: '📖 Storytelling', desc: 'Erzählerisch und emotional' },
                          { id: 'direct', label: '🎯 Direkt', desc: 'Klar und auf den Punkt' }
                        ].map((style) => (
                          <Button
                            key={style.id}
                            variant={selectedStyle === style.id ? "default" : "outline"}
                            className="justify-start h-auto py-3 px-4"
                            onClick={() => setSelectedStyle(style.id)}
                          >
                            <div className="text-left">
                              <div>{style.label}</div>
                              <div className="text-xs text-muted-foreground font-normal">{style.desc}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Eigene Stil-Beispiele</label>
                      <Textarea
                        placeholder="Füge hier Beispiel-Posts ein, die deinem gewünschten Stil entsprechen..."
                        className="min-h-[150px]"
                        value={styleExamples}
                        onChange={(e) => {
                          setStyleExamples(e.target.value);
                          window.localStorage.setItem('styleExamples', e.target.value);
                        }}
                      />
                      <p className="text-xs text-muted-foreground">
                        Diese Beispiele werden als Stil-Referenz für die KI verwendet
                      </p>
                    </div>
                    
                    {styleExamples && (
                      <div className="p-3 bg-muted/50 rounded-md">
                        <p className="text-xs font-medium mb-1">Stil-Referenz gespeichert</p>
                        <p className="text-xs text-muted-foreground">
                          {styleExamples.split('\n').length} Zeile(n) • {styleExamples.length} Zeichen
                        </p>
                      </div>
                    )}
                  </div>
                ),
                generate: (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Eingabetext</label>
                      <Textarea
                        placeholder="Newsletter, Blogpost oder eigener Text..."
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                        className="min-h-[200px]"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Plattformen</label>
                      <PlatformSelector
                        value={selectedPlatforms}
                        onChange={setSelectedPlatforms}
                      />
                    </div>
                    
                    <Button
                      onClick={handleRemix}
                      disabled={isLoading || !inputText.trim() || selectedPlatforms.length === 0}
                      className="w-full"
                    >
                      {isLoading ? (
                        <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generiere...</>
                      ) : (
                        <>Posts generieren</>
                      )}
                    </Button>
                    
                    {generationProgress > 0 && generationProgress < 100 && (
                      <div className="space-y-2">
                        <Progress value={generationProgress} />
                        <p className="text-xs text-center text-muted-foreground">
                          {currentPlatformGenerating && `Generiere ${currentPlatformGenerating}...`}
                        </p>
                      </div>
                    )}
                  </div>
                ),
                review: (
                  <div className="space-y-4">
                    {Object.entries(postsByPlatform).map(([platform, posts]) => 
                      posts.length > 0 && (
                        <Card key={platform}>
                          <CardHeader>
                            <CardTitle className="text-base">
                              {PLATFORM_LABEL[platform as Platform]} Posts
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            {posts.map((post, index) => (
                              <div key={index} className="p-3 bg-muted rounded-md">
                                <pre className="whitespace-pre-wrap text-sm">{post}</pre>
                                <div className="flex gap-2 mt-2">
                                  <SaveButton
                                    onClick={async () => {
                                      if (!userEmail) {
                                        setLoginOpen(true);
                                        return;
                                      }
                                      try {
                                        await savePost(post, platform as Platform);
                                        toast({ title: "Gespeichert" });
                                        setRefreshKey(Date.now());
                                      } catch (error) {
                                        console.error(error);
                                        toast({ title: "Fehler beim Speichern", variant: "destructive" });
                                      }
                                    }}
                                  />
                                  {platform === "linkedin" && <LinkedInShareButton text={post} />}
                                  {platform === "x" && <XShareButton text={post} />}
                                  {platform === "instagram" && <InstagramShareButton />}
                                </div>
                              </div>
                            ))}
                          </CardContent>
                        </Card>
                      )
                    )}
                    
                    {Object.values(postsByPlatform).every(posts => posts.length === 0) && (
                      <div className="text-center py-8 text-muted-foreground">
                        Noch keine Posts generiert. Gehe zurück zum "Posts generieren" Schritt.
                      </div>
                    )}
                  </div>
                )
              }}
            />
          </TabsContent>
        </Tabs>
        
  {/* Extra spacing for mobile to prevent content being covered by bottom drawer + safe area */}
  <div className="md:hidden" style={{ height: 'calc(4rem + env(safe-area-inset-bottom))' }} aria-hidden="true" />
        {(["linkedin", "x", "instagram"] as Platform[]).map((platform) => {
          const items = postsByPlatform[platform] || [];
          if (items.length === 0) return null;
          return (
            <Card key={platform} className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>{PLATFORM_LABEL[platform]} – {items.length} Beiträge</CardTitle>
                <CardDescription>Plattformspezifische Vorschau und Bearbeitung</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 gap-6">
                  {items.map((post, index) => (
                    <Card key={index} className="border-muted/50 hover:shadow-lg transition-all duration-200 hover:border-primary/20">
                      <CardContent className="p-6">
                        {editing?.platform === platform && editing?.index === index ? (
                          <div className="space-y-4">
                            <Textarea
                              value={editedContent}
                              onChange={(e) => setEditedContent(e.target.value)}
                              className="min-h-[8rem]"
                            />
                            <div className="flex justify-end gap-2">
                              <DSButton variant="ghost" size="sm" onClick={handleCancelEdit}>
                                Abbrechen
                              </DSButton>
                              <SaveButton size="sm" onClick={handleSaveEdit} />
                            </div>
                          </div>
                        ) : (
                          <>
                            <p className="text-foreground whitespace-pre-wrap leading-relaxed mb-4">{post}</p>
                            <div className="flex justify-between items-center pt-4 border-t border-muted/30">
                              <Badge variant="outline" className="text-xs flex items-center gap-1.5">
                                {platform === "instagram" && <InstagramLogo size={12} />}
                                {PLATFORM_LABEL[platform]} · Post #{index + 1}
                              </Badge>
                              <div className="flex gap-2">
                                <EditButton
                                  size="sm"
                                  onClick={() => handleStartEdit(platform, index, post)}
                                  text=""
                                  title="Beitrag bearbeiten"
                                />
                                <SaveButton size="sm" onClick={() => handleSavePost(post, platform)} text="" title="Beitrag speichern" />
                                {platform === "linkedin" && (
                                  <LinkedInShareButton
                                    size="sm"
                                    text=""
                                    onClick={async () => {
                                      try {
                                        const accessToken = import.meta.env.VITE_LINKEDIN_ACCESS_TOKEN;
                                        const authorUrn = import.meta.env.VITE_LINKEDIN_AUTHOR_URN;
                                        if (accessToken && authorUrn) {
                                          const result = await createLinkedInDraftPost(post, { accessToken, authorUrn });
                                          window.open(result.draftUrl, "_blank");
                                          toast({ title: "LinkedIn Draft erstellt! 🚀", description: "Der Draft wurde erfolgreich erstellt." });
                                        } else {
                                          const linkedinUrl = createLinkedInShareUrl(post);
                                          window.open(linkedinUrl, "_blank");
                                        }
                                      } catch (error) {
                                        console.error("LinkedIn Draft Error:", error);
                                        if (error instanceof LinkedInAPIError) {
                                          toast({ title: "LinkedIn API Fehler", description: error.message, variant: "destructive" });
                                        } else {
                                          const linkedinUrl = createLinkedInShareUrl(post);
                                          window.open(linkedinUrl, "_blank");
                                        }
                                      }
                                    }}
                                    title="Auf LinkedIn teilen"
                                  />
                                )}
                                {platform === "x" && (
                                  <XShareButton
                                    size="sm"
                                    text=""
                                    tweetContent={post}
                                    title="Auf X teilen"
                                  />
                                )}
                                {platform === "instagram" && (
                                  <InstagramShareButton
                                    size="sm"
                                    text=""
                                    postContent={post}
                                    title="Auf Instagram teilen"
                                  />
                                )}
                              </div>
                            </div>
                          </>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          );
        })}
        </div>
      </div>
      
      <SavedPosts
        onCollapse={setIsSidebarCollapsed}
        refreshKey={refreshKey}
        isAuthenticated={!!userEmail}
        onLoginClick={() => setLoginOpen(true)}
        initialExpanded={searchParams.get('expand') === 'saved'}
      />
      
      <PaywallModal 
        open={showPaywall} 
        onOpenChange={setShowPaywall} 
      />
    </div>
  );
}
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

Social Transformer - A React-based SaaS application that transforms newsletters and blog posts into platform-optimized social media content for LinkedIn, X (Twitter), and Instagram using Claude AI. Features a Stripe-powered Beta Lifetime Deal (49€) with subscription management.

## Development Commands

```bash
npm install        # Install dependencies
npm run dev        # Development server (http://localhost:5173)
npm run build      # TypeScript check + production build
npm run lint       # ESLint code quality check
npm run preview    # Preview production build
```

## Environment Setup

Create `.env` from `.env.example` with:
- `VITE_CLAUDE_API_KEY` - Anthropic Claude API key (not actually used client-side, kept for compatibility)
- `VITE_SUPABASE_URL` - Supabase project URL
- `VITE_SUPABASE_ANON_KEY` - Supabase anon key
- `VITE_STRIPE_PAYMENT_LINK` - Stripe payment link URL
- `VITE_LINKEDIN_ACCESS_TOKEN` (optional) - LinkedIn API token with w_member_social
- `VITE_LINKEDIN_AUTHOR_URN` (optional) - LinkedIn author URN
- `VITE_OPIK_API_KEY` (optional) - Opik tracking API key

**Production (Vercel) requires additional:**
- `CLAUDE_API_KEY` - Server-side Claude API key (without VITE_ prefix)
- `STRIPE_WEBHOOK_SECRET` - Stripe webhook secret for payment processing  
- `SUPABASE_SERVICE_ROLE_KEY` - Required for webhook to bypass RLS and save payment data
- `FIRECRAWL_API_KEY` - Firecrawl API key for premium content extraction (Pro users only)

## Architecture

### Tech Stack
- **Frontend**: React 18 + TypeScript + Vite
- **Styling**: TailwindCSS with custom design system
- **Database**: Supabase (PostgreSQL with RLS)
- **AI**: Anthropic Claude API via Edge Function proxy
- **Payments**: Stripe (webhooks + payment links)
- **Deployment**: Vercel with Edge Functions

### Key Routes
- `/` - Landing page (public)
- `/signup` - Authentication
- `/app` - Post generator (protected via ProtectedRoute)
- `/settings` - User settings (protected)

### API Endpoints (Edge Functions)
- `/api/claude/v1/messages` - Claude AI proxy (keeps API key server-side)
- `/api/extract` - Standard content extraction (Jina Reader, free)
- `/api/extract-premium` - Premium extraction (Firecrawl, Pro only, 20/month limit)
- `/api/stripe-webhook` - Payment processing

### Database Schema

**`saved_posts` table:**
- `id` (uuid, primary key)
- `user_id` (uuid, references auth.users)
- `content` (text)
- `platform` (text: 'linkedin', 'x', 'instagram')
- `created_at` (timestamptz)

**`subscriptions` table:**
- `id` (uuid, primary key)
- `user_id` (uuid, references auth.users)
- `stripe_customer_id` (text)
- `stripe_subscription_id` (text)
- `stripe_payment_intent_id` (text)
- `status` (text: 'trial', 'active', 'canceled', 'past_due')
- `is_active` (boolean, generated)
- `amount` (integer)
- `currency` (text)
- `interval` (text)
- `current_period_start/end` (timestamptz)
- `trial_starts_at/ends_at` (timestamptz)
- `created_at/updated_at` (timestamptz)
- `extraction_limit` (integer, default: 20) - Monthly limit for premium extractions
- `extraction_reset_at` (timestamptz) - When the monthly limit resets

**`extraction_usage` table:**
- `id` (uuid, primary key)
- `user_id` (uuid, references auth.users)
- `extraction_type` (text: 'jina' or 'firecrawl')
- `url` (text)
- `extracted_at` (timestamptz)
- `success` (boolean)
- `error_message` (text)
- `metadata` (jsonb)
- `created_at` (timestamptz)

### Project Structure
- `/api/` - Vercel Edge Functions (Claude proxy, webhooks, extraction)
- `/src/api/` - Client-side API integrations
- `/src/components/` - React components
- `/src/design-system/` - Custom design tokens and action buttons
- `/src/pages/` - Route components (Landing, Generator, SignUp)
- `/src/config/` - Platform configurations
- **Path Alias**: `@/` → `/src/`

## Content Generation Flow

1. User inputs text in Generator component
2. Platform-specific function called (e.g., `linkedInPostsFromNewsletter`, `xTweetsFromBlog`)
3. Request sent to Edge Function proxy at `/api/claude/v1/messages`
4. Edge Function adds API key and forwards to Anthropic
5. Response parsed for platform-specific format
6. Posts displayed and can be saved to Supabase

### Platform-specific Generation
- **LinkedIn**: Uses custom German prompt with specific formatting rules (short sentences, line breaks, no hashtags/emojis)
- **X (Twitter)**: Complex German prompt with blog analysis, tweet extraction, and sanitization (280 char limit, no emojis/hashtags)
- **Instagram**: Adapts LinkedIn posts with hashtags, max 2200 characters

## Important Conventions

1. **German UI Text**: Interface text is in German (e.g., "Speichern", "Bearbeiten", "Löschen")
2. **Platform Types**: Use the `Platform` type from `/src/config/platforms.ts`
3. **Button Components**: Always use design system buttons from `/src/design-system/components/ActionButtons/`
4. **Error Handling**: Use toast notifications for user feedback
5. **Auth Flow**: All `/app` routes require authentication via ProtectedRoute component
6. **API Security**: Never expose API keys client-side; use Edge Function proxy pattern
7. **Post Format Parsing**: 
   - LinkedIn: Posts prefixed with `LINKEDIN:` 
   - X: Tweets extracted from XML tags `<tweet1>` through `<tweet5>`
   - Instagram: Adapted from LinkedIn posts with hashtags

## Subscription & Payment Flow

1. **Paywall Protection**: Use `PaywallGuard` component to protect premium features
2. **Subscription Check**: `useSubscription` hook fetches user's subscription status
3. **Payment Processing**: 
   - Stripe Payment Link configured in env vars
   - Webhook handler at `/api/stripe-webhook` processes payments
   - Creates/updates subscription records in Supabase
4. **Beta Lifetime Deal**: 49€ one-time payment, no expiration date

## Stripe Testing

Use test mode credentials during development:
- Test card: `4242 4242 4242 4242`
- Payment link already configured in env vars
- Webhook endpoint: `/api/stripe-webhook`
- Local testing: Use Stripe CLI with `stripe listen --forward-to localhost:3000/api/stripe-webhook`

## URL Content Extraction

### Standard Extraction (Free)
- **Endpoint**: `/api/extract` - Uses Jina Reader API
- Unlimited usage for all users

### Premium Extraction (Pro only)
- **Endpoint**: `/api/extract-premium` - Uses Firecrawl Scrape API  
- JavaScript rendering support for dynamic content
- Limited to 20 extractions/month per user
- Tracks usage in `extraction_usage` table

## Code Quality Checks

Before committing or deploying:
- **TypeScript**: Run `npm run build` to catch type errors (uses project references)
- **Linting**: Run `npm run lint` to check code style
- **Unused code**: Remove or prefix unused parameters with underscore (`_param`)
- **Development server**: Runs on port 5173 (http://localhost:5173)

**Note**: No testing framework is currently configured. Consider adding Vitest or Jest for unit tests.


## Database Notes

- All migrations have been applied and `/supabase/migrations/` was removed
- RLS policies are enabled for all tables
- `get_monthly_extraction_usage` RPC function tracks premium usage

**PostgreSQL Tip**: When adding multiple columns, each needs its own `ADD COLUMN`:
```sql
ALTER TABLE public.subscriptions
  ADD COLUMN IF NOT EXISTS column1 text,
  ADD COLUMN IF NOT EXISTS column2 text;
```

## Common Debugging Scenarios

### Subscription Not Recognized
- Verify Stripe webhook is processing payments correctly
- Check `subscriptions` table for user's subscription status
- Ensure `SUPABASE_SERVICE_ROLE_KEY` is set for webhook RLS bypass
- Check browser console for subscription fetch errors

### Content Not Extracting
- For standard extraction: Check if Jina API is accessible
- For premium: Verify Firecrawl API key is set in environment variables
- Check CORS headers in Edge Function responses
- Verify authentication token is being passed correctly
</file>

</files>
