This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src, api, supabase
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
api/
  claude/
    v1/
      messages.ts
  stripe/
    create-checkout.ts
    create-portal.ts
  extract-file.ts
  extract-premium.ts
  extract.ts
  stripe-webhook-simplified.ts
  test-email.ts
src/
  api/
    claude.ts
    extract-premium.ts
    extract.ts
    linkedin.ts
    supabase.ts
  components/
    common/
      AccountButton.tsx
      Auth.tsx
      ButtonCheckout.tsx
      ExtractButton.tsx
      PaywallGuard.tsx
      PlatformSelector.tsx
      ProtectedRoute.tsx
      SavedPosts.tsx
      UpgradeButton.tsx
    graphics/
      ContentFlowGraphic.tsx
      HowItWorks.tsx
      HowItWorksGraphic.tsx
    landing/
      CTASection.tsx
      DecorativeBackground.tsx
      FAQSection.tsx
      FeaturesGrid.tsx
      FooterBar.tsx
      HeaderBar.tsx
      HeaderBarSignUp.tsx
      HeroSection.tsx
      PricingSection.tsx
    optimized/
      MemoizedCard.tsx
    subscription/
      CustomerPortalButton.tsx
      SubscriptionStatus.tsx
    ui/
      alert-dialog.tsx
      badge.tsx
      button.tsx
      card.tsx
      dialog.tsx
      input.tsx
      label.tsx
      progress.tsx
      tabs.tsx
      textarea.tsx
    Logo.tsx
  config/
    app.config.ts
    env.config.ts
    index.ts
    linkedin-style-examples.md
    platforms.ts
    README.md
  design-system/
    components/
      ActionButtons/
        DeleteButton.tsx
        EditButton.tsx
        index.ts
        InstagramShareButton.tsx
        LinkedInShareButton.tsx
        SaveButton.tsx
        XShareButton.tsx
      Icons/
        InstagramLogo.tsx
        XLogo.tsx
    tokens/
      colors.ts
      spacing.ts
      typography.ts
    BUTTON_GUIDELINES.md
    typography-hierarchy.ts
  hooks/
    use-toast.ts
    useAuth.ts
    useContentGeneration.ts
    useDebounce.ts
    useIntersectionObserver.ts
    usePostEditing.ts
    useSubscription.ts
    useTypewriter.ts
    useUrlExtraction.ts
  lib/
    utils.ts
  libs/
    api-client.ts
    README.md
    stripe.ts
  pages/
    Generator.tsx
    Generator.tsx.backup
    Imprint.tsx
    Landing.tsx
    Privacy.tsx
    Settings.tsx
    SignUp.tsx
    Terms.tsx
    Terms.tsx.backup
  styles/
    animations.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
supabase/
  migrations/
    000_create_subscriptions_table.sql
    001_create_generation_usage_table.sql
    002_extend_subscriptions_table.sql
    003_create_pending_subscriptions.sql
    004_add_is_active_column.sql
    005_rollback_is_active_column.sql
    MANUAL_cleanup_usage_tables.sql
  config.toml
  seed.sql
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/api/linkedin.ts">
// LinkedIn API Integration für Draft Posts
interface LinkedInPostRequest {
  author: string;
  commentary: string;
  visibility: 'PUBLIC' | 'CONNECTIONS' | 'LOGGED_IN_MEMBERS';
  distribution: {
    feedDistribution: 'MAIN_FEED' | 'NONE';
    targetEntities?: string[];
    thirdPartyDistributionChannels?: string[];
  };
  lifecycleState: 'PUBLISHED' | 'DRAFT';
  isReshareDisabledByAuthor: boolean;
}
interface LinkedInApiConfig {
  accessToken: string;
  authorUrn: string; // e.g., "urn:li:person:YOUR_ID" or "urn:li:organization:YOUR_ORG_ID"
}
⋮----
authorUrn: string; // e.g., "urn:li:person:YOUR_ID" or "urn:li:organization:YOUR_ORG_ID"
⋮----
export class LinkedInAPIError extends Error
⋮----
constructor(message: string, public statusCode?: number)
⋮----
export async function createLinkedInDraftPost(
  content: string, 
  config: LinkedInApiConfig
): Promise<
⋮----
// Extract Post ID from response headers
⋮----
// Generate LinkedIn Draft URL
⋮----
// Alternative: LinkedIn Share Dialog für bessere UX ohne API-Keys
export function createLinkedInShareUrl(content: string): string
⋮----
// Moderne LinkedIn Share Dialog URL
⋮----
// LinkedIn akzeptiert noch immer den 'text' Parameter im Share Dialog
⋮----
// Hilfsfunktion um LinkedIn Profile/Organization URN zu erstellen
export function createLinkedInUrn(type: 'person' | 'organization', id: string): string
</file>

<file path="src/components/ui/alert-dialog.tsx">
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
</file>

<file path="src/components/ui/badge.tsx">
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
⋮----
export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}
⋮----
<div className=
</file>

<file path="src/components/ui/card.tsx">
import { cn } from "@/lib/utils"
⋮----
className=
⋮----
<div ref=
</file>

<file path="src/components/ui/dialog.tsx">
import { X } from "lucide-react"
import { cn } from "@/lib/utils"
⋮----
className=
</file>

<file path="src/components/ui/input.tsx">
import { cn } from "@/lib/utils"
⋮----
className=
</file>

<file path="src/components/ui/label.tsx">
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
</file>

<file path="src/components/ui/progress.tsx">
import { cn } from "@/lib/utils"
⋮----
className=
</file>

<file path="src/components/ui/tabs.tsx">
import { cn } from "@/lib/utils"
</file>

<file path="src/components/ui/textarea.tsx">
import { cn } from "@/lib/utils"
⋮----
className=
</file>

<file path="src/design-system/BUTTON_GUIDELINES.md">
# Button Guidelines

## Übersicht

Dieses Dokument beschreibt die Verwendung von Buttons in der LinkedIn Posts Anwendung. Alle Buttons folgen einem konsistenten Design-System für eine einheitliche User Experience.

## Button Varianten

### 1. Primary (Lila)
- **Farbe**: #8B5CF6
- **Verwendung**: Hauptaktionen wie "Speichern", "Erstellen", "Bestätigen"
- **Beispiel**: SaveButton für das Speichern von Beiträgen

### 2. Secondary (Grau)
- **Farbe**: #6B7280
- **Verwendung**: Sekundäre Aktionen wie "Bearbeiten", "Optionen"
- **Beispiel**: EditButton für das Bearbeiten von Beiträgen

### 3. LinkedIn (Blau)
- **Farbe**: #0077B5 (offizielles LinkedIn-Blau)
- **Verwendung**: Ausschließlich für LinkedIn-bezogene Aktionen
- **Beispiel**: LinkedInShareButton für das Teilen auf LinkedIn

### 4. Destructive (Rot)
- **Farbe**: #EF4444
- **Verwendung**: Lösch-Aktionen oder gefährliche Operationen
- **Beispiel**: DeleteButton für das Löschen von Beiträgen

### 5. Ghost
- **Farbe**: Transparent mit grauem Text
- **Verwendung**: Tertiäre Aktionen, "Abbrechen", weniger wichtige Aktionen

### 6. Outline
- **Farbe**: Transparenter Hintergrund mit Rahmen
- **Verwendung**: Alternative zu Ghost für mehr Betonung

## Button Größen

- **Small (sm)**: Für kompakte Bereiche und Icon-Buttons
- **Medium (md)**: Standard-Größe für die meisten Aktionen
- **Large (lg)**: Für primäre CTAs und wichtige Aktionen

## Best Practices

### 1. Konsistente Aktions-Buttons verwenden
```tsx
// ✅ Gut - Verwende vordefinierte Action Buttons
import { SaveButton, EditButton } from '@/design-system/components/ActionButtons'

<SaveButton onClick={handleSave} />
<EditButton onClick={handleEdit} />

// ❌ Vermeiden - Eigene Button-Implementierungen
<button className="bg-purple-600">Speichern</button>
```

### 2. Konsistente Button-Texte
- **Speichern**: Immer "Speichern" (nicht "Save", "Sichern", etc.)
- **Bearbeiten**: Immer "Bearbeiten" (nicht "Edit", "Ändern", etc.)
- **Löschen**: Immer "Löschen" (nicht "Delete", "Entfernen", etc.)
- **Abbrechen**: Immer "Abbrechen" (nicht "Cancel", "Zurück", etc.)

### 3. Icon-Verwendung
- Icons links vom Text positionieren
- Konsistente Icon-Größe verwenden (16px für sm/md, 20px für lg)
- Lucide React Icons verwenden für Konsistenz

### 4. Loading States
```tsx
<SaveButton isLoading={isLoading} />
// Zeigt automatisch einen Spinner und "Loading..." Text
```

### 5. Disabled States
- Buttons deaktivieren während Loading oder wenn Aktion nicht verfügbar
- Opacity wird automatisch auf 50% reduziert

## Beispiele

### Formular mit Aktions-Buttons
```tsx
<div className="flex justify-end gap-2">
  <Button variant="ghost" onClick={handleCancel}>
    Abbrechen
  </Button>
  <SaveButton onClick={handleSave} isLoading={isSaving} />
</div>
```

### Post-Aktionen
```tsx
<div className="flex gap-2">
  <EditButton size="sm" onClick={handleEdit} />
  <SaveButton size="sm" onClick={handleSave} text="" />
  <LinkedInShareButton size="sm" postContent={content} />
  <DeleteButton size="sm" onClick={handleDelete} />
</div>
```

### Primäre CTA
```tsx
<Button 
  variant="primary" 
  size="lg" 
  fullWidth
  onClick={handleCreate}
>
  ✨ LinkedIn-Beiträge erstellen
</Button>
```

## Farb-Referenz

```typescript
// Immer Design Tokens verwenden
import { colors } from '@/design-system/tokens/colors'

// Primary: colors.primary.DEFAULT (#8B5CF6)
// LinkedIn: colors.linkedin.DEFAULT (#0077B5)
// Secondary: colors.secondary.DEFAULT (#6B7280)
// Destructive: colors.destructive.DEFAULT (#EF4444)
```

## Migration bestehender Buttons

Wenn Sie bestehende HTML-Buttons oder inkonsistente Button-Implementierungen finden:

1. Identifizieren Sie die Aktion (Speichern, Bearbeiten, etc.)
2. Wählen Sie die passende vordefinierte Komponente
3. Ersetzen Sie den alten Button mit der Design-System Komponente
4. Testen Sie die Funktionalität

## Wartung

- Neue Button-Varianten nur nach Absprache hinzufügen
- Änderungen an Farben nur in den Design Tokens vornehmen
- Bei neuen Features prüfen, ob existierende Buttons wiederverwendet werden können
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[])
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
body {
@layer base {
⋮----
:root {
.dark {
⋮----
* {
⋮----
@apply border-border;
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="supabase/config.toml">
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "remixer"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: './seeds/*.sql'
sql_paths = ['./seed.sql']

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"
</file>

<file path="supabase/seed.sql">
CREATE TABLE saved_tweets (id BIGSERIAL PRIMARY KEY, content TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT NOW());
</file>

<file path="api/stripe/create-portal.ts">
import { createClient } from '@supabase/supabase-js';
⋮----
// Initialize Supabase with anon key for auth validation
⋮----
// Initialize Supabase with service role for database queries
⋮----
interface RequestBody {
  returnUrl: string;
}
interface SubscriptionRow {
  id: string;
  stripe_customer_id: string;
}
export default async function handler(req: Request)
⋮----
// Validate authentication
⋮----
// Get user from auth token
⋮----
// Parse request body
⋮----
// Get user's subscription with customerId
⋮----
// Initialize Stripe
⋮----
// Create Stripe Customer Portal session
</file>

<file path="api/extract-file.ts">
// Vercel Function: File extraction (PDF/DOCX/Images OCR/Audio) → unified text
// Uses hosted providers so end users need no local setup.
// Providers (env-configured):
// - Unstructured API for documents/images OCR: UNSTRUCTURED_API_KEY, UNSTRUCTURED_API_URL (optional)
// - Deepgram for audio speech-to-text: DEEPGRAM_API_KEY
⋮----
const MAX_BYTES = 20 * 1024 * 1024; // 20MB
function getEnv(name: string): string | undefined
⋮----
// Environment variables not accessible
⋮----
function chooseDocProvider()
function chooseAudioProvider()
type UnstructuredElement = { text?: string; type?: string };
type ExtractResult = { text: string; title?: string; meta: Record<string, unknown> };
async function extractWithUnstructured(file: File): Promise<ExtractResult>
⋮----
// Optional: languages hint e.g., 'deu'
// form.append('ocr_languages', 'deu');
⋮----
// data is typically an array of elements
⋮----
async function transcribeWithDeepgram(file: File): Promise<
⋮----
body: (file as Blob).stream ? (file as Blob).stream() : file, // Edge supports Blob.stream()
⋮----
function pickKind(file: File): 'audio' | 'pdf' | 'docx' | 'image' | 'text' | 'unknown'
export default async function handler(req: Request)
⋮----
// Route documents and images to Unstructured (unknown tries anyway)
⋮----
// Extract links from text for convenience (HTTP/HTTPS only)
⋮----
.replace(/[)\]}>,.;:]+$/g, '') // trim trailing punctuation
.replace(/^\((.*)\)$/g, '$1'); // trim wrapping parens
⋮----
// Invalid URL format, skip this link
⋮----
} catch { /* noop */ }
</file>

<file path="api/test-email.ts">
export default async function handler(req: Request)
</file>

<file path="src/api/extract-premium.ts">
// Frontend API Client für Premium Content-Extraktion mit Firecrawl
// Nutzt die /api/extract-premium Edge Function
import { supabase } from './supabase';
export type ExtractPremiumResult = {
  title?: string;
  content: string;
  markdown?: string;
  html?: string;
  screenshot?: string;
  metadata?: {
    sourceUrl: string;
    extractedAt: string;
    extractionType: 'firecrawl';
  };
  usage?: {
    used: number;
    limit: number;
    remaining: number;
    resetsAt: string;
  };
};
export type ExtractUsageInfo = {
  used: number;
  limit: number;
  remaining: number;
  resetsAt: Date;
  isAtLimit: boolean;
};
// Basis-URL für API-Aufrufe
function apiBase()
⋮----
// Nutze gleiche Origin während lokaler Entwicklung/Preview
⋮----
/**
 * Extrahiert Premium-Content von einer URL mit Firecrawl
 * Limitiert auf 20 Extraktionen pro Monat für Premium-Nutzer
 */
export async function extractPremiumFromUrl(url: string): Promise<ExtractPremiumResult>
⋮----
// Hole aktuellen Auth-Token
⋮----
// Spezielle Fehlerbehandlung für verschiedene Status-Codes
⋮----
/**
 * Holt die aktuelle Nutzungsstatistik für Premium-Extraktionen
 */
export async function getExtractionUsage(): Promise<ExtractUsageInfo | null>
/**
 * Prüft ob der Nutzer Premium-Extraktionen nutzen kann
 */
export async function canUsePremiumExtraction(): Promise<boolean>
⋮----
// Prüfe Subscription-Status
⋮----
// Prüfe Nutzungslimit
⋮----
/**
 * Wählt automatisch die beste Extraktionsmethode basierend auf Nutzer-Status
 */
export async function smartExtract(url: string): Promise<
⋮----
// Versuche Premium-Extraktion
⋮----
// Fallback auf kostenlose Version
⋮----
// Nutze kostenlose Jina-Extraktion als Fallback
</file>

<file path="src/api/extract.ts">
export type ExtractResult = {
  title?: string;
  byline?: string | null;
  excerpt?: string | null;
  content: string; // plain text
  length?: number;
  siteName?: string | null;
};
⋮----
content: string; // plain text
⋮----
// Resolve base URL for API when running locally vs deployed
function apiBase()
⋮----
// Use same origin during local dev/preview. In production, replace with your domain if needed.
⋮----
export async function extractFromUrl(url: string): Promise<ExtractResult>
</file>

<file path="src/components/common/ButtonCheckout.tsx">
import { useState } from 'react'
import { toast } from 'sonner'
import { Loader2, Zap } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { useAuth } from '@/hooks/useAuth'
import { getSupabaseClient } from '@/api/supabase'
interface ButtonCheckoutProps {
  priceId: string
  mode?: 'payment' | 'subscription'
  className?: string
  children?: React.ReactNode
  variant?: 'default' | 'outline' | 'secondary'
}
⋮----
// ShipFast-inspired checkout button
// Automatically handles authentication state and creates Stripe checkout sessions
⋮----
const handleCheckout = async () =>
⋮----
// Prepare request headers
⋮----
// Add auth token if user is logged in
⋮----
// Redirect to Stripe checkout
</file>

<file path="src/components/common/PlatformSelector.tsx">
import type { Platform } from "@/config/platforms";
import { PLATFORM_LABEL, ALL_PLATFORMS } from "@/config/platforms";
import { Badge } from "@/components/ui/badge";
type Props = {
  value: Platform[];
  onChange: (p: Platform[]) => void;
};
⋮----
const toggle = (p: Platform) =>
</file>

<file path="src/components/graphics/ContentFlowGraphic.tsx">
export default function ContentFlowGraphic()
⋮----
{/* Simple background decoration */}
⋮----
{/* Mobile: Vertical flow, Desktop: Horizontal flow */}
⋮----
{/* 1. Newsletter Input */}
⋮----
{/* Arrow for mobile, hidden on desktop */}
⋮----
{/* Arrow for desktop, hidden on mobile */}
⋮----
{/* 2. Claude AI - Smaller on mobile */}
⋮----
{/* Arrow for mobile */}
⋮----
{/* Arrow for desktop */}
⋮----
{/* 3. Social Media Output */}
⋮----
{/* Platform icons - smaller and in a row */}
⋮----
{/* LinkedIn */}
⋮----
{/* X/Twitter */}
⋮----
{/* Instagram */}
</file>

<file path="src/components/landing/HeaderBarSignUp.tsx">
import { Button } from "@/components/ui/button";
import { Logo } from "@/components/Logo";
import { ArrowLeft } from "lucide-react";
type HeaderBarSignUpProps = {
  isVisible: boolean;
  onBack: () => void;
};
export function HeaderBarSignUp(
</file>

<file path="src/components/optimized/MemoizedCard.tsx">
import React from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
interface MemoizedCardProps {
  title: string;
  description?: string;
  children: React.ReactNode;
  className?: string;
}
</file>

<file path="src/components/subscription/CustomerPortalButton.tsx">
import { useState } from 'react';
import { useSubscription } from '../../hooks/useSubscription';
import { Button } from '../ui/button';
import { ExternalLink, Loader2 } from 'lucide-react';
interface CustomerPortalButtonProps {
  className?: string;
  children?: React.ReactNode;
}
⋮----
const handleOpenPortal = async () =>
⋮----
// Error is already handled by the hook
⋮----
// Don't render if no active subscription
</file>

<file path="src/components/ui/button.tsx">
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { Loader2 } from "lucide-react"
import { cn } from "@/lib/utils"
⋮----
// Additional variants to match design system
⋮----
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
  isLoading?: boolean
  leftIcon?: React.ReactNode
  rightIcon?: React.ReactNode
  fullWidth?: boolean
}
⋮----
className=
</file>

<file path="src/components/Logo.tsx">
interface LogoProps {
  className?: string;
  showText?: boolean;
  textClassName?: string;
}
⋮----
{/* Clean refresh/transform icon */}
</file>

<file path="src/config/index.ts">
/**
 * Configuration Module Exports
 * Centralized access to all configuration utilities
 */
// Main app configuration
⋮----
// Environment configuration
⋮----
// Platform configuration
</file>

<file path="src/config/linkedin-style-examples.md">
# LinkedIn Stil-Beispiele

Füge hier kurze Beispiele von LinkedIn-Posts ein, deren Stil dir gefällt.
Diese Beispiele werden als Stil-Referenz in die Prompting-Logik injiziert,
um Ton, Hook, Satzlänge und Struktur zu imitieren – die strikten Regeln
für Formatierung bleiben dennoch erhalten.

Hinweise:
- 3–8 Beispiele sind ideal; halte sie prägnant.
- Entferne Emojis/Hashtags, wenn sie nicht Teil deines gewünschten Stils sind.
- Trenne Beispiele klar, z. B. mit `---`.

---

Beispiel 1:
LINKEDIN:
Der eine Satz, der alles ändert.

Du denkst, du brauchst mehr Zeit.

Du brauchst Klarheit.

Klarheit kommt durch Tun.

Kleinstes nächstes Experiment. Heute.

Was ist es?

---

Beispiel 2:
LINKEDIN:
Produktivität ist kein Tool-Problem.

Es ist ein Energie-Problem.

3 Dinge, die meine Energie retten:
- Schlaf wie ein Ritual.
- Meetings halbieren.
- Not-to-do-Liste.

Was streichst du diese Woche?

---

Beispiel 3 (User-Beispiel):
LINKEDIN:
Was würdest du dafür geben, deine Ziele mit 95 % Wahrscheinlichkeit zu erreichen?

Eine Studie von Harkin et al. (2016) zeigt: 
Regelmäßige Unterstützung macht genau das möglich.

Ich habe diese 4 Prinzipien in mein NLP-Accountability Coaching integriert:

--

1️⃣ Verantwortlichkeit: Soziale Verbindungen sind der Schlüssel zu intrinsischer Motivation. 

2️⃣ Präzision: Klare Ziele und Zwischenziele schaffen Fokus und Selbstkontrolle. 

3️⃣ Messbarkeit: Fortschritte zu messen hält dich motiviert und steigert deine Leistung. 

4️⃣ Zeitliche Struktur: Wer seine Zeit gut strukturiert, erzielt doppelt so gute Ergebnisse.

--

Studien inspirieren, Taten transformieren.

Wie wirst du ein Prinzip auf dein Leben anwenden? 

Folge mir für Produktivitätshacks, die dich weiterbringen. 🚀
</file>

<file path="src/config/platforms.ts">
export type Platform = "linkedin" | "x" | "instagram";
</file>

<file path="src/config/README.md">
# Configuration System

Ship Fast-inspired central configuration system for Social Transformer, providing type-safe, maintainable app configuration.

## Structure

### `app.config.ts`
**Central App Configuration**
- Stripe plan definitions with pricing and features
- Feature flags for different app capabilities
- App metadata and branding
- URL configuration
- Limits and quotas
- Theme settings

**Key Functions:**
```typescript
import { getStripePlan, formatPrice, isFeatureEnabled } from '@/config/app.config';

// Get specific plan
const lifetimePlan = getStripePlan('lifetime');

// Format pricing in German locale
const price = formatPrice(99); // "99,00 €"

// Check feature availability
const hasPremiumExtraction = isFeatureEnabled('premiumExtraction');
```

### `env.config.ts`
**Environment Variable Management**
- Type-safe environment variable access
- Client and server-side validation
- Configuration helpers for different services
- Environment-specific settings

**Key Functions:**
```typescript
import { env, getSupabaseConfig, isDevelopment } from '@/config/env.config';

// Type-safe environment access
const apiKey = env.get('VITE_CLAUDE_API_KEY');

// Service-specific configuration
const supabase = env.supabase;

// Environment checks
if (env.isDev) {
  console.log('Development mode');
}
```

### `platforms.ts` 
**Platform Definitions**
- TypeScript types for supported platforms
- Platform labels and constants
- All platforms array

### `index.ts`
**Centralized Exports**
- Single import point for all configuration
- Clean, organized exports
- Type definitions

## Usage Examples

### Component Configuration
```typescript
import config, { getDefaultStripePlan, formatPrice } from '@/config';

export function PricingComponent() {
  const { plans } = config.stripe;
  const defaultPlan = getDefaultStripePlan();
  
  return (
    <div>
      <h2>{config.appName}</h2>
      <p>Starting at {formatPrice(defaultPlan.price)}</p>
      {plans.map(plan => (
        <PlanCard key={plan.id} plan={plan} />
      ))}
    </div>
  );
}
```

### Environment Validation
```typescript
import { env } from '@/config';

// Validate on app startup
try {
  env.init(); // Throws if required vars missing
  console.log('✅ Environment validation passed');
} catch (error) {
  console.error('❌ Environment validation failed:', error);
}
```

### Feature Flags
```typescript
import { isFeatureEnabled } from '@/config';

function AdvancedFeature() {
  if (!isFeatureEnabled('premiumExtraction')) {
    return <PaywallModal />;
  }
  
  return <PremiumExtractionUI />;
}
```

## Benefits

### 1. **Maintainability**
- Single source of truth for all app configuration
- Type-safe configuration access prevents runtime errors
- Easy to update pricing, features, and settings in one place

### 2. **Developer Experience**
- IntelliSense support for all configuration options
- Clear documentation and JSDoc comments
- Validation with helpful error messages

### 3. **Ship Fast Pattern**
- Follows Ship Fast's excellent configuration structure
- Proven pattern for SaaS applications
- Easy to extend and modify

### 4. **German Localization**
- Built-in German currency formatting
- Proper locale handling for pricing
- German app descriptions and metadata

## Environment Variables

The system validates these environment variables:

**Required (Client):**
- `VITE_SUPABASE_URL`
- `VITE_SUPABASE_ANON_KEY`

**Required (Server):**
- `CLAUDE_API_KEY`
- `STRIPE_WEBHOOK_SECRET`
- `SUPABASE_SERVICE_ROLE_KEY`

**Recommended:**
- `VITE_STRIPE_PAYMENT_LINK_LIFETIME`
- `VITE_STRIPE_PAYMENT_LINK_MONTHLY`
- `FIRECRAWL_API_KEY`

## Migration from Scattered Config

Old pattern:
```typescript
// Scattered throughout components
const paymentLink = import.meta.env.VITE_STRIPE_PAYMENT_LINK;
const price = new Intl.NumberFormat('de-DE', { 
  style: 'currency', 
  currency: 'EUR' 
}).format(99);
```

New pattern:
```typescript
// Central configuration
import { getDefaultStripePlan, formatPrice } from '@/config';

const plan = getDefaultStripePlan();
const price = formatPrice(plan.price);
```

## Future Enhancements

- [ ] A/B testing configuration
- [ ] Multi-language support expansion
- [ ] Dynamic configuration updates
- [ ] Configuration management UI
- [ ] Environment-specific feature flags

The configuration system provides a solid foundation for scaling Social Transformer while maintaining code quality and developer productivity.
</file>

<file path="src/design-system/components/ActionButtons/DeleteButton.tsx">
import React from 'react'
import { Trash2 } from 'lucide-react'
import { Button, ButtonProps } from '@/components/ui/button'
interface DeleteButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
}
export const DeleteButton: React.FC<DeleteButtonProps> = ({ 
  text = 'Löschen',
  ...props 
}) =>
</file>

<file path="src/design-system/components/ActionButtons/EditButton.tsx">
import React from 'react'
import { Edit2 } from 'lucide-react'
import { Button, ButtonProps } from '@/components/ui/button'
interface EditButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
}
export const EditButton: React.FC<EditButtonProps> = ({ 
  text = 'Bearbeiten',
  ...props 
}) =>
</file>

<file path="src/design-system/components/ActionButtons/LinkedInShareButton.tsx">
import React from 'react'
import { Linkedin } from 'lucide-react'
import { Button, ButtonProps } from '@/components/ui/button'
interface LinkedInShareButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
  postContent?: string
}
export const LinkedInShareButton: React.FC<LinkedInShareButtonProps> = ({ 
  text = 'Auf LinkedIn teilen',
  postContent = '',
  onClick,
  ...props 
}) =>
⋮----
const handleLinkedInShare = (e: React.MouseEvent<HTMLButtonElement>) =>
</file>

<file path="src/design-system/components/ActionButtons/SaveButton.tsx">
import React from 'react'
import { Save } from 'lucide-react'
import { Button, ButtonProps } from '@/components/ui/button'
interface SaveButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
}
export const SaveButton: React.FC<SaveButtonProps> = ({ 
  text = 'Speichern',
  ...props 
}) =>
</file>

<file path="src/design-system/components/Icons/XLogo.tsx">
import React from 'react'
type XLogoProps = {
  size?: number
  className?: string
}
// Simple X/Twitter-inspired logo rendered in solid color (uses currentColor)
⋮----
{/* White X shape; use currentColor so parent can control (we pass text-white) */}
</file>

<file path="src/design-system/tokens/colors.ts">
// Primary colors - angepasst an aktuelles Theme (Violett)
⋮----
DEFAULT: 'hsl(262 83% 58%)', // Hauptfarbe aus CSS-Variablen
⋮----
// Accent colors - angepasst an aktuelles Theme (Blau)
⋮----
DEFAULT: 'hsl(217 91% 60%)', // Akzentfarbe aus CSS-Variablen
⋮----
// Claude AI brand color - bestehend aus ContentFlowGraphic
⋮----
DEFAULT: '#D97757', // Claude AI Markenfarbe
⋮----
// LinkedIn brand color
⋮----
DEFAULT: '#0A66C2', // LinkedIn Blau
⋮----
// Secondary colors - angepasst an shadcn/ui
⋮----
DEFAULT: 'hsl(210 40% 96%)', // Sekundäre Hintergrundfarbe
⋮----
// Muted colors - für weniger wichtige Elemente
⋮----
// Destructive colors
⋮----
DEFAULT: 'hsl(0 84.2% 60.2%)', // Rot für Lösch-Aktionen
⋮----
// Base colors - angepasst an CSS-Variablen
⋮----
DEFAULT: 'hsl(210 40% 98%)', // Haupthintergrund
secondary: 'hsl(210 40% 96%)', // Sekundärer Hintergrund
tertiary: 'hsl(210 40% 94%)', // Tertiärer Hintergrund
⋮----
DEFAULT: 'hsl(222.2 84% 4.9%)', // Haupttext
muted: 'hsl(215.4 16.3% 46.9%)', // Gedämpfter Text
⋮----
// Border colors
⋮----
// Card colors
⋮----
// Dark mode support
⋮----
export type Colors = typeof colors
</file>

<file path="src/design-system/tokens/spacing.ts">
// Base spacing scale - erweitert für bessere Flexibilität
⋮----
0.5: '0.125rem',  // 2px
1: '0.25rem',     // 4px
1.5: '0.375rem',  // 6px
2: '0.5rem',      // 8px
2.5: '0.625rem',  // 10px
3: '0.75rem',     // 12px
3.5: '0.875rem',  // 14px
4: '1rem',        // 16px
5: '1.25rem',     // 20px
6: '1.5rem',      // 24px
7: '1.75rem',     // 28px
8: '2rem',        // 32px
9: '2.25rem',     // 36px
10: '2.5rem',     // 40px
11: '2.75rem',    // 44px
12: '3rem',       // 48px
14: '3.5rem',     // 56px
16: '4rem',       // 64px
20: '5rem',       // 80px
24: '6rem',       // 96px
28: '7rem',       // 112px
32: '8rem',       // 128px
36: '9rem',       // 144px
40: '10rem',      // 160px
44: '11rem',      // 176px
48: '12rem',      // 192px
52: '13rem',      // 208px
56: '14rem',      // 224px
60: '15rem',      // 240px
64: '16rem',      // 256px
72: '18rem',      // 288px
80: '20rem',      // 320px
96: '24rem',      // 384px
// Component-specific spacing - angepasst an shadcn/ui
⋮----
sm: '0.75rem',   // 12px
md: '1rem',      // 16px
lg: '1.5rem',    // 24px
xl: '2rem',      // 32px
⋮----
sm: '0.375rem',  // 6px
md: '0.5rem',    // 8px
lg: '0.625rem',  // 10px
xl: '0.75rem',   // 12px
⋮----
gap: '0.5rem',     // 8px - space between icon and text
⋮----
// Card spacing
⋮----
sm: '1rem',      // 16px
md: '1.5rem',    // 24px
lg: '2rem',      // 32px
xl: '3rem',      // 48px
⋮----
gap: '1rem',       // 16px - space between card elements
⋮----
// Section spacing für Landing Page
⋮----
sm: '3rem',      // 48px
md: '5rem',      // 80px
lg: '6rem',      // 96px
xl: '8rem',      // 128px
⋮----
gap: '2rem',       // 32px - space between sections
⋮----
// Border radius - angepasst an CSS-Variable --radius
⋮----
sm: 'calc(var(--radius) - 4px)',    // ca. 8px
DEFAULT: 'calc(var(--radius) - 2px)', // ca. 10px
md: 'var(--radius)',                 // 12px (0.75rem)
lg: 'calc(var(--radius) + 2px)',    // ca. 14px
xl: 'calc(var(--radius) + 4px)',    // ca. 16px
'2xl': 'calc(var(--radius) + 8px)', // ca. 20px
'3xl': 'calc(var(--radius) + 12px)', // ca. 24px
⋮----
export type Spacing = typeof spacing
</file>

<file path="src/design-system/tokens/typography.ts">
// Font families - angepasst an aktuelles System
⋮----
// Font sizes - erweitert für bessere Hierarchie
⋮----
xs: '0.75rem',      // 12px
sm: '0.875rem',     // 14px
base: '1rem',       // 16px
lg: '1.125rem',     // 18px
xl: '1.25rem',      // 20px
'2xl': '1.5rem',    // 24px
'3xl': '1.875rem',  // 30px
'4xl': '2.25rem',   // 36px
'5xl': '3rem',      // 48px
'6xl': '3.75rem',   // 60px
'7xl': '4.5rem',    // 72px
'8xl': '6rem',      // 96px
'9xl': '8rem',      // 128px
⋮----
// Font weights - erweitert
⋮----
// Line heights - angepasst an moderne Standards
⋮----
tight: '1.25',      // Für Headlines
snug: '1.375',      // Für Subheadlines
normal: '1.5',      // Standard für Body Text
relaxed: '1.625',   // Für längere Texte
loose: '2',         // Für sehr lockere Texte
3: '0.75rem',       // 12px
4: '1rem',          // 16px
5: '1.25rem',       // 20px
6: '1.5rem',        // 24px
7: '1.75rem',       // 28px
8: '2rem',          // 32px
9: '2.25rem',       // 36px
10: '2.5rem',       // 40px
⋮----
// Letter spacing - erweitert
⋮----
// Text decoration
⋮----
// Text transform
⋮----
export type Typography = typeof typography
</file>

<file path="src/design-system/typography-hierarchy.ts">
// Einheitliche Typografie-Hierarchie für die Landing Page
// Angepasst an das aktuelle shadcn/ui Design System und CSS-Variablen
⋮----
// Hauptüberschriften (Hero Section) - responsiv und modern
⋮----
// Sektionsüberschriften (HowItWorks, Pricing, etc.)
⋮----
// Subsektionsüberschriften (Feature Cards, etc.)
⋮----
// Kleinere Überschriften (Card Titles, etc.)
⋮----
// Sehr kleine Überschriften
⋮----
// Body Text Größen - erweitert und responsiv
⋮----
// Spezielle Text-Typen - erweitert
⋮----
// Farben für verschiedene Text-Hierarchien - angepasst an CSS-Variablen
⋮----
primary: "text-foreground", // Haupttext (hsl(222.2 84% 4.9%))
secondary: "text-muted-foreground", // Beschreibungen (hsl(215.4 16.3% 46.9%))
accent: "text-primary", // Hervorhebungen (hsl(262 83% 58%))
muted: "text-muted-foreground/70", // Weniger wichtige Texte
inverse: "text-primary-foreground", // Text auf farbigen Hintergründen
success: "text-green-600 dark:text-green-400", // Erfolg
warning: "text-amber-600 dark:text-amber-400", // Warnung
danger: "text-destructive", // Fehler/Gefahr
claude: "text-[#D97757]", // Claude AI Markenfarbe
linkedin: "text-[#0A66C2]", // LinkedIn Markenfarbe
⋮----
// Utility-Klassen für verschiedene Anwendungsfälle
⋮----
// Gradient Text
⋮----
// Responsive Text Centering
⋮----
// Text Wrapping
textBalance: "text-wrap balance", // Für bessere Zeilenumbrüche
⋮----
// Interactive States
⋮----
export type TypographyHierarchy = typeof typographyHierarchy
</file>

<file path="src/hooks/useAuth.ts">
import { useEffect, useState } from 'react'
import { getSession, onAuthStateChange } from '@/api/supabase'
import { toast } from 'sonner'
import { useSearchParams } from 'react-router-dom'
export const useAuth = () =>
⋮----
// Show welcome toast once when redirected after signup confirmation
⋮----
// ignore storage errors (private mode etc.)
⋮----
// Clean query param without adding a new history entry
</file>

<file path="src/hooks/useDebounce.ts">
import { useState, useEffect } from 'react'
export const useDebounce = <T>(value: T, delay: number): T =>
</file>

<file path="src/hooks/useIntersectionObserver.ts">
import { useEffect, useRef, useState } from 'react';
interface UseIntersectionObserverOptions {
  threshold?: number;
  rootMargin?: string;
  triggerOnce?: boolean;
}
export function useIntersectionObserver<T extends HTMLElement = HTMLDivElement>(
  options: UseIntersectionObserverOptions = {}
)
</file>

<file path="src/hooks/usePostEditing.ts">
import { useState } from 'react'
import type { Platform } from '@/config/platforms'
interface EditingState {
  platform: Platform
  index: number
}
export const usePostEditing = () =>
⋮----
const startEdit = (platform: Platform, index: number, content: string) =>
const cancelEdit = () =>
const isEditing = (platform: Platform, index: number) =>
</file>

<file path="src/hooks/useTypewriter.ts">
import { useEffect, useState } from "react";
type Options = {
  typingSpeed?: number;
  deletingSpeed?: number;
  pauseTime?: number;
  enabled?: boolean;
};
export function useTypewriter(
  phrases: string[],
  { typingSpeed = 100, deletingSpeed = 50, pauseTime = 2000, enabled = true }: Options = {}
)
</file>

<file path="src/libs/api-client.ts">
// Enhanced API client for Social Transformer
// Based on Ship Fast patterns, adapted for Supabase auth and German UI
import { supabase } from '../api/supabase';
import { toast } from 'sonner';
export interface ApiError {
  message: string;
  status?: number;
  code?: string;
}
export interface ApiClientConfig {
  baseUrl?: string;
  timeout?: number;
}
export interface RequestOptions {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  body?: any;
  headers?: Record<string, string>;
  timeout?: number;
  skipAuth?: boolean;
  skipErrorHandling?: boolean;
}
export class ApiClient
⋮----
constructor(config: ApiClientConfig =
⋮----
this.timeout = config.timeout || 30000; // 30 seconds default
⋮----
/**
   * Make an API request with automatic error handling and auth injection
   */
async request<T = any>(
    endpoint: string, 
    options: RequestOptions = {}
): Promise<T>
⋮----
// Build full URL
⋮----
// Prepare headers
⋮----
// Add auth token if not skipped
⋮----
// Create abort controller for timeout
⋮----
// Make the request
⋮----
// Handle response
⋮----
/**
   * Handle fetch response with error checking
   */
private async handleResponse<T>(
    response: Response, 
    skipErrorHandling: boolean
): Promise<T>
⋮----
// Handle successful responses
⋮----
// Extract data field if present (common API pattern)
⋮----
// Handle error responses
⋮----
// Create error object
⋮----
/**
   * Handle HTTP errors with appropriate user feedback
   */
private async handleHttpError(response: Response, responseData: any): Promise<void>
⋮----
// Unauthorized - redirect to login
⋮----
// Sign out user and redirect to signup
⋮----
// Forbidden - usually means subscription needed
⋮----
// Rate limited
⋮----
// Server errors
⋮----
// Generic error message
⋮----
/**
   * Handle network and other errors
   */
private handleError(error: any): void
⋮----
// Don't show toast for ApiError (already handled)
⋮----
// Convenience methods
async get<T = any>(endpoint: string, options: Omit<RequestOptions, 'method'> =
async post<T = any>(endpoint: string, body?: any, options: Omit<RequestOptions, 'method' | 'body'> =
async put<T = any>(endpoint: string, body?: any, options: Omit<RequestOptions, 'method' | 'body'> =
async delete<T = any>(endpoint: string, options: Omit<RequestOptions, 'method'> =
async patch<T = any>(endpoint: string, body?: any, options: Omit<RequestOptions, 'method' | 'body'> =
⋮----
// Create default API client instance
⋮----
baseUrl: '', // Use relative URLs for same-origin requests
⋮----
// Export convenience functions
export const get = <T = any>(endpoint: string, options?: Omit<RequestOptions, 'method'>)
export const post = <T = any>(endpoint: string, body?: any, options?: Omit<RequestOptions, 'method' | 'body'>)
export const put = <T = any>(endpoint: string, body?: any, options?: Omit<RequestOptions, 'method' | 'body'>)
export const del = <T = any>(endpoint: string, options?: Omit<RequestOptions, 'method'>)
export const patch = <T = any>(endpoint: string, body?: any, options?: Omit<RequestOptions, 'method' | 'body'>)
// Customer Portal specific function
export const createCustomerPortal = async (returnUrl: string): Promise<
</file>

<file path="src/libs/README.md">
# Social Transformer Libraries

Ship Fast-inspired infrastructure libraries for Social Transformer, providing robust backend functionality with German UI support.

## Files Overview

### `stripe.ts`
Structured Stripe utility functions for server-side operations:
- `createCustomerPortal()` - Create billing portal sessions
- `createCheckoutSession()` - Create checkout sessions with proper configuration  
- `findCheckoutSession()` - Retrieve sessions with expanded line items
- `validateStripeConfig()` - Environment variable validation
- `formatPrice()` - Currency formatting utilities

**Usage:**
```typescript
import { createCustomerPortal } from './libs/stripe';

const portalUrl = await createCustomerPortal({
  customerId: 'cus_123',
  returnUrl: 'https://app.example.com/settings'
});
```

### `api-client.ts` 
Enhanced API client with comprehensive error handling:
- Automatic Supabase auth token injection
- Response/error interceptors with German UI messages
- 401 handling (redirect to login)
- 403 handling (upgrade prompts)
- Network error handling with user-friendly toasts
- Request timeout management

**Usage:**
```typescript
import { post, createCustomerPortal } from './libs/api-client';

// Generic API calls
const data = await post('/api/some-endpoint', { param: 'value' });

// Specific function for customer portal
const { url } = await createCustomerPortal('https://app.example.com/settings');
```

## Integration Points

### API Endpoints
- `/api/stripe/create-portal.ts` - Customer portal creation with Supabase auth
- Enhanced `/api/stripe-webhook.ts` with better error handling and logging

### React Hooks
- `useSubscription()` - Complete subscription management hook
- Automatic auth state synchronization
- Customer portal integration

### React Components
- `CustomerPortalButton` - One-click portal access
- `SubscriptionStatus` - Complete subscription overview

## Security Features

1. **Auth Token Management**: Automatic injection of Supabase JWT tokens
2. **Error Boundary**: Comprehensive error handling without exposing internals  
3. **Input Validation**: All API inputs are validated before processing
4. **Rate Limiting**: Built-in request timeout and retry logic

## German UI Support

All user-facing messages are in German:
- "Anmeldung erforderlich" (Login required)
- "Upgrade erforderlich" (Upgrade required)  
- "Serverfehler" (Server error)
- "Netzwerkfehler" (Network error)

## Configuration Integration

Works seamlessly with the new central configuration system:
- `/src/config/app.config.ts` - Central app configuration
- `/src/config/env.config.ts` - Environment variable management
- Automatic validation and type-safe access to all settings

## Environment Variables

See `/src/config/env.config.ts` for complete environment variable documentation. Key requirements:
- `STRIPE_SECRET_KEY` - Server-side Stripe operations  
- `VITE_SUPABASE_URL` - Supabase project URL
- `VITE_SUPABASE_ANON_KEY` - Client-side Supabase key
- `SUPABASE_SERVICE_ROLE_KEY` - Admin operations in API routes

## Error Handling Strategy

1. **Client-side**: Toast notifications with actionable messages
2. **Server-side**: Structured logging for monitoring
3. **Network**: Automatic retry and fallback handling  
4. **Auth**: Seamless redirect to signup/login flows

## Best Practices Implemented

✅ TypeScript interfaces for all parameters
✅ Comprehensive error boundaries
✅ Automatic retry mechanisms
✅ User-friendly error messages
✅ Security-first approach
✅ Separation of concerns
✅ Environment variable validation
✅ Request/response logging for debugging
</file>

<file path="src/libs/stripe.ts">
// Stripe utility functions for Social Transformer
// Based on Ship Fast best practices, adapted for Supabase
export interface CreateCustomerPortalParams {
  customerId: string;
  returnUrl: string;
}
export interface CreateCheckoutSessionParams {
  priceId: string;
  mode: 'payment' | 'subscription';
  successUrl: string;
  cancelUrl: string;
  couponId?: string;
  clientReferenceId?: string;
  user?: {
    id: string;
    email?: string;
    customerId?: string;
  };
}
export interface CheckoutSessionResponse {
  url: string;
}
export interface CustomerPortalResponse {
  url: string;
}
export interface StripeSession {
  id: string;
  url: string;
  customer?: string;
  line_items?: {
    data: Array<{
      price: {
        id: string;
        unit_amount: number;
        currency: string;
        product: string;
        recurring?: {
          interval: 'month' | 'year';
        };
      };
    }>;
  };
}
/**
 * Create a Stripe Customer Portal session for subscription management
 * @param params - Portal creation parameters
 * @returns Promise<string> - Portal URL
 */
export async function createCustomerPortal(params: CreateCustomerPortalParams): Promise<string>
⋮----
// Validate environment variables
⋮----
/**
 * Create a Stripe Checkout session for payments
 * @param params - Checkout creation parameters  
 * @returns Promise<string> - Checkout URL
 */
export async function createCheckoutSession(params: CreateCheckoutSessionParams): Promise<string>
⋮----
// Validate environment variables
⋮----
// Handle existing customer or create new one
⋮----
/**
 * Retrieve a checkout session with expanded line items
 * @param sessionId - Stripe session ID
 * @returns Promise<StripeSession | null> - Session data or null if not found
 */
export async function findCheckoutSession(sessionId: string): Promise<StripeSession | null>
⋮----
// Validate environment variables
⋮----
/**
 * Validate Stripe environment configuration
 * @throws Error if required environment variables are missing
 */
export function validateStripeConfig(): void
/**
 * Format price from cents to display format
 * @param amount - Amount in cents
 * @param currency - Currency code (default: 'eur')
 * @returns Formatted price string
 */
export function formatPrice(amount: number, currency: string = 'eur'): string
/**
 * Check if an interval is valid
 * @param interval - Interval to check
 * @returns boolean
 */
export function isValidInterval(interval: string): interval is 'lifetime' | 'monthly' | 'yearly'
</file>

<file path="src/pages/Generator.tsx.backup">
import { useEffect, useState } from "react";
import { linkedInPostsFromNewsletter, xTweetsFromBlog, instagramPostsFromBlog, suggestTopicIdeasFromInputs } from "@/api/claude";
import { savePost } from "@/api/supabase";
import { SavedPosts } from "@/components/common/SavedPosts";
import {
  createLinkedInDraftPost,
  createLinkedInShareUrl,
  LinkedInAPIError,
} from "@/api/linkedin";
import { Button } from "@/components/ui/button";
import { Button as DSButton } from "@/design-system/components/Button";
import {
  SaveButton,
  EditButton,
  LinkedInShareButton,
  XShareButton,
  InstagramShareButton,
} from "@/design-system/components/ActionButtons";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { Loader2, Settings as SettingsIcon } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Auth } from "@/components/common/Auth";
import { getSession, onAuthStateChange, signOut } from "@/api/supabase";
import { Link, useSearchParams } from "react-router-dom";
import { PlatformSelector } from "@/components/common/PlatformSelector";
import type { Platform } from "@/config/platforms";
import { PLATFORM_LABEL } from "@/config/platforms";
import { InstagramLogo } from "@/design-system/components/Icons/InstagramLogo";
import { useUsageTracking } from "@/hooks/useUsageTracking";
import { PaywallModal } from "@/components/common/PaywallModal";
import { extractFromUrl } from "@/api/extract";

export default function Generator() {
  const [searchParams] = useSearchParams();
  const [inputText, setInputText] = useState("");
  const [postsByPlatform, setPostsByPlatform] = useState<Record<Platform, string[]>>({
    linkedin: [],
    x: [],
    instagram: [],
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isExtracting, setIsExtracting] = useState(false);
  const [refreshKey, setRefreshKey] = useState(0);
  const [editing, setEditing] = useState<{ platform: Platform; index: number } | null>(null);
  const [editedContent, setEditedContent] = useState("");
  const { toast } = useToast();
  const [userEmail, setUserEmail] = useState<string | null>(null);
  const [loginOpen, setLoginOpen] = useState(false);
  const [selectedPlatforms, setSelectedPlatforms] = useState<Platform[]>(["linkedin"]);
  const [showPaywall, setShowPaywall] = useState(false);
  const { canTransform, incrementUsage, getRemainingCount, isPro } = useUsageTracking();
  // Track sidebar collapsed state to adjust content padding
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [sourceUrl, setSourceUrl] = useState("");
  const [usePremiumExtraction, setUsePremiumExtraction] = useState(false);
  const [extractionUsage, setExtractionUsage] = useState<{ used: number; limit: number; remaining: number } | null>(null);
  // Progress tracking states
  const [generationProgress, setGenerationProgress] = useState(0); // 0-100
  const [currentPlatformGenerating, setCurrentPlatformGenerating] = useState<string>("");
  const [totalPlatforms, setTotalPlatforms] = useState(0);
  const [completedPlatforms, setCompletedPlatforms] = useState(0);
  // Idea generation from uploads
  const [ideaNotes, setIdeaNotes] = useState("");
  const [ideaTexts, setIdeaTexts] = useState<string[]>([]);
  const [ideaSuggestions, setIdeaSuggestions] = useState<string[]>([]);
  const [topicCount, setTopicCount] = useState<number>(7);
  const [isSuggesting, setIsSuggesting] = useState(false);
  const [ideaLinks, setIdeaLinks] = useState<string[]>([]);
  const [tabsValue, setTabsValue] = useState<"posts" | "ideas">("posts");

  // Dev API base: use VITE_DEV_API_TARGET if set; otherwise, when on localhost, fall back to deployed URL
  const DEV_DEFAULT_TARGET = 'https://linkedin-posts-ashen.vercel.app';
  const envTarget = import.meta.env?.VITE_DEV_API_TARGET as string | undefined;
  const apiBase = envTarget && envTarget.length > 0
    ? envTarget.replace(/\/$/, '')
    : (typeof window !== 'undefined' && /^(localhost|127\.0\.0\.1)/.test(window.location.hostname)
        ? DEV_DEFAULT_TARGET
        : '');

  useEffect(() => {
    getSession().then(({ data }) => {
      setUserEmail(data.session?.user.email ?? null);
    });
    const { data: sub } = onAuthStateChange((_event, session) => {
      setUserEmail(session?.user.email ?? null);
      if (session) setLoginOpen(false);
    });
    
    // Load saved style examples
    const savedStyles = window.localStorage.getItem('styleExamples');
    if (savedStyles) {
      setStyleExamples(savedStyles);
    }
    
    return () => {
      sub?.subscription?.unsubscribe?.();
    };
  }, []);

  const handleRemix = async () => {
    // Check usage limit
    if (!canTransform()) {
      setShowPaywall(true);
      return;
    }
    
    // Initialize progress tracking
    setIsLoading(true);
    setGenerationProgress(0);
    setCompletedPlatforms(0);
    setCurrentPlatformGenerating("");
    setTotalPlatforms(selectedPlatforms.length);
    
    try {
      const next: Record<Platform, string[]> = { linkedin: [], x: [], instagram: [] };
      const progressStep = 100 / selectedPlatforms.length;
      
      // Process each platform sequentially with progress updates
      for (let i = 0; i < selectedPlatforms.length; i++) {
        const platform = selectedPlatforms[i];
        setCurrentPlatformGenerating(PLATFORM_LABEL[platform]);
        
        if (platform === "linkedin") {
          next.linkedin = await linkedInPostsFromNewsletter(inputText);
        } else if (platform === "x") {
          // Nutze den exakten X-Prompt über Claude
          next.x = await xTweetsFromBlog(inputText);
        } else if (platform === "instagram") {
          // Nutze den speziellen Instagram-Prompt
          next.instagram = await instagramPostsFromBlog(inputText);
        }
        
        // Update progress
        const newCompleted = i + 1;
        setCompletedPlatforms(newCompleted);
        setGenerationProgress(newCompleted * progressStep);
      }
      
      setPostsByPlatform(next);
      const names = selectedPlatforms.join(", ");
      toast({ title: "Beiträge erstellt!", description: `Generiert für: ${names}` });
      
      // Reset progress states
      setCurrentPlatformGenerating("");
      
      // Increment usage after successful transformation
      incrementUsage();
    } catch (error) {
      console.error("Remix error:", error);
      toast({
        title: "Fehler beim Erstellen",
        description: "LinkedIn-Beiträge konnten nicht erstellt werden.",
        variant: "destructive",
      });
      // Reset progress states on error
      setGenerationProgress(0);
      setCompletedPlatforms(0);
      setCurrentPlatformGenerating("");
    } finally {
      setIsLoading(false);
    }
  };

  const handleExtract = async () => {
    if (!sourceUrl) return;
    
    // Check if trying to use premium without Pro
    if (usePremiumExtraction && !isPro) {
      setShowPaywall(true);
      return;
    }
    
    setIsExtracting(true);
    try {
      let result;
      
      if (usePremiumExtraction && isPro) {
        // Premium extraction with Firecrawl
        const { data: session } = await getSession();
        if (!session) throw new Error("Keine aktive Session");
        
        const response = await fetch("/api/extract-premium", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${session?.session?.access_token}`,
          },
          body: JSON.stringify({ url: sourceUrl }),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          if (data.usage) {
            setExtractionUsage(data.usage);
          }
          throw new Error(data.error || "Premium-Extraktion fehlgeschlagen");
        }
        
        result = {
          title: data.title,
          content: data.markdown || data.content || "",
        };
        
        // Update usage information
        if (data.usage) {
          setExtractionUsage(data.usage);
          toast({ 
            title: "Premium-Import erfolgreich ✨", 
            description: `${data.usage.remaining} von ${data.usage.limit} Premium-Extraktionen übrig diesen Monat`
          });
        } else {
          toast({ 
            title: "Premium-Import erfolgreich ✨", 
            description: data.title || "Inhalt wurde mit verbesserter Qualität importiert"
          });
        }
      } else {
        // Standard extraction with Jina
        result = await extractFromUrl(sourceUrl);
        toast({ title: "Inhalt importiert", description: result.title || sourceUrl });
      }
      
      const prefill = [result.title, result.content]
        .filter(Boolean)
        .join("\n\n");
      setInputText(prefill);
    } catch (e) {
      console.error("Extract error", e);
      toast({
        title: "Import fehlgeschlagen",
        description: e instanceof Error ? e.message : String(e),
        variant: "destructive",
      });
    } finally {
      setIsExtracting(false);
    }
  };

  const handleSavePost = async (content: string, platform: 'linkedin' | 'x' | 'instagram' = 'linkedin') => {
    if (!userEmail) {
      setLoginOpen(true);
      toast({
        title: "Login erforderlich",
        description: "Bitte logge dich ein, um Beiträge zu speichern.",
      });
      return;
    }
    try {
      await savePost(content, platform);
      setRefreshKey((prev) => prev + 1);
      toast({
  title: "Erfolgreich gespeichert",
  description: "Du findest den Beitrag in der Seitenleiste \"Gespeicherte Beiträge\".",
      });
    } catch (error) {
      console.error("Save post error:", error);
      toast({
        title: "Speichern fehlgeschlagen",
        description: `Fehler beim Speichern: ${
          error instanceof Error ? error.message : String(error)
        }`,
        variant: "destructive",
      });
    }
  };

  const handleStartEdit = (platform: Platform, index: number, content: string) => {
    setEditing({ platform, index });
    setEditedContent(content);
  };

  const handleCancelEdit = () => {
    setEditing(null);
    setEditedContent("");
  };

  const handleSaveEdit = () => {
    if (!editing) return;
    const { platform, index } = editing;
    const updated = { ...postsByPlatform };
    updated[platform] = [...updated[platform]];
    updated[platform][index] = editedContent;
    setPostsByPlatform(updated);
    setEditing(null);
    setEditedContent("");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-accent/5 to-secondary overflow-x-hidden">
      {/* Professional Header Bar */}
      <header className="sticky top-0 z-30 bg-background/95 backdrop-blur-sm border-b border-border/50">
        <div className="container mx-auto px-4 h-16 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h1 className="text-xl font-semibold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
              Social Transformer
            </h1>
          </div>
          
          <div className="flex items-center gap-4">
            {/* Mobile Settings button */}
            <Link to="/settings" className="md:hidden">
              <Button variant="ghost" size="sm" aria-label="Einstellungen">
                <SettingsIcon className="h-4 w-4" />
              </Button>
            </Link>
            <Link to="/settings" className="hidden md:block">
              <Button variant="ghost" size="sm">Einstellungen</Button>
            </Link>
            {userEmail ? (
              <div className="flex items-center gap-3">
                <Button variant="ghost" size="sm" onClick={() => signOut()}>
                  Logout
                </Button>
              </div>
            ) : (
              <Dialog open={loginOpen} onOpenChange={setLoginOpen}>
                <DialogTrigger asChild>
                  <Button variant="default" size="sm">Login</Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Einloggen</DialogTitle>
                  </DialogHeader>
                  <Auth />
                </DialogContent>
              </Dialog>
            )}
          </div>
        </div>
      </header>
      
  <div className="p-4 md:p-8 pt-6 md:pt-8">
  <div className={`max-w-4xl mx-auto space-y-8 ${isSidebarCollapsed ? 'md:pr-[3rem]' : 'md:pr-[22rem]'}`}>
          <div className="text-center space-y-4 pt-8">
          <h1 className="text-3xl md:text-5xl font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent">
            Vom Newsletter zu viralen Posts
          </h1>
          <p className="text-muted-foreground text-base md:text-lg">
            Mehr Sichtbarkeit aus vorhandenem Content
          </p>
          <Badge variant="secondary" className="text-xs md:text-sm">
            Powered by Claude AI ✨
          </Badge>
        </div>

        <Tabs value={tabsValue} onValueChange={(v) => setTabsValue(v as 'posts' | 'ideas' | 'workflow')} className="w-full">
          <TabsList className="w-full justify-start">
            <TabsTrigger value="posts">Posts erstellen</TabsTrigger>
            <TabsTrigger value="ideas">Themen‑Ideen</TabsTrigger>
          </TabsList>

          <TabsContent value="posts">
            <Card className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>Newsletter eingeben oder importieren</CardTitle>
                <CardDescription>
                  Füge deinen Newsletter-Text ein oder importiere ihn per URL, und wähle die Zielplattformen
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
            <div className="space-y-3">
              <div className="flex gap-2 flex-col md:flex-row">
                <input
                  type="url"
                  placeholder="https://example.com/dein-blogpost"
                  value={sourceUrl}
                  onChange={(e) => setSourceUrl(e.target.value)}
                  className="flex-1 h-10 px-3 rounded-md border bg-background"
                  aria-label="Quelle-URL"
                />
                <Button onClick={handleExtract} disabled={!sourceUrl || isExtracting} className="md:w-48">
                  {isExtracting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Importiere…
                    </>
                  ) : (
                    <>Von URL importieren</>
                  )}
                </Button>
              </div>
              
              {/* Premium extraction toggle - visible to all, but gated for free users */}
              <div className="flex items-center justify-between text-sm">
                <label className="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={usePremiumExtraction}
                    onChange={(e) => {
                      if (!isPro && e.target.checked) {
                        setShowPaywall(true);
                        return;
                      }
                      setUsePremiumExtraction(e.target.checked);
                    }}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-muted-foreground">
                    Premium-Extraktion
                    {!isPro ? (
                      <Badge variant="secondary" className="ml-2 text-xs">Pro</Badge>
                    ) : extractionUsage && (
                      <span className="ml-2 text-xs">
                        ({extractionUsage.remaining}/20 übrig)
                      </span>
                    )}
                  </span>
                </label>
                <span className="text-xs text-muted-foreground">
                  Bessere Qualität • JavaScript-Support
                </span>
              </div>
            </div>
            <Textarea
              placeholder="Newsletter hier einfügen..."
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              className="min-h-[12rem] text-base resize-none"
            />
            <div className="space-y-2">
              <PlatformSelector value={selectedPlatforms} onChange={setSelectedPlatforms} />
              {!isPro && (
                <div className="flex justify-center">
                  <Badge variant="outline" className="px-3 py-1">
                    {getRemainingCount() > 0 
                      ? `${getRemainingCount()} kostenlose Transformationen heute` 
                      : "Keine kostenlosen Transformationen mehr"}
                  </Badge>
                </div>
              )}
            </div>

            {/* Progress bar - only visible when generating */}
            {isLoading && (
              <div className="space-y-2">
                <Progress value={generationProgress} className="h-2" />
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>
                    {currentPlatformGenerating && `Erstelle ${currentPlatformGenerating}-Posts...`}
                  </span>
                  <span>
                    {completedPlatforms}/{totalPlatforms} Plattformen
                  </span>
                </div>
              </div>
            )}

            <Button
              onClick={handleRemix}
              disabled={isLoading || !inputText || selectedPlatforms.length === 0}
              size="lg"
              className="w-full text-lg h-12 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  {generationProgress > 0 
                    ? `${Math.round(generationProgress)}% - ${currentPlatformGenerating}`
                    : "Initialisiere..."}
                </>
              ) : (
                <>✨ Transformieren</>
              )}
            </Button>
          </CardContent>
        </Card>
          </TabsContent>

          <TabsContent value="ideas">
            <Card className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>Themen-Ideen aus Uploads (Beta)</CardTitle>
                <CardDescription>
                  Lade Bild/Text-Dokumente hoch (bis 20MB/Datei) oder füge unten Notizen ein. Wir schlagen dir prägnante Themen-Ideen vor.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Input
                    id="idea-files"
                    type="file"
                    multiple
                    accept="image/png,image/jpeg,image/webp,text/plain,text/markdown,.txt,.md,application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,audio/mpeg,audio/wav,audio/mp4,audio/aac,audio/ogg"
                    onChange={async (e) => {
                      const files = Array.from(e.target.files || []);
                      if (!files.length) return;
                      const addedTexts: string[] = [];
                      let usedApi = 0;
                  for (const f of files) {
                    if (f.size > 20 * 1024 * 1024) {
                          toast({ title: "Datei zu groß", description: `${f.name} überschreitet 20MB`, variant: "destructive" });
                          continue;
                        }
                        const type = (f.type || '').toLowerCase();
                        try {
                          const isText = type.startsWith('text/') || /\.(txt|md)$/i.test(f.name);
                          const needsApi = type.startsWith('image/') || type.startsWith('audio/') || type === 'application/pdf' || /\.(pdf|docx)$/i.test(f.name);
                          if (isText && !needsApi) {
                            const t = (await f.text()).trim();
                            if (t) addedTexts.push(t);
                          } else {
                        const form = new FormData();
                        form.append('file', f, f.name);
                        const url = apiBase ? `${apiBase}/api/extract-file` : '/api/extract-file';
                        const resp = await fetch(url, { method: 'POST', body: form, redirect: 'follow' as RequestRedirect });
                        if (!resp.ok) {
                          let msg = '';
                          try {
                            const j = await resp.json();
                            msg = j?.error || '';
                          } catch { /* noop */ }
                          if (!msg) {
                            try { msg = await resp.text(); } catch { /* noop */ }
                          }
                          throw new Error(msg || `${resp.status} ${resp.statusText}`);
                        }
                        const data = await resp.json();
                        if (data?.text) {
                          addedTexts.push(String(data.text));
                          usedApi++;
                        }
                        if (data?.meta?.links?.length) {
                          setIdeaLinks((prev) => {
                            const set = new Set(prev);
                            for (const l of data.meta.links as string[]) set.add(l);
                            return Array.from(set).slice(0, 200);
                          });
                        }
                      }
                    } catch (err) {
                      console.error('upload extract error', err);
                      const msg = err instanceof Error && err.message ? `: ${err.message.slice(0, 180)}` : '';
                      toast({ title: "Extraktion fehlgeschlagen", description: `${f.name}${msg}` , variant: "destructive" });
                    }
                  }
                  if (addedTexts.length) setIdeaTexts(prev => [...prev, ...addedTexts]);
                  if (!addedTexts.length) return;
                  toast({ title: "Uploads verarbeitet", description: `${addedTexts.length} Textquelle(n) ${usedApi ? `(via API: ${usedApi})` : ''}` });
                  e.currentTarget.value = '';
                }}
              />
              <p className="text-xs text-muted-foreground">Unterstützt: PNG/JPG/WEBP, PDF/DOCX, TXT/MD, Audio (mp3/wav/aac/ogg). Max 20MB/Datei.</p>
            </div>
            {/* Links aus Uploads / Studien */}
            {!!ideaLinks.length && (
              <div className="space-y-2">
                <div className="text-sm font-medium">Gefundene Links / Studien</div>
                <div className="max-h-48 overflow-auto rounded-md border divide-y">
                  {ideaLinks.slice(0, 50).map((link, i) => (
                    <div key={i} className="p-2 text-xs flex items-center gap-2">
                      <span className="truncate flex-1" title={link}>{link}</span>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setSourceUrl(link);
                          setTabsValue("posts");
                        }}
                      >
                        Übernehmen
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            )}
            {/* Manuelles Einfügen von Links */}
            <div className="space-y-2">
              <Textarea
                placeholder="Optional: Mehrere Links (je Zeile eine URL) einfügen…"
                className="min-h-[6rem]"
                onBlur={(e) => {
                  const lines = e.target.value.split(/\n+/).map(s => s.trim()).filter(Boolean);
                  if (!lines.length) return;
                  setIdeaLinks(prev => Array.from(new Set([...prev, ...lines])));
                  e.target.value = '';
                  toast({ title: "Links hinzugefügt", description: `${lines.length} Link(s) gespeichert.` });
                }}
              />
            </div>
            <div className="space-y-2">
              <Textarea
                placeholder="Kurz einfügen: Worüber willst du posten? Was gefällt dir am Stil? (optional)"
                value={ideaNotes}
                onChange={(e) => setIdeaNotes(e.target.value)}
                className="min-h-[8rem]"
              />
            </div>
                <div className="flex flex-wrap gap-2 text-xs text-muted-foreground">
                  {!!ideaTexts.length && <span>{ideaTexts.length} Text-Quelle(n)</span>}
                </div>
                <div className="flex gap-2">
                  <Button
                    disabled={isSuggesting || (!ideaNotes && ideaTexts.length === 0)}
                    onClick={async () => {
                      setIsSuggesting(true);
                      try {
                    const ideas = await suggestTopicIdeasFromInputs({ userNotes: ideaNotes, texts: ideaTexts });
                        setIdeaSuggestions(ideas);
                        if (!ideas.length) {
                          toast({ title: "Keine Ideen", description: "Bitte mehr Kontext/Text hinzufügen." });
                        }
                      } catch (e) {
                        console.error(e);
                        toast({ title: "Fehler", description: "Ideen konnten nicht generiert werden.", variant: "destructive" });
                      } finally {
                        setIsSuggesting(false);
                      }
                    }}
                    className="md:w-56"
                  >
                    {isSuggesting ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analysiere…</>) : (<>Themen-Ideen generieren</>)}
                  </Button>
                  {!!ideaSuggestions.length && (
                    <Button
                      variant="outline"
                      onClick={() => {
                        const joined = ideaSuggestions.slice(0, 3).map((s, i) => `${i+1}. ${s}`).join("\n");
                        setInputText(prev => [joined, prev].filter(Boolean).join("\n\n"));
                        toast({ title: "Übernommen", description: "Top-Ideen zum Eingabetext hinzugefügt." });
                      }}
                    >
                      Top‑Ideen übernehmen
                    </Button>
                  )}
                </div>
                {!!ideaSuggestions.length && (
                  <div className="bg-muted/40 rounded-md p-3 text-sm whitespace-pre-wrap">
                    {ideaSuggestions.map((s) => `• ${s}`).join("\n")}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

                      />
                      <p className="text-xs text-muted-foreground">
                        Unterstützt: Bilder, PDFs, Dokumente, Audio-Dateien
                      </p>
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Oder URL eingeben</label>
                      <div className="flex gap-2">
                        <Input
                          placeholder="https://..."
                          value={sourceUrl}
                          onChange={(e) => setSourceUrl(e.target.value)}
                        />
                        <Button
                          onClick={async () => {
                            if (!sourceUrl.trim()) return;
                            setIsExtracting(true);
                            try {
                              const result = await extractFromUrl(sourceUrl);
                              const content = [result.title, result.content].filter(Boolean).join("\n\n");
                              setInputText(content);
                              toast({ title: "Inhalt importiert", description: result.title || sourceUrl });
                            } catch (e) {
                              console.error("Extract error", e);
                              toast({
                                title: "Import fehlgeschlagen",
                                description: e instanceof Error ? e.message : String(e),
                                variant: "destructive",
                              });
                            } finally {
                              setIsExtracting(false);
                            }
                          }}
                          disabled={isExtracting || !sourceUrl.trim()}
                        >
                          {isExtracting ? <Loader2 className="h-4 w-4 animate-spin" /> : "Extrahieren"}
                        </Button>
                      </div>
                    </div>
                    
                    {uploadedFiles.length > 0 && (
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Hochgeladene Dateien ({uploadedFiles.length})</label>
                        <div className="max-h-48 overflow-auto rounded-md border divide-y">
                          {uploadedFiles.map((file, i) => (
                            <div key={i} className="p-2 flex items-center justify-between hover:bg-muted/50">
                              <div className="flex-1 min-w-0">
                                <p className="text-sm font-medium truncate">{file.name}</p>
                                <p className="text-xs text-muted-foreground">
                                  {(file.size / 1024).toFixed(1)} KB • {file.type.split('/')[0] || 'text'}
                                  {file.text && ` • ${file.text.slice(0, 50)}...`}
                                </p>
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => {
                                  setUploadedFiles(prev => prev.filter((_, idx) => idx !== i));
                                  setIdeaTexts(prev => {
                                    const newTexts = [...prev];
                                    newTexts.splice(i, 1);
                                    return newTexts;
                                  });
                                  toast({ title: "Datei entfernt", description: file.name });
                                }}
                              >
                                ✕
                              </Button>
                            </div>
                          ))}
                        </div>
                        <p className="text-xs text-muted-foreground">
                          {ideaTexts.length} Textquelle(n) bereit für Themenextraktion
                        </p>
                      </div>
                    )}
                  </div>
                ),
                topics: (
                  <div className="space-y-4">
                    {/* Context info */}
                    {(ideaTexts.length > 0 || uploadedFiles.length > 0) && (
                      <div className="p-3 bg-muted/50 rounded-md">
                        <p className="text-sm font-medium mb-1">Verfügbare Quellen</p>
                        <p className="text-xs text-muted-foreground">
                          {uploadedFiles.length} Datei(en) hochgeladen • {ideaTexts.length} Textquelle(n) extrahiert
                        </p>
                      </div>
                    )}
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Zusätzlicher Kontext</label>
                      <Textarea
                        placeholder="Beschreibe deine Zielgruppe, gewünschte Themen oder spezielle Anforderungen..."
                        value={ideaNotes}
                        onChange={(e) => setIdeaNotes(e.target.value)}
                        className="min-h-[100px]"
                      />
                    </div>
                    
                    <div className="flex items-center gap-4">
                      <div className="flex-1">
                        <label className="text-sm font-medium">Anzahl Themen</label>
                        <div className="flex items-center gap-2 mt-1">
                          <Input
                            type="number"
                            min="3"
                            max="15"
                            value={topicCount}
                            onChange={(e) => setTopicCount(Math.min(15, Math.max(3, parseInt(e.target.value) || 7)))}
                            className="w-20"
                          />
                          <span className="text-sm text-muted-foreground">Ideen generieren</span>
                        </div>
                      </div>
                    </div>
                    
                    <Button
                      onClick={async () => {
                        if (!ideaNotes && ideaTexts.length === 0) {
                          toast({ 
                            title: "Keine Quellen verfügbar", 
                            description: "Bitte lade erst Dateien hoch oder füge Notizen hinzu.",
                            variant: "destructive" 
                          });
                          return;
                        }
                        
                        setIsSuggesting(true);
                        try {
                          const ideas = await suggestTopicIdeasFromInputs({ 
                            userNotes: ideaNotes, 
                            texts: ideaTexts 
                          });
                          setIdeaSuggestions(ideas.slice(0, topicCount));
                          if (!ideas.length) {
                            toast({ 
                              title: "Keine Ideen generiert", 
                              description: "Bitte mehr Kontext oder andere Dateien hinzufügen." 
                            });
                          } else {
                            toast({ 
                              title: "Themen erfolgreich generiert", 
                              description: `${ideas.length} Themen-Ideen erstellt` 
                            });
                          }
                        } catch (e) {
                          console.error('Topic generation error:', e);
                          const errorMsg = e instanceof Error ? e.message : 'Unbekannter Fehler';
                          toast({ 
                            title: "Fehler bei der Themengenerierung", 
                            description: errorMsg.slice(0, 100), 
                            variant: "destructive" 
                          });
                        } finally {
                          setIsSuggesting(false);
                        }
                      }}
                      disabled={isSuggesting || (!ideaNotes && ideaTexts.length === 0)}
                      className="w-full"
                    >
                      {isSuggesting ? (
                        <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analysiere...</>
                      ) : (
                        <>Themen-Ideen generieren</>
                      )}
                    </Button>
                    
                    {ideaSuggestions.length > 0 && (
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <p className="text-sm font-medium">Generierte Themen ({ideaSuggestions.length})</p>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => {
                              setIsSuggesting(true);
                              // Regenerate with same parameters
                              suggestTopicIdeasFromInputs({ 
                                userNotes: ideaNotes, 
                                texts: ideaTexts 
                              }).then(ideas => {
                                setIdeaSuggestions(ideas.slice(0, topicCount));
                                toast({ title: "Neue Themen generiert" });
                              }).finally(() => setIsSuggesting(false));
                            }}
                            disabled={isSuggesting}
                          >
                            Neu generieren
                          </Button>
                        </div>
                        <div className="bg-muted/40 rounded-md p-3 text-sm space-y-2">
                          {ideaSuggestions.map((s, i) => (
                            <div key={i} className="flex items-start gap-2 group hover:bg-background/50 p-1 rounded">
                              <span className="text-muted-foreground">{i + 1}.</span>
                              <span className="flex-1">{s}</span>
                              <Button
                                variant="ghost"
                                size="sm"
                                className="opacity-0 group-hover:opacity-100 transition-opacity h-6 px-2"
                                onClick={() => {
                                  setInputText(prev => prev ? `${prev}\n\n${i+1}. ${s}` : `${i+1}. ${s}`);
                                  toast({ title: "Thema hinzugefügt", description: `"${s.slice(0, 50)}..."` });
                                }}
                              >
                                +
                              </Button>
                            </div>
                          ))}
                        </div>
                        <div className="flex gap-2">
                          <Button
                            variant="outline"
                            onClick={() => {
                              const joined = ideaSuggestions.slice(0, 3).map((s, i) => `${i+1}. ${s}`).join("\n");
                              setInputText(prev => [joined, prev].filter(Boolean).join("\n\n"));
                              toast({ title: "Übernommen", description: "Top-3 Themen zum Eingabetext hinzugefügt." });
                            }}
                          >
                            Top-3 übernehmen
                          </Button>
                          <Button
                            variant="outline"
                            onClick={() => {
                              const allJoined = ideaSuggestions.map((s, i) => `${i+1}. ${s}`).join("\n");
                              setInputText(allJoined);
                              toast({ title: "Alle übernommen", description: `${ideaSuggestions.length} Themen als Eingabetext gesetzt.` });
                            }}
                          >
                            Alle verwenden
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                ),
                style: (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Schreibstil wählen</label>
                      <div className="grid grid-cols-2 gap-2">
                        {[
                          { id: 'professional', label: '📚 Professionell', desc: 'Sachlich und strukturiert' },
                          { id: 'casual', label: '💬 Casual', desc: 'Locker und persönlich' },
                          { id: 'storytelling', label: '📖 Storytelling', desc: 'Erzählerisch und emotional' },
                          { id: 'direct', label: '🎯 Direkt', desc: 'Klar und auf den Punkt' }
                        ].map((style) => (
                          <Button
                            key={style.id}
                            variant={selectedStyle === style.id ? "default" : "outline"}
                            className="justify-start h-auto py-3 px-4"
                            onClick={() => setSelectedStyle(style.id)}
                          >
                            <div className="text-left">
                              <div>{style.label}</div>
                              <div className="text-xs text-muted-foreground font-normal">{style.desc}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Eigene Stil-Beispiele</label>
                      <Textarea
                        placeholder="Füge hier Beispiel-Posts ein, die deinem gewünschten Stil entsprechen..."
                        className="min-h-[150px]"
                        value={styleExamples}
                        onChange={(e) => {
                          setStyleExamples(e.target.value);
                          window.localStorage.setItem('styleExamples', e.target.value);
                        }}
                      />
                      <p className="text-xs text-muted-foreground">
                        Diese Beispiele werden als Stil-Referenz für die KI verwendet
                      </p>
                    </div>
                    
                    {styleExamples && (
                      <div className="p-3 bg-muted/50 rounded-md">
                        <p className="text-xs font-medium mb-1">Stil-Referenz gespeichert</p>
                        <p className="text-xs text-muted-foreground">
                          {styleExamples.split('\n').length} Zeile(n) • {styleExamples.length} Zeichen
                        </p>
                      </div>
                    )}
                  </div>
                ),
                generate: (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Eingabetext</label>
                      <Textarea
                        placeholder="Newsletter, Blogpost oder eigener Text..."
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                        className="min-h-[200px]"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Plattformen</label>
                      <PlatformSelector
                        value={selectedPlatforms}
                        onChange={setSelectedPlatforms}
                      />
                    </div>
                    
                    <Button
                      onClick={handleRemix}
                      disabled={isLoading || !inputText.trim() || selectedPlatforms.length === 0}
                      className="w-full"
                    >
                      {isLoading ? (
                        <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generiere...</>
                      ) : (
                        <>Posts generieren</>
                      )}
                    </Button>
                    
                    {generationProgress > 0 && generationProgress < 100 && (
                      <div className="space-y-2">
                        <Progress value={generationProgress} />
                        <p className="text-xs text-center text-muted-foreground">
                          {currentPlatformGenerating && `Generiere ${currentPlatformGenerating}...`}
                        </p>
                      </div>
                    )}
                  </div>
                ),
                review: (
                  <div className="space-y-4">
                    {Object.entries(postsByPlatform).map(([platform, posts]) => 
                      posts.length > 0 && (
                        <Card key={platform}>
                          <CardHeader>
                            <CardTitle className="text-base">
                              {PLATFORM_LABEL[platform as Platform]} Posts
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            {posts.map((post, index) => (
                              <div key={index} className="p-3 bg-muted rounded-md">
                                <pre className="whitespace-pre-wrap text-sm">{post}</pre>
                                <div className="flex gap-2 mt-2">
                                  <SaveButton
                                    onClick={async () => {
                                      if (!userEmail) {
                                        setLoginOpen(true);
                                        return;
                                      }
                                      try {
                                        await savePost(post, platform as Platform);
                                        toast({ title: "Gespeichert" });
                                        setRefreshKey(Date.now());
                                      } catch (error) {
                                        console.error(error);
                                        toast({ title: "Fehler beim Speichern", variant: "destructive" });
                                      }
                                    }}
                                  />
                                  {platform === "linkedin" && <LinkedInShareButton text={post} />}
                                  {platform === "x" && <XShareButton text={post} />}
                                  {platform === "instagram" && <InstagramShareButton />}
                                </div>
                              </div>
                            ))}
                          </CardContent>
                        </Card>
                      )
                    )}
                    
                    {Object.values(postsByPlatform).every(posts => posts.length === 0) && (
                      <div className="text-center py-8 text-muted-foreground">
                        Noch keine Posts generiert. Gehe zurück zum "Posts generieren" Schritt.
                      </div>
                    )}
                  </div>
                )
              }}
            />
          </TabsContent>
        </Tabs>
        
  {/* Extra spacing for mobile to prevent content being covered by bottom drawer + safe area */}
  <div className="md:hidden" style={{ height: 'calc(4rem + env(safe-area-inset-bottom))' }} aria-hidden="true" />
        {(["linkedin", "x", "instagram"] as Platform[]).map((platform) => {
          const items = postsByPlatform[platform] || [];
          if (items.length === 0) return null;
          return (
            <Card key={platform} className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle>{PLATFORM_LABEL[platform]} – {items.length} Beiträge</CardTitle>
                <CardDescription>Plattformspezifische Vorschau und Bearbeitung</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 gap-6">
                  {items.map((post, index) => (
                    <Card key={index} className="border-muted/50 hover:shadow-lg transition-all duration-200 hover:border-primary/20">
                      <CardContent className="p-6">
                        {editing?.platform === platform && editing?.index === index ? (
                          <div className="space-y-4">
                            <Textarea
                              value={editedContent}
                              onChange={(e) => setEditedContent(e.target.value)}
                              className="min-h-[8rem]"
                            />
                            <div className="flex justify-end gap-2">
                              <DSButton variant="ghost" size="sm" onClick={handleCancelEdit}>
                                Abbrechen
                              </DSButton>
                              <SaveButton size="sm" onClick={handleSaveEdit} />
                            </div>
                          </div>
                        ) : (
                          <>
                            <p className="text-foreground whitespace-pre-wrap leading-relaxed mb-4">{post}</p>
                            <div className="flex justify-between items-center pt-4 border-t border-muted/30">
                              <Badge variant="outline" className="text-xs flex items-center gap-1.5">
                                {platform === "instagram" && <InstagramLogo size={12} />}
                                {PLATFORM_LABEL[platform]} · Post #{index + 1}
                              </Badge>
                              <div className="flex gap-2">
                                <EditButton
                                  size="sm"
                                  onClick={() => handleStartEdit(platform, index, post)}
                                  text=""
                                  title="Beitrag bearbeiten"
                                />
                                <SaveButton size="sm" onClick={() => handleSavePost(post, platform)} text="" title="Beitrag speichern" />
                                {platform === "linkedin" && (
                                  <LinkedInShareButton
                                    size="sm"
                                    text=""
                                    onClick={async () => {
                                      try {
                                        const accessToken = import.meta.env.VITE_LINKEDIN_ACCESS_TOKEN;
                                        const authorUrn = import.meta.env.VITE_LINKEDIN_AUTHOR_URN;
                                        if (accessToken && authorUrn) {
                                          const result = await createLinkedInDraftPost(post, { accessToken, authorUrn });
                                          window.open(result.draftUrl, "_blank");
                                          toast({ title: "LinkedIn Draft erstellt! 🚀", description: "Der Draft wurde erfolgreich erstellt." });
                                        } else {
                                          const linkedinUrl = createLinkedInShareUrl(post);
                                          window.open(linkedinUrl, "_blank");
                                        }
                                      } catch (error) {
                                        console.error("LinkedIn Draft Error:", error);
                                        if (error instanceof LinkedInAPIError) {
                                          toast({ title: "LinkedIn API Fehler", description: error.message, variant: "destructive" });
                                        } else {
                                          const linkedinUrl = createLinkedInShareUrl(post);
                                          window.open(linkedinUrl, "_blank");
                                        }
                                      }
                                    }}
                                    title="Auf LinkedIn teilen"
                                  />
                                )}
                                {platform === "x" && (
                                  <XShareButton
                                    size="sm"
                                    text=""
                                    tweetContent={post}
                                    title="Auf X teilen"
                                  />
                                )}
                                {platform === "instagram" && (
                                  <InstagramShareButton
                                    size="sm"
                                    text=""
                                    postContent={post}
                                    title="Auf Instagram teilen"
                                  />
                                )}
                              </div>
                            </div>
                          </>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          );
        })}
        </div>
      </div>
      
      <SavedPosts
        onCollapse={setIsSidebarCollapsed}
        refreshKey={refreshKey}
        isAuthenticated={!!userEmail}
        onLoginClick={() => setLoginOpen(true)}
        initialExpanded={searchParams.get('expand') === 'saved'}
      />
      
      <PaywallModal 
        open={showPaywall} 
        onOpenChange={setShowPaywall} 
      />
    </div>
  );
}
</file>

<file path="src/pages/Terms.tsx.backup">
import { useNavigate } from "react-router-dom";
import { FooterBar } from "@/components/landing/FooterBar";
import { HeaderBar } from "@/components/landing/HeaderBar";

export default function Terms() {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      {/* Header */}
      <div className="container mx-auto px-4">
        <HeaderBar 
          isVisible={true}
          onSignup={() => navigate('/')}
        />
      </div>

      {/* Content */}
      <main className="container mx-auto px-4 py-12 max-w-4xl">
        <h1 className="text-4xl font-bold mb-8">Allgemeine Geschäftsbedingungen (AGB)</h1>
        
        <div className="prose prose-slate dark:prose-invert max-w-none space-y-6">
          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 1 Geltungsbereich</h2>
            <p className="mb-4">
              (1) Diese Allgemeinen Geschäftsbedingungen (nachfolgend "AGB") gelten für alle Verträge zwischen 
              Social Transformer (nachfolgend "Anbieter") und dem Kunden über die Nutzung der Social Transformer 
              Plattform und zugehörigen Dienstleistungen.
            </p>
            <p className="mb-4">
              (2) Abweichende, entgegenstehende oder ergänzende AGB des Kunden werden nur dann und insoweit 
              Vertragsbestandteil, als der Anbieter ihrer Geltung ausdrücklich zugestimmt hat.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 2 Vertragsgegenstand</h2>
            <p className="mb-4">
              (1) Der Anbieter stellt dem Kunden eine webbasierte Software-as-a-Service (SaaS) Lösung zur 
              Verfügung, die es ermöglicht, Newsletter und Blog-Inhalte in Social Media Posts für verschiedene 
              Plattformen umzuwandeln.
            </p>
            <p className="mb-4">
              (2) Der genaue Funktionsumfang ergibt sich aus der aktuellen Leistungsbeschreibung auf der Website.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 3 Vertragsschluss</h2>
            <p className="mb-4">
              (1) Die Darstellung der Produkte auf unserer Website stellt kein rechtlich bindendes Angebot, 
              sondern eine Aufforderung zur Bestellung dar.
            </p>
            <p className="mb-4">
              (2) Durch die Registrierung und Auswahl eines Tarifs gibt der Kunde ein verbindliches Angebot 
              zum Abschluss eines Nutzungsvertrags ab.
            </p>
            <p className="mb-4">
              (3) Der Vertrag kommt durch die Annahme des Angebots durch den Anbieter zustande, welche durch 
              die Freischaltung des Zugangs erfolgt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 4 Preise und Zahlungsbedingungen</h2>
            <p className="mb-4">
              (1) Es gelten die zum Zeitpunkt der Bestellung auf der Website angegebenen Preise. Alle Preise 
              verstehen sich inklusive der gesetzlichen Mehrwertsteuer.
            </p>
            <p className="mb-4">
              (2) Die Zahlung erfolgt über den Zahlungsdienstleister Stripe. Der Kunde ermächtigt den Anbieter, 
              die fälligen Beträge über Stripe einzuziehen.
            </p>
            <p className="mb-4">
              (3) Bei Zahlungsverzug ist der Anbieter berechtigt, den Zugang zur Plattform zu sperren.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 5 Lifetime Deal</h2>
            <p className="mb-4">
              (1) Der "Lifetime Deal" gewährt dem Kunden gegen eine einmalige Zahlung von 99 € ein zeitlich 
              unbegrenztes Nutzungsrecht an der Plattform.
            </p>
            <p className="mb-4">
              (2) Das Lifetime Deal gilt ausschließlich für die zum Zeitpunkt des Kaufs verfügbaren Funktionen. 
              Zukünftige Premium-Features können zusätzliche Kosten verursachen.
            </p>
            <p className="mb-4">
              (3) Das Lifetime Deal ist nicht übertragbar und gilt nur für den ursprünglichen Käufer.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 6 Nutzungsrechte</h2>
            <p className="mb-4">
              (1) Der Kunde erhält ein nicht ausschließliches, nicht übertragbares Nutzungsrecht an der 
              Software für die Dauer des Vertragsverhältnisses.
            </p>
            <p className="mb-4">
              (2) Eine Weitergabe der Zugangsdaten an Dritte ist untersagt.
            </p>
            <p className="mb-4">
              (3) Der Kunde ist verpflichtet, die Plattform nur für rechtmäßige Zwecke zu nutzen.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 7 Verfügbarkeit</h2>
            <p className="mb-4">
              (1) Der Anbieter bemüht sich um eine möglichst unterbrechungsfreie Verfügbarkeit der Plattform. 
              Eine Verfügbarkeit von 100% wird jedoch nicht garantiert.
            </p>
            <p className="mb-4">
              (2) Wartungsarbeiten werden, soweit möglich, im Voraus angekündigt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 8 Haftung</h2>
            <p className="mb-4">
              (1) Der Anbieter haftet unbeschränkt für Vorsatz und grobe Fahrlässigkeit sowie nach Maßgabe 
              des Produkthaftungsgesetzes.
            </p>
            <p className="mb-4">
              (2) Bei leichter Fahrlässigkeit haftet der Anbieter nur bei Verletzung wesentlicher Vertragspflichten 
              und begrenzt auf den vertragstypischen, vorhersehbaren Schaden.
            </p>
            <p className="mb-4">
              (3) Die Haftung für Datenverlust ist auf den typischen Wiederherstellungsaufwand beschränkt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 9 Datenschutz</h2>
            <p className="mb-4">
              (1) Die Verarbeitung personenbezogener Daten erfolgt gemäß unserer Datenschutzerklärung.
            </p>
            <p className="mb-4">
              (2) Der Kunde verpflichtet sich, nur solche Inhalte zu verarbeiten, für die er die erforderlichen 
              Rechte besitzt.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 10 Vertragslaufzeit und Kündigung</h2>
            <p className="mb-4">
              (1) Der Vertrag läuft auf unbestimmte Zeit.
            </p>
            <p className="mb-4">
              (2) Monatliche Abonnements können mit einer Frist von 14 Tagen zum Monatsende gekündigt werden.
            </p>
            <p className="mb-4">
              (3) Das Recht zur außerordentlichen Kündigung aus wichtigem Grund bleibt unberührt.
            </p>
            <p className="mb-4">
              (4) Lifetime Deals sind von der ordentlichen Kündigung ausgeschlossen, können aber aus wichtigem 
              Grund gekündigt werden.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 11 Widerrufsrecht</h2>
            <p className="mb-4">
              (1) Verbrauchern steht ein Widerrufsrecht nach Maßgabe der gesetzlichen Bestimmungen zu.
            </p>
            <p className="mb-4">
              (2) Das Widerrufsrecht beträgt 14 Tage ab Vertragsschluss.
            </p>
            <p className="mb-4">
              (3) Bei digitalen Inhalten erlischt das Widerrufsrecht, wenn der Kunde der sofortigen 
              Vertragsausführung zugestimmt hat.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 12 Änderungen der AGB</h2>
            <p className="mb-4">
              (1) Der Anbieter behält sich vor, diese AGB jederzeit zu ändern.
            </p>
            <p className="mb-4">
              (2) Änderungen werden dem Kunden mindestens 30 Tage vor Inkrafttreten per E-Mail mitgeteilt.
            </p>
            <p className="mb-4">
              (3) Widerspricht der Kunde den Änderungen nicht innerhalb von 30 Tagen, gelten diese als akzeptiert.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mt-8 mb-4">§ 13 Schlussbestimmungen</h2>
            <p className="mb-4">
              (1) Es gilt das Recht der Bundesrepublik Deutschland unter Ausschluss des UN-Kaufrechts.
            </p>
            <p className="mb-4">
              (2) Gerichtsstand für alle Streitigkeiten aus diesem Vertrag ist, soweit gesetzlich zulässig, 
              der Sitz des Anbieters.
            </p>
            <p className="mb-4">
              (3) Sollten einzelne Bestimmungen unwirksam sein, bleibt die Wirksamkeit der übrigen Bestimmungen 
              unberührt.
            </p>
          </section>

          <div className="mt-12 pt-8 border-t border-slate-200 dark:border-slate-700">
            <p className="text-sm text-muted-foreground">
              Stand: Januar 2025<br />
              Version 1.0
            </p>
          </div>
        </div>
      </main>

      <FooterBar />
    </div>
  );
}
</file>

<file path="src/styles/animations.css">
.animate-fadeIn {
</file>

<file path="supabase/migrations/000_create_subscriptions_table.sql">
wsl-- Migration: 000_create_subscriptions_table.sql
-- Purpose: Create the base subscriptions table
BEGIN;
-- Create subscriptions table
CREATE TABLE IF NOT EXISTS public.subscriptions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  stripe_customer_id TEXT,
  stripe_subscription_id TEXT,
  stripe_payment_intent_id TEXT,
  status TEXT DEFAULT 'trial' CHECK (status IN ('trial', 'active', 'canceled', 'past_due')),
  is_active BOOLEAN DEFAULT FALSE,
  interval TEXT CHECK (interval IN ('lifetime', 'monthly', 'yearly')),
  amount INTEGER,
  currency TEXT DEFAULT 'eur',
  stripe_price_id TEXT,
  stripe_product_id TEXT,
  current_period_start TIMESTAMPTZ,
  current_period_end TIMESTAMPTZ,
  cancel_at_period_end BOOLEAN DEFAULT FALSE,
  canceled_at TIMESTAMPTZ,
  payment_provider TEXT DEFAULT 'stripe',
  extraction_limit INTEGER DEFAULT 20,
  extraction_reset_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
-- Create indexes for efficient queries
CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON public.subscriptions(user_id);
CREATE INDEX IF NOT EXISTS idx_subscriptions_stripe_customer_id ON public.subscriptions(stripe_customer_id);
CREATE INDEX IF NOT EXISTS idx_subscriptions_stripe_subscription_id ON public.subscriptions(stripe_subscription_id);
CREATE INDEX IF NOT EXISTS idx_subscriptions_status ON public.subscriptions(status);
CREATE INDEX IF NOT EXISTS idx_subscriptions_is_active ON public.subscriptions(is_active);
-- Enable Row Level Security
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;
-- Create policies
CREATE POLICY "Users can view their own subscriptions" ON public.subscriptions
  FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own subscriptions" ON public.subscriptions
  FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own subscriptions" ON public.subscriptions
  FOR UPDATE USING (auth.uid() = user_id);
-- Service role can manage all subscriptions (for webhooks)
CREATE POLICY "Service role can manage subscriptions" ON public.subscriptions
  FOR ALL USING (auth.role() = 'service_role');
COMMIT;
</file>

<file path="supabase/migrations/001_create_generation_usage_table.sql">
-- Create generation_usage table for tracking post transformations
CREATE TABLE generation_usage (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    generated_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);
-- Create index for efficient user queries
CREATE INDEX idx_generation_usage_user_id ON generation_usage(user_id);
-- Create index for time-based queries (if needed for analytics)
CREATE INDEX idx_generation_usage_generated_at ON generation_usage(generated_at);
-- Enable Row Level Security
ALTER TABLE generation_usage ENABLE ROW LEVEL SECURITY;
-- Create policy to allow users to only see their own usage records
CREATE POLICY "Users can view their own generation usage" ON generation_usage
    FOR SELECT USING (auth.uid() = user_id);
-- Create policy to allow users to insert their own usage records
CREATE POLICY "Users can insert their own generation usage" ON generation_usage
    FOR INSERT WITH CHECK (auth.uid() = user_id);
-- Optional: Create policy for admins to view all records (uncomment if needed)
-- CREATE POLICY "Admins can view all generation usage" ON generation_usage
--     FOR ALL USING (
--         EXISTS (
--             SELECT 1 FROM auth.users 
--             WHERE auth.users.id = auth.uid() 
--             AND auth.users.email = 'admin@yourdomain.com'
--         )
--     );
</file>

<file path="supabase/migrations/002_extend_subscriptions_table.sql">
-- Migration: 002_extend_subscriptions_table.sql
-- Purpose: Extend subscriptions table for Lifetime & Monthly plans
BEGIN;
-- Add new columns for extended subscription management
ALTER TABLE public.subscriptions
  ADD COLUMN IF NOT EXISTS interval TEXT CHECK (interval IN ('lifetime', 'monthly', 'yearly')),
  ADD COLUMN IF NOT EXISTS amount INTEGER,
  ADD COLUMN IF NOT EXISTS currency TEXT DEFAULT 'eur',
  ADD COLUMN IF NOT EXISTS stripe_subscription_id TEXT,
  ADD COLUMN IF NOT EXISTS current_period_start TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS current_period_end TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS cancel_at_period_end BOOLEAN DEFAULT FALSE,
  ADD COLUMN IF NOT EXISTS canceled_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS stripe_price_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_product_id TEXT;
-- Index for Subscription lookups
CREATE INDEX IF NOT EXISTS idx_subscriptions_stripe_subscription_id
  ON public.subscriptions(stripe_subscription_id);
-- Index for Status queries
CREATE INDEX IF NOT EXISTS idx_subscriptions_status
  ON public.subscriptions(status);
-- Index for User ID lookups (if not exists)
CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id
  ON public.subscriptions(user_id);
COMMIT;
</file>

<file path="supabase/migrations/003_create_pending_subscriptions.sql">
-- Migration: 003_create_pending_subscriptions.sql
-- Purpose: Create table for handling payments made before user registration
BEGIN;
-- Table for payments made before registration
CREATE TABLE IF NOT EXISTS public.pending_subscriptions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  email TEXT NOT NULL,
  stripe_customer_id TEXT,
  stripe_payment_intent_id TEXT,
  stripe_subscription_id TEXT,
  stripe_session_id TEXT,
  interval TEXT CHECK (interval IN ('lifetime', 'monthly', 'yearly')),
  amount INTEGER,
  currency TEXT DEFAULT 'eur',
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'activated', 'expired')),
  metadata JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  activated_at TIMESTAMPTZ,
  expires_at TIMESTAMPTZ DEFAULT (NOW() + INTERVAL '30 days')
);
-- Indices for fast lookups
CREATE INDEX idx_pending_subscriptions_email 
  ON public.pending_subscriptions(email);
CREATE INDEX idx_pending_subscriptions_status 
  ON public.pending_subscriptions(status);
CREATE UNIQUE INDEX idx_pending_subscriptions_payment_intent
  ON public.pending_subscriptions(stripe_payment_intent_id)
  WHERE stripe_payment_intent_id IS NOT NULL;
CREATE INDEX idx_pending_subscriptions_expires_at
  ON public.pending_subscriptions(expires_at)
  WHERE status = 'pending';
-- Enable RLS
ALTER TABLE public.pending_subscriptions ENABLE ROW LEVEL SECURITY;
-- Service-role can manage pending subscriptions (for webhook)
CREATE POLICY "Service role can manage pending subscriptions"
  ON public.pending_subscriptions
  FOR ALL
  USING (auth.role() = 'service_role');
-- Users can view their own pending subscriptions (by email match)
CREATE POLICY "Users can view their pending subscriptions"
  ON public.pending_subscriptions
  FOR SELECT
  USING (
    auth.jwt() ->> 'email' = email
  );
COMMIT;
</file>

<file path="supabase/migrations/004_add_is_active_column.sql">
-- Migration: 004_add_is_active_column.sql
-- Purpose: Add missing is_active column to subscriptions table
BEGIN;
-- Add is_active column to subscriptions table
ALTER TABLE public.subscriptions 
  ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT FALSE;
-- Update existing records to set is_active based on status
UPDATE public.subscriptions 
SET is_active = CASE 
  WHEN status = 'active' THEN TRUE
  WHEN status = 'trial' THEN TRUE
  ELSE FALSE
END;
-- Create index for efficient queries
CREATE INDEX IF NOT EXISTS idx_subscriptions_is_active 
  ON public.subscriptions(is_active);
COMMIT;
</file>

<file path="supabase/migrations/005_rollback_is_active_column.sql">
-- Migration: 005_rollback_is_active_column.sql
-- Purpose: Remove is_active column to restore original functionality
BEGIN;
-- Remove the is_active column
ALTER TABLE public.subscriptions 
  DROP COLUMN IF EXISTS is_active;
-- Remove the index
DROP INDEX IF EXISTS idx_subscriptions_is_active;
COMMIT;
</file>

<file path="supabase/migrations/MANUAL_cleanup_usage_tables.sql">
-- MANUAL MIGRATION: Run these commands in your Supabase Dashboard SQL Editor
-- This migration removes all usage tracking tables for ShipFast simplification
-- 
-- Date: 2025-09-05
-- Reason: Radikale Vereinfachung auf ShipFast-Pattern - ein einziges is_active Flag steuert alles
-- Drop generation usage table (used for free tier counting)
DROP TABLE IF EXISTS public.generation_usage CASCADE;
-- Drop extraction usage table (used for premium extraction limits)  
DROP TABLE IF EXISTS public.extraction_usage CASCADE;
-- Drop pending subscriptions table (already replaced by simplified webhook)
DROP TABLE IF EXISTS public.pending_subscriptions CASCADE;
-- Optional: Drop any related functions that might exist
DROP FUNCTION IF EXISTS public.get_monthly_extraction_usage(uuid, text);
DROP FUNCTION IF EXISTS public.increment_generation_usage(uuid, text);
-- Cleanup: Remove extraction limits from subscriptions table since premium is now unlimited
ALTER TABLE public.subscriptions 
DROP COLUMN IF EXISTS extraction_limit,
DROP COLUMN IF EXISTS extraction_reset_at;
-- Verification: Show remaining tables
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name LIKE '%usage%';
-- This should return no results after successful cleanup
</file>

<file path="api/stripe/create-checkout.ts">
import Stripe from 'stripe'
import { createClient } from '@supabase/supabase-js'
⋮----
// ShipFast-inspired simple checkout creation
// Handles both one-time payments and subscriptions
export default async function handler(req: Request)
⋮----
// Get user from Authorization header if present
⋮----
// Continue without user if token is invalid
⋮----
// Create checkout session parameters
⋮----
// Add client reference ID if we have a user
⋮----
// Configure customer handling based on auth state
⋮----
// User is logged in - prefill their email and link to existing customer if available
⋮----
// User is not logged in - collect email and create customer
⋮----
// For one-time payments, set up future usage for cards
⋮----
// Create the checkout session
</file>

<file path="src/components/common/ExtractButton.tsx">
// Premium/Free Extraction Button mit automatischer Methodenwahl
import { useState } from 'react';
import { Download, Zap, AlertCircle } from 'lucide-react';
import { extractFromUrl } from '@/api/extract';
import { extractPremiumFromUrl, canUsePremiumExtraction } from '@/api/extract-premium';
import { useSubscription } from '@/hooks/useSubscription';
import { toast } from 'sonner';
interface ExtractButtonProps {
  url: string;
  onExtracted: (content: string, title?: string) => void;
  disabled?: boolean;
  className?: string;
}
⋮----
const handleExtract = async () =>
⋮----
// Auto-Modus: Wähle beste verfügbare Methode
⋮----
// Zeige verbleibende Nutzungen
⋮----
// Fallback auf kostenlose Version
⋮----
// Nutze kostenlose Version wenn Premium-Limit erreicht
⋮----
// Explizit Premium gewählt
⋮----
// Kostenlose Version (Standard oder explizit gewählt)
⋮----
{/* Methodenauswahl für Premium-Nutzer */}
⋮----
onChange=
⋮----
{/* Extraktions-Button */}
⋮----
{/* Info für Nicht-Premium-Nutzer */}
</file>

<file path="src/components/common/ProtectedRoute.tsx">
import { useEffect, useState, ReactNode } from 'react'
import { Navigate } from 'react-router-dom'
import { getSession, onAuthStateChange } from '@/api/supabase'
interface Props {
  children: ReactNode
}
export default function ProtectedRoute(
</file>

<file path="src/components/graphics/HowItWorksGraphic.tsx">
import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Play, Pause } from 'lucide-react';
⋮----
// Auto-play functionality
⋮----
}, 4000); // Change slide every 4 seconds
⋮----
const handlePrevious = () =>
const handleNext = () =>
const handleStepClick = (index: number) =>
const handleImageLoad = (index: number) =>
⋮----
{/* Desktop version */}
⋮----
{/* Image container with aspect ratio */}
⋮----
{/* Loading skeleton */}
⋮----
{/* Main image */}
⋮----
{/* Navigation arrows */}
⋮----
{/* Play/Pause button */}
⋮----
{/* Step information and indicators */}
⋮----
{/* Step title and description */}
⋮----
{/* Step indicators */}
⋮----
{/* Mobile version */}
⋮----
{/* Image container */}
⋮----
{/* Loading skeleton */}
⋮----
{/* Main image */}
⋮----
{/* Mobile navigation overlay */}
⋮----
{/* Step dots */}
⋮----
{/* Step information */}
</file>

<file path="src/components/landing/DecorativeBackground.tsx">

</file>

<file path="src/components/landing/FAQSection.tsx">
import { useState } from "react";
import { ChevronDown, ChevronUp } from "lucide-react";
interface FAQItem {
  question: string;
  answer: string;
}
⋮----
const toggleItem = (index: number) =>
</file>

<file path="src/config/app.config.ts">
/**
 * Central App Configuration for Social Transformer
 * Based on Ship Fast patterns, adapted for German SaaS with Supabase
 */
export interface StripePlan {
  id: string;
  name: string;
  description: string;
  price: number;
  currency: 'EUR' | 'USD';
  interval: 'lifetime' | 'monthly' | 'yearly';
  // ShipFast pattern: priceId for Checkout Sessions + fallback paymentLink
  priceId: string;
  paymentLink?: string; // Fallback for existing components
  features: string[];
  popular?: boolean;
  badge?: string;
}
⋮----
// ShipFast pattern: priceId for Checkout Sessions + fallback paymentLink
⋮----
paymentLink?: string; // Fallback for existing components
⋮----
export interface AppFeature {
  name: string;
  description: string;
  enabled: boolean;
  requiresAuth?: boolean;
  requiresSubscription?: boolean;
}
export interface AppConfig {
  // App metadata
  appName: string;
  appDescription: string;
  domainName: string;
  companyName: string;
  // URLs
  urls: {
    app: string;
    landing: string;
    signup: string;
    settings: string;
    generator: string;
  };
  // Stripe configuration
  stripe: {
    plans: StripePlan[];
    defaultPlan: string;
    features: {
      free: string[];
      premium: string[];
    };
  };
  // Feature flags
  features: {
    linkedinPosting: AppFeature;
    premiumExtraction: AppFeature;
    postSaving: AppFeature;
    multiPlatform: AppFeature;
    directPosting: AppFeature;
  };
  // Email configuration
  resend?: {
    fromNoReply: string;
    fromAdmin: string;
  };
  // Theme and branding
  theme: {
    primaryColor: string;
    accentColor: string;
    brandColors: {
      gradient: string;
      hover: string;
    };
  };
  // Auth configuration
  auth: {
    loginUrl: string;
    callbackUrl: string;
    redirectAfterAuth: string;
  };
  // Limits and quotas
  limits: {
    freeExtractions: number;
    premiumExtractions: number;
    maxPostLength: {
      linkedin: number;
      x: number;
      instagram: number;
    };
  };
  // Environment-specific settings
  env: {
    isDevelopment: boolean;
    isProduction: boolean;
    baseUrl: string;
  };
}
⋮----
// App metadata
⋮----
// URLs
⋮----
// Stripe configuration
⋮----
// Feature flags
⋮----
// Email configuration
⋮----
// Theme and branding
⋮----
// Auth configuration
⋮----
// Limits and quotas
⋮----
// Environment-specific settings
⋮----
/**
 * Main application configuration
 * German-first SaaS for social media content transformation
 */
⋮----
// ShipFast pattern: priceId for dynamic checkout sessions
⋮----
? "price_1QVhCaGswqzOWBWTAu9e4Hrw" // Development price ID
: "price_1QVhCaGswqzOWBWTAu9e4Hrw", // Production price ID - update when available
paymentLink: import.meta.env.VITE_STRIPE_PAYMENT_LINK_MONTHLY || "", // Fallback
⋮----
// ShipFast pattern: priceId for dynamic checkout sessions
⋮----
? "price_1QVhC7GswqzOWBWTnuNP9wWp" // Development price ID
: "price_1QVhC7GswqzOWBWTnuNP9wWp", // Production price ID - update when available
⋮----
import.meta.env.VITE_STRIPE_PAYMENT_LINK || "", // Fallback
⋮----
/**
 * Get a specific Stripe plan by ID
 */
export function getStripePlan(planId: string): StripePlan | undefined
/**
 * Get the default/recommended Stripe plan
 */
export function getDefaultStripePlan(): StripePlan
/**
 * Check if a feature is enabled
 */
export function isFeatureEnabled(featureName: keyof AppConfig['features']): boolean
/**
 * Get payment link for a plan (fallback method)
 */
export function getPaymentLink(planId: string): string
/**
 * Get Stripe price ID for a plan (ShipFast pattern)
 */
export function getPriceId(planId: string): string
/**
 * Format price with German locale
 */
export function formatPrice(amount: number, currency: string = 'EUR'): string
/**
 * Validate required environment variables
 */
export function validateEnvironment():
/**
 * Get environment-specific configuration
 */
export function getEnvironmentConfig()
// Validate environment on module load in development
</file>

<file path="src/config/env.config.ts">
/**
 * Environment Configuration Utilities
 * Ship Fast pattern for type-safe environment handling
 */
export interface EnvironmentVariables {
  // Supabase (required)
  VITE_SUPABASE_URL: string;
  VITE_SUPABASE_ANON_KEY: string;
  SUPABASE_SERVICE_ROLE_KEY?: string;
  // Claude AI (client-side fallback, server-side required)
  VITE_CLAUDE_API_KEY?: string;
  CLAUDE_API_KEY?: string;
  // Stripe (payment links)
  VITE_STRIPE_PAYMENT_LINK?: string;
  VITE_STRIPE_PAYMENT_LINK_LIFETIME?: string;
  VITE_STRIPE_PAYMENT_LINK_MONTHLY?: string;
  STRIPE_WEBHOOK_SECRET?: string;
  STRIPE_SECRET_KEY?: string;
  // LinkedIn (optional)
  VITE_LINKEDIN_ACCESS_TOKEN?: string;
  VITE_LINKEDIN_AUTHOR_URN?: string;
  // Firecrawl (optional)
  FIRECRAWL_API_KEY?: string;
  // App configuration
  VITE_DOMAIN_NAME?: string;
  VITE_BASE_URL?: string;
  // Tracking (optional)
  VITE_OPIK_API_KEY?: string;
}
⋮----
// Supabase (required)
⋮----
// Claude AI (client-side fallback, server-side required)
⋮----
// Stripe (payment links)
⋮----
// LinkedIn (optional)
⋮----
// Firecrawl (optional)
⋮----
// App configuration
⋮----
// Tracking (optional)
⋮----
export interface EnvironmentValidationResult {
  isValid: boolean;
  missing: string[];
  warnings: string[];
}
/**
 * Required environment variables for basic functionality
 */
⋮----
/**
 * Required environment variables for server-side functionality
 */
⋮----
/**
 * Optional but recommended environment variables
 */
⋮----
/**
 * Validate client-side environment variables
 */
export function validateClientEnvironment(): EnvironmentValidationResult
/**
 * Validate server-side environment variables (Node.js)
 */
export function validateServerEnvironment(): EnvironmentValidationResult
/**
 * Get environment variable (works in both client and server)
 */
export function getEnvVar(varName: keyof EnvironmentVariables): string | undefined
⋮----
// Client-side (Vite)
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
// Server-side (Node.js)
⋮----
/**
 * Get environment variable with fallback
 */
export function getEnvVarWithFallback(
  varName: keyof EnvironmentVariables, 
  fallback: string
): string
/**
 * Check if we're in development mode
 */
export function isDevelopment(): boolean
/**
 * Check if we're in production mode
 */
export function isProduction(): boolean
/**
 * Get all Stripe payment links
 */
export function getStripePaymentLinks()
⋮----
legacy: getEnvVar('VITE_STRIPE_PAYMENT_LINK') // fallback
⋮----
/**
 * Get Supabase configuration
 */
export function getSupabaseConfig()
⋮----
serviceRoleKey: getEnvVar('SUPABASE_SERVICE_ROLE_KEY') // server-side only
⋮----
/**
 * Get LinkedIn configuration
 */
export function getLinkedInConfig()
/**
 * Get Claude AI configuration
 */
export function getClaudeConfig()
⋮----
clientApiKey: getEnvVar('VITE_CLAUDE_API_KEY'), // Not recommended for production
serverApiKey: getEnvVar('CLAUDE_API_KEY'), // Recommended for production
⋮----
/**
 * Get application URLs based on environment
 */
export function getAppUrls()
/**
 * Initialize and validate environment on startup
 */
export function initializeEnvironment(): void
/**
 * Export a typed interface for all environment access
 */
⋮----
// Getters
⋮----
// Configuration objects
⋮----
// Environment checks
⋮----
// Validation
</file>

<file path="src/design-system/components/ActionButtons/index.ts">

</file>

<file path="src/design-system/components/ActionButtons/InstagramShareButton.tsx">
import React from 'react'
import { Button, ButtonProps } from '@/components/ui/button'
import { InstagramLogo } from '../Icons/InstagramLogo'
import { toast } from 'sonner'
interface InstagramShareButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
  postContent?: string
}
export const InstagramShareButton: React.FC<InstagramShareButtonProps> = ({
  text = 'Auf Instagram teilen',
  postContent = '',
  onClick,
  ...props
}) =>
⋮----
const handleInstagramShare = (e: React.MouseEvent<HTMLButtonElement>) =>
⋮----
// Strategy:
// 1) Mobile: try native share (opens system sheet incl. Instagram)
// 2) Mobile: deep link into Instagram app library as fallback
// 3) Desktop: open web composer; copy caption for easy paste
⋮----
// Opening /create/select directly can redirect to the @create profile when not logged in.
// Use login with next param so users land in the composer after login.
⋮----
const copyCaption = () =>
⋮----
// Small hint so the user knows to paste the copied caption
⋮----
const openWebComposer = () =>
const tryDeepLink = () =>
⋮----
// Copy caption then try opening Instagram app to library
⋮----
// Using location.href tends to work better for app deep links on mobile
⋮----
// Navigate away in the current tab; if it fails, fall back shortly after
⋮----
const beforeUnload = ()
⋮----
type NavigatorWithShare = Navigator & { share?: (data: { text?: string; url?: string; title?: string }) => Promise<void> }
⋮----
// Try native share first
⋮----
// If user cancels or share not available, try deep link
</file>

<file path="src/design-system/components/ActionButtons/XShareButton.tsx">
import React from 'react'
import { Button, ButtonProps } from '@/components/ui/button'
import { XLogo } from '../Icons/XLogo'
interface XShareButtonProps extends Omit<ButtonProps, 'variant' | 'leftIcon' | 'children'> {
  text?: string
  tweetContent?: string
}
export const XShareButton: React.FC<XShareButtonProps> = ({
  text = 'Auf X teilen',
  tweetContent = '',
  onClick,
  ...props
}) =>
⋮----
const handleShare = (e: React.MouseEvent<HTMLButtonElement>) =>
</file>

<file path="src/design-system/components/Icons/InstagramLogo.tsx">
import React from 'react'
type InstagramLogoProps = {
  size?: number
  className?: string
}
// Instagram glyph in Lucide-like style: strokes only, no internal fill/background.
⋮----
{/* Outer rounded square (camera body) */}
⋮----
{/* Lens */}
⋮----
{/* Flash dot */}
</file>

<file path="src/hooks/use-toast.ts">
// DEPRECATED: This file has been replaced with Sonner toast library
// Use: import { toast } from 'sonner' instead
// This file can be safely deleted
</file>

<file path="src/pages/Imprint.tsx">
import { useNavigate } from "react-router-dom";
import { FooterBar } from "@/components/landing/FooterBar";
import { HeaderBar } from "@/components/landing/HeaderBar";
⋮----
{/* Header */}
⋮----
{/* Content */}
</file>

<file path="src/pages/Privacy.tsx">
import { useNavigate } from "react-router-dom";
import { FooterBar } from "@/components/landing/FooterBar";
import { HeaderBar } from "@/components/landing/HeaderBar";
⋮----
{/* Header */}
⋮----
{/* Content */}
⋮----
von „http://" auf „https://" wechselt und an dem Schloss-Symbol in Ihrer Browserzeile.
</file>

<file path="src/main.tsx">
import { StrictMode, useEffect } from 'react'
import { createRoot } from 'react-dom/client'
⋮----
import App from './App.tsx'
import { BrowserRouter } from 'react-router-dom'
import { supabase } from './api/supabase.ts'
// Handles Supabase email confirmation links (hash in URL),
// reconciles pending subscriptions immediately, cleans URL, and redirects.
export function BootstrapAuthLink()
⋮----
const cleanupHash = () =>
const attemptReconcile = async () =>
⋮----
// non-blocking
⋮----
// Try immediately; if not signed yet, wait for SIGNED_IN
⋮----
// Safety timeout in case event doesn’t arrive
</file>

<file path="api/claude/v1/messages.ts">
regions: ['fra1'], // Frankfurt für niedrige Latenz in Europa
⋮----
// CORS Origin validation
function getAllowedOrigins(): string[]
function validateOrigin(origin: string | null): string | null
export default async function handler(req: Request)
⋮----
// Validate origin for CORS
⋮----
// Only add CORS header if origin is allowed
⋮----
// Handle preflight
⋮----
// Nur POST erlauben
⋮----
// Request Body durchreichen
⋮----
// Claude API Key aus Environment Variable (OHNE VITE_ prefix!)
⋮----
// Transparenter Proxy zu Anthropic API
⋮----
body: JSON.stringify(body), // Leitet den kompletten Body weiter
⋮----
// Antwort durchreichen
</file>

<file path="src/components/common/AccountButton.tsx">
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
⋮----
import { Button } from "@/components/ui/button";
import { useSubscription } from "@/hooks/useSubscription";
import { getSession, signOut } from "@/api/supabase";
import { toast } from "sonner";
import { 
  CreditCard, 
  LogOut, 
  ChevronDown,
  Loader2,
  Crown,
  Settings
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
interface AccountButtonProps {
  className?: string;
}
⋮----
// Load user email on mount and when popover opens
const loadUserData = async () =>
// Load user data on component mount
⋮----
const handleLogout = async () =>
const handleOpenPortal = async () =>
⋮----
// Error is already handled by the hook
⋮----
const handleOpenSettings = () =>
// Get user initial from email
const getUserInitial = () =>
⋮----
{/* User Info */}
⋮----
{/* Menu Items */}
⋮----
{/* Settings */}
⋮----
{/* Customer Portal - only show if user has active subscription */}
⋮----
{/* Divider */}
⋮----
{/* Logout */}
</file>

<file path="src/components/landing/HeaderBar.tsx">
import { Button } from "@/components/ui/button";
import { Logo } from "@/components/Logo";
type HeaderBarProps = {
  isVisible: boolean;
  onSignup: () => void;
};
export function HeaderBar(
</file>

<file path="src/hooks/useContentGeneration.ts">
import { useState } from 'react'
import { toast } from 'sonner'
import { linkedInPostsFromNewsletter, xTweetsFromBlog, instagramPostsFromBlog } from '@/api/claude'
import type { Platform } from '@/config/platforms'
import { PLATFORM_LABEL } from '@/config/platforms'
interface GenerationProgress {
  progress: number // 0-100
  currentPlatform: string
  totalPlatforms: number
  completedPlatforms: number
}
⋮----
progress: number // 0-100
⋮----
export const useContentGeneration = () =>
⋮----
const generateContent = async (inputText: string, selectedPlatforms: Platform[]) =>
⋮----
// Usage tracking now handled in Generator.tsx
⋮----
// Reset progress states
⋮----
const updatePost = (platform: Platform, index: number, content: string) =>
const clearPosts = () =>
</file>

<file path="src/hooks/useUrlExtraction.ts">
import { useState } from 'react'
import { toast } from 'sonner'
import { extractFromUrl } from '@/api/extract'
interface ExtractionResult {
  title: string
  content: string
}
interface ExtractionUsage {
  used: number
  limit: number
  remaining: number
}
export const useUrlExtraction = () =>
⋮----
const extractContent = async (sourceUrl: string, usePremiumExtraction: boolean, isPro: boolean = false): Promise<ExtractionResult | null> =>
⋮----
// Premium extraction with Firecrawl
⋮----
// Update usage information
⋮----
// Standard extraction with Jina
</file>

<file path="src/pages/Terms.tsx">
import { useNavigate } from "react-router-dom";
import { FooterBar } from "@/components/landing/FooterBar";
import { HeaderBar } from "@/components/landing/HeaderBar";
⋮----
{/* Header */}
⋮----
{/* Content */}
</file>

<file path="api/stripe-webhook-simplified.ts">
import Stripe from 'stripe'
import { createClient } from '@supabase/supabase-js'
// Fix TypeScript definition issue - invoice.subscription exists in API but not in types
⋮----
interface Invoice {
      subscription?: string | Stripe.Subscription | null;
    }
⋮----
// Initialize Stripe
⋮----
// Initialize Supabase with service role key (bypasses RLS)
⋮----
// ShipFast-inspired simplified webhook handler
// No reconciliation complexity - direct processing
export default async function handler(req: Request)
⋮----
// Check if Stripe is configured
⋮----
// Verify webhook signature
⋮----
// Payment successful - grant access (ShipFast pattern)
⋮----
const clientReferenceId = session.client_reference_id // User ID
⋮----
// Get customer details
⋮----
// If no user ID, find/create user by email (ShipFast pattern)
⋮----
// Try to find existing user
⋮----
// Create new user
⋮----
// Determine subscription interval based on price
⋮----
// Create or update subscription record (simplified)
⋮----
is_active: true, // ShipFast-style hasAccess equivalent
⋮----
// For lifetime deals, set a far future date
⋮----
: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days
⋮----
// Upsert subscription
⋮----
// Optional: Send welcome email (similar to your existing logic)
⋮----
// Subscription updated - handle plan changes
⋮----
// In API version 2025-08-27.basil, current_period_start/end moved to subscription items
⋮----
// Subscription canceled - revoke access (ShipFast pattern)
⋮----
is_active: false, // Revoke access
⋮----
// Recurring payment successful - ensure access is granted
⋮----
// invoice.subscription is always a string ID (per TypeScript definition)
⋮----
// Payment failed - could revoke access or wait for retry
⋮----
// invoice.subscription is always a string ID (per TypeScript definition)
⋮----
// For now, just log - Stripe will retry automatically
⋮----
// You could implement grace period logic here
⋮----
// Optional welcome email function
async function sendWelcomeEmail(email: string, details: {
  amount: number
  currency: string
  interval: string
})
</file>

<file path="src/components/common/SavedPosts.tsx">
import { useEffect, useState, memo } from 'react'
import { SavedPost, getSavedPosts, deleteSavedPost, updateSavedPost } from '@/api/supabase'
import { SaveButton, EditButton, DeleteButton, LinkedInShareButton, XShareButton, InstagramShareButton } from '@/design-system/components/ActionButtons'
import { Button } from '@/components/ui/button'
import {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  AlertDialogAction,
} from '@/components/ui/alert-dialog'
interface SavedPostsProps {
  onCollapse: (collapsed: boolean) => void;
  refreshKey?: number;
  isAuthenticated?: boolean;
  onLoginClick?: () => void;
  initialExpanded?: boolean;
}
⋮----
const loadSavedPosts = async () =>
⋮----
// Silent failure - user will see empty state
⋮----
const handleDelete = async (id: number) =>
⋮----
// Error will be handled by UI - show unchanged state
⋮----
const handleEdit = async (id: number, newContent: string) =>
⋮----
// Error handling - editing state remains active
⋮----
{/* Mobile: Bottom drawer */}
⋮----
{/* Desktop: Side panel (full right edge, below header) */}
⋮----
{/* Header with collapse button */}
⋮----
{/* Content area */}
</file>

<file path="src/components/graphics/HowItWorks.tsx">
import React from 'react';
import HowItWorksGraphic from './HowItWorksGraphic';
⋮----
{/* Mobile: Graphic first, Desktop: Steps first */}
⋮----
{/* Right side - Visual graphic */}
</file>

<file path="src/components/subscription/SubscriptionStatus.tsx">
import { useSubscription } from '../../hooks/useSubscription';
import { CustomerPortalButton } from './CustomerPortalButton';
import { UpgradeButton } from '../common/UpgradeButton';
import { Badge } from '../ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Calendar, CreditCard, Clock, AlertTriangle, Crown, Sparkles, TrendingUp, CheckCircle } from 'lucide-react';
// cn utility removed - not used in this component
⋮----
onClick=
⋮----
{/* Plan Info */}
⋮----

⋮----
{/* Trial Info */}
⋮----
{/* Past Due Warning */}
⋮----
{/* Renewal Info for Subscriptions */}
⋮----
{/* Premium Extractions Limit */}
⋮----
{/* Customer Portal Button */}
</file>

<file path="src/hooks/useSubscription.ts">
import { useState, useEffect } from 'react';
import { getSupabaseClient } from '../api/supabase';
import { createCustomerPortal } from '../libs/api-client';
import { toast } from 'sonner';
⋮----
export interface Subscription {
  id: string;
  user_id: string;
  stripe_customer_id: string | null;
  stripe_subscription_id: string | null;
  stripe_payment_intent_id?: string | null;
  status: 'trial' | 'active' | 'canceled' | 'past_due';
  is_active: boolean; // Single Source of Truth for premium access
  interval: 'lifetime' | 'monthly' | 'yearly';
  amount: number | null;
  currency: string | null;
  current_period_start?: string | null;
  current_period_end: string | null;
  trial_starts_at?: string | null;
  trial_ends_at?: string | null;
  created_at?: string;
  updated_at?: string;
}
⋮----
is_active: boolean; // Single Source of Truth for premium access
⋮----
export function useSubscription()
⋮----
const fetchSubscription = async () =>
⋮----
// ShipFast pattern: Simple query focusing on active status
⋮----
// No subscription found - user is not premium
⋮----
const refreshSubscription = () =>
const openCustomerPortal = async () =>
⋮----
// Open in same window to maintain session
⋮----
// ShipFast pattern: Simple hasAccess computed from is_active
⋮----
const isActive = hasAccess; // Alias for compatibility
const isPro = hasAccess; // Alias for compatibility
⋮----
// Simplified status checks
⋮----
// Billing period info (simplified)
⋮----
// Listen for auth changes
⋮----
// Core data
⋮----
// ShipFast pattern: hasAccess as primary access control
⋮----
// Computed states (aliases for compatibility)
⋮----
// Billing info
⋮----
// Actions
</file>

<file path="src/components/common/PaywallGuard.tsx">
import { ReactNode } from 'react'
import { useSubscription } from '@/hooks/useSubscription'
import { ButtonCheckout } from './ButtonCheckout'
import { getDefaultStripePlan } from '@/config'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Zap, Star, TrendingUp } from 'lucide-react'
interface PaywallGuardProps {
  children: ReactNode
  feature?: string
  className?: string
}
// ShipFast-inspired paywall guard
// Simple access control using hasAccess pattern
export function PaywallGuard(
⋮----
// ShipFast pattern: Clean upgrade prompt with direct checkout
</file>

<file path="src/components/landing/CTASection.tsx">
import { Button } from "@/components/ui/button";
</file>

<file path="src/components/common/UpgradeButton.tsx">
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ButtonHTMLAttributes, ReactNode, useState } from "react";
import { getSupabaseClient } from "@/api/supabase";
import { cn } from "@/lib/utils";
import { Check, Loader2, Sparkles, ExternalLink } from "lucide-react";
import { toast } from "sonner";
import { useSubscription } from "@/hooks/useSubscription";
import { getDefaultStripePlan } from "@/config/app.config";
interface UpgradeButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  children?: ReactNode;
  feature?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
  showBadge?: boolean;
}
⋮----
const handleClick = async (e: React.MouseEvent<HTMLButtonElement>) =>
⋮----
// Enrich payment link with user context (helps webhook link user quickly)
⋮----
// Open payment page
⋮----
// Focus the payment window
⋮----
// Start checking for completed payment after a delay
⋮----
const checkPayment = () =>
// Check after 5 seconds, then every 10 seconds for up to 2 minutes
⋮----
// Clean up after 2 minutes
⋮----
// Reset loading state after a short delay
⋮----
// Call original onClick if provided
⋮----
// Show loading state
⋮----
className=
⋮----
// Show redirecting state
⋮----
// If user already has active subscription, show success state
⋮----
// Default upgrade button
⋮----
{/* Enhanced hover effect */}
</file>

<file path="src/components/landing/FooterBar.tsx">
import { Button } from "@/components/ui/button";
import { Logo } from "@/components/Logo";
import { useNavigate, useLocation } from "react-router-dom";
⋮----
const scrollToSection = (sectionId: string) =>
⋮----
// If we're already on the landing page, just scroll
⋮----
// Navigate to landing page first, then scroll to section
⋮----
// Wait for navigation and page load, then scroll
⋮----
}, 300); // Give enough time for page to load
⋮----
const navigateToTop = (path: string) =>
⋮----
// Nach Navigation zum Seitenanfang scrollen
⋮----
{/* Brand Column */}
⋮----
{/* Product Column */}
⋮----
{/* Support Column */}
⋮----
{/* Trust Badges */}
⋮----
{/* Bottom Bar */}
</file>

<file path="src/components/common/Auth.tsx">
import { useState } from 'react'
import { signInWithEmail, signUpWithPassword, signInWithPassword, resetPasswordForEmail } from '@/api/supabase'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { toast } from 'sonner'
import { Eye, EyeOff, Mail, Lock } from 'lucide-react'
import { getSupabaseClient } from '@/api/supabase'
⋮----
type AuthMode = 'login' | 'register' | 'magic-link'
export function Auth()
⋮----
// Safely reconcile pending subscription on the server (service role)
// Instead of writing from the client (RLS-safe and avoids duplication)
const checkPendingSubscription = async (_userEmail: string, _userId: string) =>
⋮----
// Silent failure for subscription reconciliation
⋮----
const handlePasswordAuth = async (e: React.FormEvent) =>
⋮----
// Bei Registrierung Passwörter prüfen
⋮----
// Spezielle Behandlung für verschiedene Fehlertypen
⋮----
// User wurde erstellt, aber noch nicht bestätigt (email confirmation enabled)
⋮----
// Form zurücksetzen
⋮----
// User wurde erstellt und ist bereits eingeloggt (email confirmation disabled)
⋮----
// Check for pending subscription
⋮----
// Spezielle Fehlerbehandlung für Login
⋮----
// Check for pending subscription on login too
⋮----
const handleMagicLink = async (e: React.FormEvent) =>
⋮----
{/* Auth Mode Tabs */}
⋮----
onClick=
⋮----
{/* Auth Forms */}
⋮----
onChange=
</file>

<file path="src/components/landing/FeaturesGrid.tsx">
import { Card, CardContent } from "@/components/ui/card";
import { 
  Link2, 
  Share2, 
  Save, 
  Edit3, 
  Send,
  Zap
} from "lucide-react";
type FeaturesGridProps = {
  isVisible: boolean;
  variant?: "desktop" | "mobile";
};
export function FeaturesGrid(
</file>

<file path="src/App.tsx">
import { Routes, Route } from 'react-router-dom'
import { lazy, Suspense } from 'react'
import { Toaster } from 'sonner'
import CookieConsent from "react-cookie-consent"
import ProtectedRoute from '@/components/common/ProtectedRoute'
// Lazy load all pages for better performance
⋮----
// Loading component
const PageLoader = ()
</file>

<file path="api/extract.ts">
// Serverless function: Extract main article content from a URL using Jina Reader
// Simple, robust, and free content extraction
⋮----
runtime: 'edge', // Now using Edge runtime since no Node dependencies needed
regions: ['fra1'], // Frankfurt for low latency in Europe
⋮----
type ExtractResponse = {
  title?: string;
  byline?: string | null;
  excerpt?: string | null;
  content: string; // plain text/markdown
  length?: number;
  siteName?: string | null;
};
⋮----
content: string; // plain text/markdown
⋮----
// Simple function to truncate content at common footer markers
function truncateContent(content: string): string
⋮----
// End markers that usually indicate footer/archive sections
⋮----
// English - Newsletter specific
⋮----
// English - Blog specific
⋮----
// German - Newsletter specific
⋮----
// German - Blog specific
⋮----
// Common footer markers (multilingual)
⋮----
// Search from 20% of content (newsletter archives can appear early)
⋮----
// CORS Origin validation
function getAllowedOrigins(): string[]
function validateOrigin(origin: string | null): string | null
export default async function handler(req: Request)
⋮----
// Validate origin for CORS
⋮----
// Only add CORS header if origin is allowed
⋮----
// Handle preflight
⋮----
// Basic URL validation
⋮----
// Use Jina Reader for content extraction
⋮----
// Create an AbortController for timeout
⋮----
const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
⋮----
// Use Jina's x-remove-selector to remove common non-content elements
⋮----
// Basic content validation
⋮----
// Apply truncation to remove footer/archive sections
⋮----
// Extract title from first markdown heading if present
⋮----
// Extract site name from URL
⋮----
// Clean up content - remove excessive line breaks
⋮----
byline: null, // Jina doesn't typically provide byline
excerpt: null, // Could extract from first paragraph if needed
⋮----
// Return user-friendly error message
</file>

<file path="src/api/supabase.ts">
import { createClient } from '@supabase/supabase-js'
⋮----
// Export function to get the supabase client
export const getSupabaseClient = ()
export interface SavedPost {
  id: number
  content: string
  created_at: string
  user_id?: string | null
  platform?: 'linkedin' | 'x' | 'instagram'
}
export interface GenerationUsage {
  id: string
  user_id: string
  generated_at: string
  created_at: string
}
export const savePost = async (content: string, platform: 'linkedin' | 'x' | 'instagram' = 'linkedin') =>
⋮----
// Insert with implicit user_id via DEFAULT auth.uid()
⋮----
export const getSavedPosts = async () =>
export const deleteSavedPost = async (id: number) =>
export const updateSavedPost = async (id: number, content: string) =>
// Auth helpers
const getRedirectUrl = () =>
⋮----
// Prefer explicit site URL from env for reliable email redirects
⋮----
// Fallback to current origin (useful in local dev)
⋮----
// Last resort: production URL (ensure this matches Supabase Allowed Redirect URLs)
⋮----
// Magic Link (OTP) Login
export const signInWithEmail = (email: string) =>
// Password-based Sign Up
export const signUpWithPassword = (email: string, password: string) =>
// Password-based Sign In
export const signInWithPassword = (email: string, password: string) =>
// Password Reset
export const resetPasswordForEmail = (email: string) =>
// Update Password (after reset)
export const updatePassword = (newPassword: string) =>
export const signOut = ()
export const getSession = ()
export const onAuthStateChange = (callback: Parameters<typeof supabase.auth.onAuthStateChange>[0])
</file>

<file path="src/components/landing/HeroSection.tsx">
import { useMemo } from "react";
import { Button } from "@/components/ui/button";
import { useTypewriter } from "@/hooks/useTypewriter";
type HeroSectionProps = {
  isVisible: boolean;
  onSignup: () => void;
};
export function HeroSection(
</file>

<file path="src/pages/SignUp.tsx">
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Auth } from "@/components/common/Auth";
import { getSession, onAuthStateChange } from "@/api/supabase";
import { HeaderBarSignUp } from "@/components/landing/HeaderBarSignUp";
export default function SignUp()
⋮----
// Auto-redirect if already logged in
⋮----
{/* Decorative elements */}
⋮----
{/* Header */}
⋮----
{/* Main content */}
⋮----
{/* Footer */}
</file>

<file path="src/api/claude.ts">
import Anthropic from '@anthropic-ai/sdk';
// API Key wird jetzt serverseitig in der Edge Function verwendet
const CLAUDE_API_KEY = 'not-needed' // Dummy-Wert, wird von Edge Function überschrieben
⋮----
baseURL: `${window.location.origin}/api/claude` // Absolute URL - nutzt die aktuelle Domain
⋮----
export async function linkedInPostsFromNewsletter(content: string)
⋮----
// Robustly parse multi-line blocks starting with LINKEDIN:
⋮----
// Fallback to line-based parsing if needed
⋮----
// === Instagram generation ===
⋮----
// === X (Twitter) generation ===
⋮----
function sanitizeTweet(tweet: string): string
⋮----
// Entferne Hashtags vorsichtshalber
⋮----
// Entferne gängige Plattform-/Meta-Labels im Text
⋮----
// Entferne führende Labels/Nummerierung (Tweet 1:, Punkt 2:, 1) 1. - * • (1) etc.)
⋮----
// Entferne Thread-Hinweise (am Anfang oder Ende)
⋮----
.replace(/\s*\(?\d+\/\d+\)?\s*$/g, '') // z. B. "1/5" am Ende
⋮----
// Entferne Emojis (grobe Unicode-Emoji-Range und gängige Symbole)
// Hinweis: bewusst konservativ, um deutsche Umlaute/Sonderzeichen nicht zu treffen
⋮----
// Kürze hart auf 280 Zeichen
⋮----
export async function xTweetsFromBlog(content: string)
⋮----
// Replace {{BLOGPOST}} placeholder with actual content
⋮----
// Parse tweets from XML tags
⋮----
// Extract tweets from <tweet1> through <tweet5> tags
⋮----
// Remove placeholder text if present
⋮----
// Fallback: if no XML tags found, try line-based parsing
⋮----
// Filter out meta lines and analysis content
⋮----
// Clean and deduplicate tweets
⋮----
// Return up to 5 tweets
⋮----
export async function instagramPostsFromBlog(content: string)
⋮----
// Replace {{BLOGPOST}} placeholder with actual content
⋮----
// Parse Instagram posts from XML tags
⋮----
// First try to extract from instagram_descriptions tags
⋮----
// Extract posts starting with INSTAGRAM:
⋮----
// Fallback to line-based parsing if needed
⋮----
// Clean and return up to 3 posts
</file>

<file path="api/extract-premium.ts">
// Edge Function: Premium Content-Extraktion mit Firecrawl
// Unbegrenzter Zugang für Premium-Nutzer (ShipFast-Pattern)
import { createClient } from '@supabase/supabase-js';
⋮----
regions: ['fra1'], // Frankfurt für niedrige Latenz in Europa
⋮----
type ExtractPremiumRequest = {
  url: string;
  userId?: string; // Wird aus Auth-Header extrahiert
};
⋮----
userId?: string; // Wird aus Auth-Header extrahiert
⋮----
type ExtractPremiumResponse = {
  title?: string;
  content: string;
  markdown?: string;
  html?: string;
  screenshot?: string;
  metadata?: {
    sourceUrl: string;
    extractedAt: string;
    extractionType: 'firecrawl';
  };
};
// Initialisiere Supabase Client mit Service Role für RLS-Bypass
function getSupabaseClient()
⋮----
// WICHTIG: Keine Authorization-Header hier, damit Service Role aktiv bleibt
⋮----
// Extrahiere User ID aus JWT Token
async function getUserFromAuth(authHeader: string, supabase: ReturnType<typeof getSupabaseClient>)
// ShipFast Pattern: Simple Premium Access Check
async function checkPremiumAccess(
  supabase: ReturnType<typeof getSupabaseClient>, 
  userId: string
): Promise<
⋮----
// No subscription found - user is not premium
⋮----
// CORS Origin validation
function getAllowedOrigins(): string[]
function validateOrigin(origin: string | null): string | null
// Hauptfunktion
export default async function handler(req: Request)
⋮----
// Validate origin for CORS
⋮----
// Only add CORS header if origin is allowed
⋮----
// Handle Preflight
⋮----
// 1. Authentifizierung prüfen
⋮----
// 2. Subscription prüfen
⋮----
// 3. Request-Body parsen
⋮----
// URL validieren
⋮----
// 4. Premium-Zugang prüfen
⋮----
// 5. Firecrawl API aufrufen
⋮----
// Nutze Scrape API für synchrone Inhaltsextraktion
⋮----
waitFor: 2000, // Warte auf JavaScript-Rendering
removeBase64Images: true // Entferne Base64-Bilder für kleinere Payloads
⋮----
// Log error for debugging
⋮----
// Scrape API Response Format:
// {
//   success: true,
//   data: {
//     markdown: "...",
//     content: "...",
//     html: "...",
//     metadata: {
//       title: "...",
//       description: "...",
//       ...
//     }
//   }
// }
⋮----
// Extrahiere die relevanten Daten aus der Scrape API Response
⋮----
// 6. Response formatieren
</file>

<file path="src/components/landing/PricingSection.tsx">
import { Check } from "lucide-react";
import { Button } from "@/components/ui/button";
import config, { formatPrice, getPaymentLink } from "@/config/app.config";
⋮----
const handlePlanPurchase = (planId: string) =>
</file>

<file path="src/pages/Settings.tsx">
import { useEffect, useState } from "react";
import { useSubscription } from "@/hooks/useSubscription";
import { UpgradeButton } from "@/components/common/UpgradeButton";
import { getSession, signOut } from "@/api/supabase";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
import { Link, useNavigate } from "react-router-dom";
import { 
  User, 
  CreditCard, 
  FileText, 
  HelpCircle, 
  LogOut, 
  ArrowLeft,
  Mail,
  Shield,
  FileHeart,
  Crown,
  Sparkles
} from "lucide-react";
export default function Settings()
⋮----
const handleLogout = async () =>
⋮----
// billingPortalUrl removed - Customer Portal now handled via API
⋮----
{/* Mobile Header */}
⋮----
<div className="w-10" /> {/* Spacer for centering */}
⋮----
{/* Desktop Header */}
⋮----
{/* Main Content */}
⋮----
{/* Account Card */}
⋮----
{/* Subscription Card */}
⋮----
{/* Show subscription details for Pro users */}
⋮----
{/* Customer Portal Button - Enhanced with better UX */}
⋮----
onClick=
⋮----
{/* Quick Actions Card */}
⋮----
{/* Support Card - Full Width on Mobile/Tablet, Normal on Desktop */}
⋮----
{/* App Version Footer - Mobile Only */}
</file>

<file path="src/pages/Landing.tsx">
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getSession, onAuthStateChange } from "@/api/supabase";
import HowItWorks from "@/components/graphics/HowItWorks";
import { DecorativeBackground } from "@/components/landing/DecorativeBackground";
import { HeaderBar } from "@/components/landing/HeaderBar";
import { HeroSection } from "@/components/landing/HeroSection";
import { FeaturesGrid } from "@/components/landing/FeaturesGrid";
import { PricingSection } from "@/components/landing/PricingSection";
import { FooterBar } from "@/components/landing/FooterBar";
import { CTASection } from "@/components/landing/CTASection";
import { FAQSection } from "@/components/landing/FAQSection";
⋮----
// Auto-redirect if already logged in
⋮----
{/* Main content with staggered animations */}
⋮----
{/* Left column: Marketing content with entrance animations */}
⋮----
{/* Right column: Demo Video */}
⋮----
{/* Demo Video with GIF-like behavior */}
⋮----
{/* Features grid below the hero+graphic section */}
⋮----
{/* How It Works Section - außerhalb des Containers für vollen Hintergrund */}
⋮----
{/* Pricing Section - außerhalb des Containers für vollen Hintergrund */}
⋮----
{/* CTA Section - new section before footer */}
⋮----
{/* FAQ Section - new section before footer */}
⋮----
{/* Footer Section - außerhalb des Containers für vollen Hintergrund */}
</file>

<file path="src/pages/Generator.tsx">
import { useEffect, useState } from "react";
import { savePost } from "@/api/supabase";
import { SavedPosts } from "@/components/common/SavedPosts";
import { AccountButton } from "@/components/common/AccountButton";
import {
  createLinkedInDraftPost,
  createLinkedInShareUrl,
  LinkedInAPIError,
} from "@/api/linkedin";
import { Button } from "@/components/ui/button";
import {
  SaveButton,
  EditButton,
  LinkedInShareButton,
  XShareButton,
  InstagramShareButton,
} from "@/design-system/components/ActionButtons";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { toast } from "sonner";
import { Loader2 } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Auth } from "@/components/common/Auth";
// Link import removed - AccountButton now handles navigation
import { PlatformSelector } from "@/components/common/PlatformSelector";
import type { Platform } from "@/config/platforms";
import { PLATFORM_LABEL } from "@/config/platforms";
import { InstagramLogo } from "@/design-system/components/Icons/InstagramLogo";
import { PaywallGuard } from "@/components/common/PaywallGuard";
import { useAuth } from "@/hooks/useAuth";
import { useSubscription } from "@/hooks/useSubscription";
import { useContentGeneration } from "@/hooks/useContentGeneration";
import { useUrlExtraction } from "@/hooks/useUrlExtraction";
import { usePostEditing } from "@/hooks/usePostEditing";
⋮----
// Local state
⋮----
// ShipFast pattern: localStorage-based free tier tracking
⋮----
// Custom hooks
⋮----
// ShipFast pattern: Simple access control
const canTransform = ()
const canExtract = ()
⋮----
// ShipFast pattern: Save free generations count to localStorage
⋮----
// Fix Magic Link auth state synchronization
⋮----
// Clean redirect to refresh auth state and remove URL parameters
⋮----
// Event handlers with free tier limits
⋮----
const handleRemix = async () =>
⋮----
// ShipFast pattern: Check limit before generation
⋮----
// Increment counter only on successful generation for free users
⋮----
const handleExtract = async () =>
⋮----
// ShipFast pattern: Check limit before extraction
⋮----
// Increment counter only on successful extraction for free users
⋮----
const handleSavePost = async (content: string, platform: 'linkedin' | 'x' | 'instagram' = 'linkedin') =>
const handleSaveEdit = () =>
⋮----
{/* Professional Header Bar */}
⋮----
placeholder="https://example.com/dein-blogpost"
⋮----
onChange=
⋮----
{/* Premium extraction toggle - visible to all, but gated for free users */}
⋮----
{/* Progress bar - only visible when generating */}
⋮----
{/* Extra spacing for mobile to prevent content being covered by bottom drawer + safe area */}
⋮----
onClick=
⋮----
if (error instanceof LinkedInAPIError)
</file>

</files>
