diff --git a/.env.example b/.env.example
index 84ab2b9..238dbf9 100644
--- a/.env.example
+++ b/.env.example
@@ -45,3 +45,13 @@ VITE_LINKEDIN_AUTHOR_URN=""
 # API key from https://www.firecrawl.dev/
 # Required for premium content extraction (JavaScript rendering, PDFs)
 FIRECRAWL_API_KEY=""
+
+# --- Feature Flags (For A/B Testing) ---
+# Enable new UX design (default: false, can be overridden with rollout percentage)
+VITE_ENABLE_NEW_UX=false
+# Enable mobile bottom sheet for saved posts (default: false)
+VITE_ENABLE_MOBILE_BOTTOM_SHEET=false
+# Enable platform-specific animations (default: false)
+VITE_ENABLE_PLATFORM_ANIMATIONS=false
+# Enable premium features UI (default: false)
+VITE_ENABLE_PREMIUM_FEATURES=false
diff --git a/docs/ux-implementation-phase1-2.md b/docs/ux-implementation-phase1-2.md
new file mode 100644
index 0000000..49dc4af
--- /dev/null
+++ b/docs/ux-implementation-phase1-2.md
@@ -0,0 +1,239 @@
+# UX/UI Implementation Documentation - Phase 1 & 2
+
+## Overview
+Successfully implemented Phase 1 and Phase 2 of the comprehensive UX/UI improvements for the social media post generation app based on Gemini 2.5 Pro's deep analysis.
+
+## Completed Components & Features
+
+### Phase 1: Foundation & Infrastructure ✅
+
+#### 1. Feature Flag System (`src/hooks/useFeatureFlag.ts`)
+- Comprehensive feature flag management with A/B testing support
+- Rollout percentage control
+- User group targeting
+- Analytics integration
+- Local override capability for testing
+- Feature flags defined:
+  - `VITE_ENABLE_NEW_UX` - Main UX toggle
+  - `VITE_ENABLE_MOBILE_BOTTOM_SHEET` - Mobile improvements
+  - `VITE_ENABLE_PLATFORM_ANIMATIONS` - Animation features
+  - `VITE_ENABLE_PREMIUM_FEATURES` - Premium UI elements
+
+#### 2. UnifiedLayout Component (`src/components/layouts/UnifiedLayout.tsx`)
+- Responsive three-mode layout system:
+  - **Desktop (≥1024px)**: Two-column layout (60/40 split)
+  - **Tablet (768-1023px)**: Single column with sections
+  - **Mobile (<768px)**: Tab-based navigation with bottom bar
+- Collapsible sidebar support
+- Mobile menu overlay pattern
+- Context provider for nested components
+
+#### 3. CharacterCounter Component (`src/components/common/CharacterCounter.tsx`)
+- Platform-specific character limits:
+  - LinkedIn: 3000 chars (ideal: 1300)
+  - X/Twitter: 280 chars
+  - Instagram: 2200 chars (ideal: 125)
+- Visual status indicators:
+  - Green (ideal length)
+  - Yellow (80% warning)
+  - Red (95% critical)
+- Two display modes: inline and floating
+- Integrated textarea component with real-time feedback
+- Progress bar visualization
+
+#### 4. Performance Monitoring (`src/utils/performance.ts`)
+- Comprehensive performance tracking system
+- Key metrics tracked:
+  - Time to Interactive (TTI)
+  - Extraction duration
+  - Generation duration
+  - Time to first post
+- Web Vitals monitoring (FCP, LCP, FID)
+- Component render performance tracking
+- API call performance monitoring
+- Analytics integration (Google Analytics, custom)
+
+### Phase 2: Component Integration ✅
+
+#### 1. WorkflowStepper (`src/components/common/WorkflowStepper.tsx`)
+- Three-stage workflow visualization:
+  1. Import Content
+  2. Generate Posts
+  3. Share & Save
+- Desktop and mobile-optimized views
+- Interactive step navigation (backwards only)
+- Visual feedback with animations
+- Progress indication with completion states
+
+#### 2. EnhancedUrlExtractor (`src/components/common/EnhancedUrlExtractor.tsx`)
+- Prominent CTA design with trust indicators
+- Tab interface for URL/Text input
+- Premium extraction toggle with benefits display
+- Popular source shortcuts (Medium, Substack, LinkedIn, Blogs)
+- Usage indicators for premium features
+- Social proof elements (10k+ posts, 5x reach)
+
+#### 3. Skeleton Loaders (`src/components/common/SkeletonLoaders.tsx`)
+- Content extraction skeleton with progress steps
+- Platform-specific generation animations
+- Post card skeletons
+- Analytics skeleton
+- Enhanced loading states with informative messages
+- Smooth shimmer effects
+
+#### 4. PremiumComparison (`src/components/common/PremiumComparison.tsx`)
+- Clear feature comparison table
+- Visual plan differentiation
+- Trust badges and social proof
+- Compelling upgrade CTAs
+- Feature icons and highlights
+- Monthly/yearly pricing display
+
+#### 5. GeneratorV2 Page (`src/pages/GeneratorV2.tsx`)
+- Full integration of new components
+- Feature flag-controlled rollout
+- Backward compatibility with GeneratorV1
+- Workflow state management
+- Performance tracking integration
+- Loading state improvements
+
+## Implementation Status
+
+### Completed Tasks ✅
+- [x] Phase 1: Create feature flag system with VITE_ENABLE_NEW_UX
+- [x] Phase 1: Build UnifiedLayout component with responsive design
+- [x] Phase 1: Create CharacterCounter with platform limits
+- [x] Phase 1: Setup performance monitoring infrastructure
+- [x] Phase 2: Integrate WorkflowStepper into Generator
+- [x] Phase 2: Wire EnhancedUrlExtractor with existing hooks
+- [x] Phase 2: Apply skeleton loaders to loading states
+
+### Pending Tasks 📋
+- [ ] Phase 3: Migrate to usePostGeneratorState hook
+- [ ] Phase 4: Add mobile bottom sheet for SavedPosts
+- [ ] Phase 4: Implement platform-specific animations
+- [ ] Phase 5: Performance optimization with React.memo
+- [ ] Phase 5: A/B testing and metrics analysis
+
+## Usage Instructions
+
+### Enable New UX
+1. Add to your `.env` file:
+   ```env
+   VITE_ENABLE_NEW_UX=true
+   ```
+
+2. Or use rollout percentage (10% of users):
+   ```typescript
+   const newUxEnabled = useFeatureFlag('NEW_UX', {
+     rolloutPercentage: 10
+   });
+   ```
+
+3. Test locally with localStorage override:
+   ```javascript
+   localStorage.setItem('feature_VITE_ENABLE_NEW_UX', 'true');
+   ```
+
+### Monitor Performance
+The app automatically tracks key metrics:
+- Time to first post
+- Content extraction duration
+- Post generation time
+- Component render performance
+
+View in browser console (development mode) or analytics dashboard.
+
+## Key Improvements Achieved
+
+### User Experience
+- **Clear workflow progression** - Users always know where they are
+- **Prominent URL extraction** - Primary action is now obvious
+- **Better loading feedback** - Informative skeletons and progress indicators
+- **Mobile-optimized** - Responsive design with touch-friendly interactions
+
+### Technical
+- **Feature flag system** - Safe rollout with A/B testing
+- **Performance monitoring** - Real metrics for optimization
+- **Modular architecture** - Clean component separation
+- **Type safety** - Full TypeScript implementation
+
+### Visual Design
+- **Consistent visual hierarchy** - Clear primary/secondary actions
+- **Platform-specific indicators** - Visual cues for each platform
+- **Character count feedback** - Real-time visual warnings
+- **Professional aesthetics** - Modern, clean interface
+
+## Next Steps
+
+### Phase 3: State Migration
+- Implement usePostGeneratorState throughout
+- Create state adapter layer
+- Migrate feature by feature
+- Maintain localStorage compatibility
+
+### Phase 4: Mobile Enhancements
+- Mobile bottom sheet for SavedPosts
+- Platform-specific animations
+- Swipe gestures
+- Touch optimizations
+
+### Phase 5: Performance & Launch
+- React.memo optimizations
+- Bundle size reduction
+- A/B testing metrics
+- Gradual rollout strategy
+
+## Testing Checklist
+
+### Desktop Testing
+- [ ] Two-column layout displays correctly
+- [ ] Workflow stepper navigation works
+- [ ] Character counter updates in real-time
+- [ ] URL extraction with progress feedback
+
+### Mobile Testing
+- [ ] Tab navigation functions properly
+- [ ] Touch targets are adequate (44x44px minimum)
+- [ ] Character counter visible and functional
+- [ ] Loading states display correctly
+
+### Cross-Browser Testing
+- [ ] Chrome/Edge
+- [ ] Firefox
+- [ ] Safari (macOS/iOS)
+- [ ] Mobile browsers
+
+## Metrics to Monitor
+
+### Success Metrics
+- Time to first post generation
+- Bounce rate (especially mobile)
+- Feature adoption rate
+- Error rates
+- Conversion rate (free to paid)
+
+### Performance Metrics
+- First Contentful Paint (FCP)
+- Largest Contentful Paint (LCP)
+- First Input Delay (FID)
+- Cumulative Layout Shift (CLS)
+
+## Rollback Plan
+
+If issues arise:
+1. Set `VITE_ENABLE_NEW_UX=false` in environment
+2. Feature flag automatically reverts to GeneratorV1
+3. All new components remain but unused
+4. No database migrations to rollback
+
+## Support & Documentation
+
+- Feature flag controls: `.env.example`
+- Component documentation: Inline JSDoc
+- Performance dashboard: Development console
+- A/B testing metrics: Analytics platform
+
+---
+
+*Implementation completed as planned. The new UX is ready for controlled rollout and testing.*
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 8cc493e..ada82e7 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,7 +8,7 @@ import { AuthProvider } from '@/contexts/AuthContext'
 
 // Lazy load all pages for better performance
 const Landing = lazy(() => import('@/pages/Landing'))
-const Generator = lazy(() => import('@/pages/Generator'))
+const Generator = lazy(() => import('@/pages/GeneratorV2'))
 const SignUp = lazy(() => import('@/pages/SignUp'))
 const Settings = lazy(() => import('@/pages/Settings'))
 const Privacy = lazy(() => import('@/pages/Privacy'))
diff --git a/src/components/common/CharacterCounter.tsx b/src/components/common/CharacterCounter.tsx
new file mode 100644
index 0000000..d457642
--- /dev/null
+++ b/src/components/common/CharacterCounter.tsx
@@ -0,0 +1,324 @@
+import { useMemo, useEffect, useState } from 'react';
+import { cn } from '@/lib/utils';
+import { AlertTriangle, CheckCircle, AlertCircle } from 'lucide-react';
+import type { Platform } from '@/config/platforms';
+
+interface CharacterCounterProps {
+  value: string;
+  platform?: Platform;
+  maxLength?: number;
+  showWarnings?: boolean;
+  className?: string;
+  position?: 'inline' | 'floating';
+  onChange?: (value: string) => void; // Optional, not used in display-only mode
+}
+
+// Platform-specific character limits
+const PLATFORM_LIMITS: Record<Platform, { ideal: number; max: number }> = {
+  linkedin: { ideal: 1300, max: 3000 },
+  x: { ideal: 280, max: 280 },
+  instagram: { ideal: 125, max: 2200 },
+};
+
+export function CharacterCounter({
+  value,
+  platform,
+  maxLength,
+  showWarnings = true,
+  className,
+  position = 'inline',
+  onChange: _onChange, // Not used in display component
+}: CharacterCounterProps) {
+  const [isAnimating, setIsAnimating] = useState(false);
+
+  // Determine the actual limit
+  const limit = useMemo(() => {
+    if (maxLength) return { ideal: maxLength * 0.8, max: maxLength };
+    if (platform) return PLATFORM_LIMITS[platform];
+    return { ideal: 500, max: 1000 }; // Default limits
+  }, [platform, maxLength]);
+
+  const charCount = value.length;
+  const percentage = (charCount / limit.max) * 100;
+
+  // Determine status
+  const status = useMemo(() => {
+    if (charCount === 0) return 'empty';
+    if (charCount > limit.max) return 'exceeded';
+    if (charCount > limit.max * 0.95) return 'critical';
+    if (charCount > limit.max * 0.8) return 'warning';
+    if (charCount <= limit.ideal) return 'ideal';
+    return 'good';
+  }, [charCount, limit]);
+
+  // Trigger animation on significant changes
+  useEffect(() => {
+    setIsAnimating(true);
+    const timer = setTimeout(() => setIsAnimating(false), 300);
+    return () => clearTimeout(timer);
+  }, [status]);
+
+  // Get status color
+  const getStatusColor = () => {
+    switch (status) {
+      case 'exceeded': return 'text-red-500 border-red-500';
+      case 'critical': return 'text-red-400 border-red-400';
+      case 'warning': return 'text-yellow-500 border-yellow-500';
+      case 'ideal': return 'text-green-500 border-green-500';
+      case 'good': return 'text-blue-500 border-blue-500';
+      default: return 'text-muted-foreground border-muted';
+    }
+  };
+
+  // Get status icon
+  const getStatusIcon = () => {
+    switch (status) {
+      case 'exceeded':
+      case 'critical':
+        return <AlertTriangle className="h-3 w-3" />;
+      case 'warning':
+        return <AlertCircle className="h-3 w-3" />;
+      case 'ideal':
+        return <CheckCircle className="h-3 w-3" />;
+      default:
+        return null;
+    }
+  };
+
+  // Get status message
+  const getStatusMessage = () => {
+    if (status === 'exceeded') {
+      return `${charCount - limit.max} characters over limit`;
+    }
+    if (status === 'critical') {
+      return `${limit.max - charCount} characters left`;
+    }
+    if (status === 'warning') {
+      return 'Approaching limit';
+    }
+    if (status === 'ideal') {
+      return 'Perfect length';
+    }
+    if (charCount === 0) {
+      return 'Start typing...';
+    }
+    return `${limit.max - charCount} available`;
+  };
+
+  // Inline counter component
+  const InlineCounter = () => (
+    <div className={cn(
+      "flex items-center gap-2 text-sm transition-all duration-300",
+      getStatusColor(),
+      isAnimating && "scale-105",
+      className
+    )}>
+      {/* Character count */}
+      <span className="font-mono font-medium">
+        {charCount}/{limit.max}
+      </span>
+
+      {/* Status icon */}
+      {showWarnings && getStatusIcon()}
+
+      {/* Status message */}
+      {showWarnings && (
+        <span className="text-xs">
+          {getStatusMessage()}
+        </span>
+      )}
+
+      {/* Platform indicator */}
+      {platform && (
+        <span className="text-xs px-1.5 py-0.5 rounded bg-muted">
+          {platform}
+        </span>
+      )}
+    </div>
+  );
+
+  // Floating counter component
+  const FloatingCounter = () => (
+    <div className={cn(
+      "fixed bottom-4 right-4 z-40",
+      "px-3 py-2 rounded-lg shadow-lg",
+      "bg-background border-2",
+      "transition-all duration-300",
+      getStatusColor(),
+      isAnimating && "scale-105",
+      className
+    )}>
+      <div className="flex items-center gap-3">
+        {/* Progress ring */}
+        <div className="relative w-10 h-10">
+          <svg className="transform -rotate-90 w-10 h-10">
+            <circle
+              cx="20"
+              cy="20"
+              r="16"
+              stroke="currentColor"
+              strokeWidth="2"
+              fill="none"
+              opacity="0.2"
+            />
+            <circle
+              cx="20"
+              cy="20"
+              r="16"
+              stroke="currentColor"
+              strokeWidth="2"
+              fill="none"
+              strokeDasharray={`${percentage} ${100 - percentage}`}
+              strokeDashoffset="25"
+              className="transition-all duration-300"
+            />
+          </svg>
+          <span className="absolute inset-0 flex items-center justify-center text-xs font-bold">
+            {Math.round(percentage)}%
+          </span>
+        </div>
+
+        {/* Count and status */}
+        <div>
+          <div className="font-mono text-sm font-medium">
+            {charCount}/{limit.max}
+          </div>
+          <div className="text-xs opacity-80">
+            {getStatusMessage()}
+          </div>
+        </div>
+
+        {/* Icon */}
+        {showWarnings && (
+          <div className="ml-2">
+            {getStatusIcon()}
+          </div>
+        )}
+      </div>
+    </div>
+  );
+
+  return position === 'floating' ? <FloatingCounter /> : <InlineCounter />;
+}
+
+// Character counter with textarea integration
+interface CharacterCounterTextareaProps extends CharacterCounterProps {
+  placeholder?: string;
+  rows?: number;
+  disabled?: boolean;
+  autoFocus?: boolean;
+  onFocus?: () => void;
+  onBlur?: () => void;
+}
+
+export function CharacterCounterTextarea({
+  value,
+  platform,
+  maxLength,
+  showWarnings = true,
+  className,
+  placeholder,
+  rows = 4,
+  disabled = false,
+  autoFocus = false,
+  onChange,
+  onFocus,
+  onBlur,
+}: CharacterCounterTextareaProps) {
+  const limit = maxLength || (platform ? PLATFORM_LIMITS[platform].max : 1000);
+  const charCount = value.length;
+  const percentage = (charCount / limit) * 100;
+  const isOverLimit = charCount > limit;
+
+  return (
+    <div className="space-y-2">
+      <div className="relative">
+        <textarea
+          value={value}
+          onChange={(e) => onChange?.(e.target.value)}
+          onFocus={onFocus}
+          onBlur={onBlur}
+          placeholder={placeholder}
+          rows={rows}
+          disabled={disabled}
+          autoFocus={autoFocus}
+          maxLength={isOverLimit ? undefined : limit}
+          className={cn(
+            "w-full px-3 py-2 rounded-md border bg-background",
+            "transition-all duration-200",
+            "focus:outline-none focus:ring-2",
+            isOverLimit
+              ? "border-red-500 focus:ring-red-500/20"
+              : charCount > limit * 0.8
+              ? "border-yellow-500 focus:ring-yellow-500/20"
+              : "border-input focus:ring-primary/20",
+            disabled && "opacity-50 cursor-not-allowed",
+            className
+          )}
+        />
+
+        {/* Inline counter in corner */}
+        <div className="absolute bottom-2 right-2 pointer-events-none">
+          <CharacterCounter
+            value={value}
+            platform={platform}
+            maxLength={maxLength}
+            showWarnings={false}
+            className="text-xs"
+          />
+        </div>
+      </div>
+
+      {/* Progress bar */}
+      <div className="h-1 bg-muted rounded-full overflow-hidden">
+        <div
+          className={cn(
+            "h-full transition-all duration-300",
+            isOverLimit
+              ? "bg-red-500"
+              : percentage > 80
+              ? "bg-yellow-500"
+              : percentage > 60
+              ? "bg-blue-500"
+              : "bg-green-500"
+          )}
+          style={{ width: `${Math.min(percentage, 100)}%` }}
+        />
+      </div>
+
+      {/* Detailed status */}
+      {showWarnings && (
+        <CharacterCounter
+          value={value}
+          platform={platform}
+          maxLength={maxLength}
+          showWarnings={true}
+          className="justify-between"
+        />
+      )}
+    </div>
+  );
+}
+
+// Hook for character counting logic
+export function useCharacterCount(
+  value: string,
+  limit?: number,
+  platform?: Platform
+) {
+  const actualLimit = limit || (platform ? PLATFORM_LIMITS[platform].max : 1000);
+  const charCount = value.length;
+  const remaining = actualLimit - charCount;
+  const percentage = (charCount / actualLimit) * 100;
+  const isOverLimit = charCount > actualLimit;
+  const isNearLimit = charCount > actualLimit * 0.8;
+
+  return {
+    count: charCount,
+    remaining,
+    percentage,
+    isOverLimit,
+    isNearLimit,
+    limit: actualLimit,
+  };
+}
\ No newline at end of file
diff --git a/src/components/common/EnhancedUrlExtractor.tsx b/src/components/common/EnhancedUrlExtractor.tsx
new file mode 100644
index 0000000..5cb49db
--- /dev/null
+++ b/src/components/common/EnhancedUrlExtractor.tsx
@@ -0,0 +1,230 @@
+import { useState } from 'react';
+import { Button } from '@/components/ui/button';
+import { Input } from '@/components/ui/input';
+import { Badge } from '@/components/ui/badge';
+import { Card } from '@/components/ui/card';
+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
+import { toast } from 'sonner';
+import { cn } from '@/lib/utils';
+import {
+  Link2,
+  FileText,
+  Sparkles,
+  Loader2,
+  Globe,
+  Zap,
+  ArrowRight,
+  CheckCircle2,
+  AlertCircle,
+  TrendingUp
+} from 'lucide-react';
+
+interface EnhancedUrlExtractorProps {
+  value: string;
+  onContentExtracted: (content: string) => void;
+  onTextInput: (text: string) => void;
+  isExtracting?: boolean;
+  isPro?: boolean;
+  usageRemaining?: number;
+  className?: string;
+}
+
+export function EnhancedUrlExtractor({
+  value,
+  onContentExtracted,
+  onTextInput,
+  isExtracting = false,
+  isPro = false,
+  usageRemaining,
+  className,
+}: EnhancedUrlExtractorProps) {
+  const [url, setUrl] = useState('');
+  const [usePremium, setUsePremium] = useState(false);
+  const [activeTab, setActiveTab] = useState<'url' | 'text'>('url');
+
+  const handleExtract = () => {
+    if (!url.trim()) {
+      toast.error('Bitte gib eine gültige URL ein');
+      return;
+    }
+
+    // Validate URL format
+    try {
+      new URL(url);
+    } catch {
+      toast.error('Ungültiges URL-Format');
+      return;
+    }
+
+    // This would trigger the actual extraction
+    onContentExtracted(url);
+  };
+
+  const popularSources = [
+    { name: 'Medium', icon: '📝', example: 'medium.com/@user/article' },
+    { name: 'Substack', icon: '📬', example: 'newsletter.substack.com' },
+    { name: 'LinkedIn', icon: '💼', example: 'linkedin.com/pulse/' },
+    { name: 'Blog', icon: '🌐', example: 'yourblog.com/post' },
+  ];
+
+  return (
+    <Card className={cn("border-2 border-primary/20 shadow-lg", className)}>
+      <div className="p-6 space-y-6">
+        {/* Header with Benefits */}
+        <div className="text-center space-y-2">
+          <div className="flex items-center justify-center gap-2 mb-3">
+            <div className="relative">
+              <div className="absolute inset-0 animate-pulse bg-primary/20 rounded-full blur-xl" />
+              <Sparkles className="relative h-8 w-8 text-primary" />
+            </div>
+            <h2 className="text-2xl font-bold">Content importieren</h2>
+          </div>
+          <p className="text-muted-foreground">
+            Verwandle jeden Artikel in virale Social Media Posts
+          </p>
+        </div>
+
+        {/* Trust Indicators */}
+        <div className="flex items-center justify-center gap-6 text-sm">
+          <div className="flex items-center gap-1.5">
+            <CheckCircle2 className="h-4 w-4 text-green-500" />
+            <span className="text-muted-foreground">10k+ Posts erstellt</span>
+          </div>
+          <div className="flex items-center gap-1.5">
+            <TrendingUp className="h-4 w-4 text-blue-500" />
+            <span className="text-muted-foreground">5x mehr Reichweite</span>
+          </div>
+        </div>
+
+        {/* Tab Selection */}
+        <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as 'url' | 'text')}>
+          <TabsList className="grid w-full grid-cols-2">
+            <TabsTrigger value="url" className="gap-2">
+              <Link2 className="h-4 w-4" />
+              URL importieren
+            </TabsTrigger>
+            <TabsTrigger value="text" className="gap-2">
+              <FileText className="h-4 w-4" />
+              Text einfügen
+            </TabsTrigger>
+          </TabsList>
+
+          <TabsContent value="url" className="space-y-4 mt-6">
+            {/* URL Input Group */}
+            <div className="space-y-3">
+              <div className="relative">
+                <Globe className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
+                <Input
+                  type="url"
+                  placeholder="https://example.com/artikel"
+                  value={url}
+                  onChange={(e) => setUrl(e.target.value)}
+                  onKeyDown={(e) => e.key === 'Enter' && handleExtract()}
+                  className="pl-10 pr-4 h-12 text-base"
+                  disabled={isExtracting}
+                />
+              </div>
+
+              {/* Premium Toggle */}
+              <div className="flex items-center justify-between p-3 rounded-lg bg-muted/50">
+                <label className="flex items-center gap-3 cursor-pointer flex-1">
+                  <input
+                    type="checkbox"
+                    checked={usePremium}
+                    onChange={(e) => setUsePremium(e.target.checked)}
+                    className="rounded border-gray-300 text-primary focus:ring-primary h-4 w-4"
+                    disabled={!isPro}
+                  />
+                  <div className="flex-1">
+                    <div className="flex items-center gap-2">
+                      <Zap className="h-4 w-4 text-yellow-500" />
+                      <span className="font-medium">Premium-Extraktion</span>
+                      {!isPro && <Badge variant="secondary">Pro</Badge>}
+                    </div>
+                    <p className="text-xs text-muted-foreground mt-0.5">
+                      Bessere Qualität • JavaScript-Support • Screenshots
+                    </p>
+                  </div>
+                </label>
+                {isPro && usageRemaining !== undefined && (
+                  <Badge variant="outline" className="ml-2">
+                    {usageRemaining}/20
+                  </Badge>
+                )}
+              </div>
+
+              {/* Main CTA Button */}
+              <Button
+                size="lg"
+                className="w-full h-12 text-base font-semibold group"
+                onClick={handleExtract}
+                disabled={!url.trim() || isExtracting}
+              >
+                {isExtracting ? (
+                  <>
+                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
+                    Content wird extrahiert...
+                  </>
+                ) : (
+                  <>
+                    Content importieren
+                    <ArrowRight className="ml-2 h-5 w-5 transition-transform group-hover:translate-x-1" />
+                  </>
+                )}
+              </Button>
+            </div>
+
+            {/* Popular Sources */}
+            <div className="space-y-2">
+              <p className="text-sm text-muted-foreground">Beliebte Quellen:</p>
+              <div className="grid grid-cols-2 gap-2">
+                {popularSources.map((source) => (
+                  <button
+                    key={source.name}
+                    onClick={() => setUrl(`https://${source.example}`)}
+                    className="flex items-center gap-2 p-2 rounded-lg border border-border hover:bg-muted/50 transition-colors text-sm"
+                  >
+                    <span>{source.icon}</span>
+                    <span>{source.name}</span>
+                  </button>
+                ))}
+              </div>
+            </div>
+          </TabsContent>
+
+          <TabsContent value="text" className="space-y-4 mt-6">
+            <div className="space-y-3">
+              <textarea
+                placeholder="Füge deinen Newsletter, Blog-Artikel oder anderen Content hier ein..."
+                value={value}
+                onChange={(e) => onTextInput(e.target.value)}
+                className="w-full min-h-[200px] p-4 rounded-lg border bg-background resize-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-all"
+              />
+              <div className="flex items-center justify-between">
+                <span className="text-sm text-muted-foreground">
+                  {value.length} Zeichen
+                </span>
+                {value.length > 100 && (
+                  <Badge variant="outline" className="gap-1">
+                    <CheckCircle2 className="h-3 w-3" />
+                    Bereit zur Generierung
+                  </Badge>
+                )}
+              </div>
+            </div>
+          </TabsContent>
+        </Tabs>
+
+        {/* Help Text */}
+        <div className="flex items-start gap-2 p-3 rounded-lg bg-muted/30">
+          <AlertCircle className="h-4 w-4 text-muted-foreground mt-0.5 flex-shrink-0" />
+          <p className="text-xs text-muted-foreground">
+            <strong>Tipp:</strong> Die KI analysiert deinen Content und erstellt automatisch
+            optimierte Posts für LinkedIn, X und Instagram. Jeder Post wird auf die jeweilige
+            Plattform zugeschnitten.
+          </p>
+        </div>
+      </div>
+    </Card>
+  );
+}
\ No newline at end of file
diff --git a/src/components/common/PremiumComparison.tsx b/src/components/common/PremiumComparison.tsx
new file mode 100644
index 0000000..5a18f77
--- /dev/null
+++ b/src/components/common/PremiumComparison.tsx
@@ -0,0 +1,271 @@
+import { Button } from '@/components/ui/button';
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
+import { Badge } from '@/components/ui/badge';
+import { cn } from '@/lib/utils';
+import {
+  Check,
+  X,
+  Sparkles,
+  Zap,
+  Infinity,
+  Shield,
+  TrendingUp,
+  Users,
+  Clock,
+  Globe,
+  Download,
+  BarChart3
+} from 'lucide-react';
+import type { ReactNode } from 'react';
+
+interface PremiumComparisonProps {
+  currentPlan?: 'free' | 'pro';
+  onUpgradeClick?: () => void;
+  className?: string;
+  showMonthlyPrice?: boolean;
+}
+
+interface FeatureItem {
+  name: string;
+  free: string | boolean | ReactNode;
+  pro: string | boolean | ReactNode;
+  icon?: ReactNode;
+  highlight?: boolean;
+}
+
+export function PremiumComparison({
+  currentPlan = 'free',
+  onUpgradeClick,
+  className,
+  showMonthlyPrice = true,
+}: PremiumComparisonProps) {
+  const features: FeatureItem[] = [
+    {
+      name: 'Posts pro Tag',
+      free: '3 Posts',
+      pro: <span className="flex items-center gap-1"><Infinity className="h-4 w-4" /> Unbegrenzt</span>,
+      icon: <Sparkles className="h-4 w-4" />,
+      highlight: true,
+    },
+    {
+      name: 'Premium URL-Extraktion',
+      free: false,
+      pro: '20/Monat',
+      icon: <Zap className="h-4 w-4" />,
+    },
+    {
+      name: 'Standard URL-Import',
+      free: true,
+      pro: true,
+      icon: <Globe className="h-4 w-4" />,
+    },
+    {
+      name: 'Alle Plattformen',
+      free: true,
+      pro: true,
+      icon: <Users className="h-4 w-4" />,
+    },
+    {
+      name: 'Post-Regenerierung',
+      free: '3x pro Post',
+      pro: 'Unbegrenzt',
+      icon: <TrendingUp className="h-4 w-4" />,
+    },
+    {
+      name: 'Gespeicherte Posts',
+      free: '10 Posts',
+      pro: 'Unbegrenzt',
+      icon: <Download className="h-4 w-4" />,
+    },
+    {
+      name: 'Prioritäts-Support',
+      free: false,
+      pro: true,
+      icon: <Shield className="h-4 w-4" />,
+    },
+    {
+      name: 'Analytics & Insights',
+      free: false,
+      pro: 'Coming Soon',
+      icon: <BarChart3 className="h-4 w-4" />,
+    },
+    {
+      name: 'API-Zugang',
+      free: false,
+      pro: 'Coming Soon',
+      icon: <Clock className="h-4 w-4" />,
+    },
+  ];
+
+  const renderFeatureValue = (value: string | boolean | ReactNode) => {
+    if (typeof value === 'boolean') {
+      return value ? (
+        <Check className="h-5 w-5 text-green-500" />
+      ) : (
+        <X className="h-5 w-5 text-muted-foreground/50" />
+      );
+    }
+    return <span className="text-sm">{value}</span>;
+  };
+
+  return (
+    <div className={cn("space-y-6", className)}>
+      {/* Header */}
+      <div className="text-center space-y-2">
+        <h2 className="text-2xl font-bold">Wähle deinen Plan</h2>
+        <p className="text-muted-foreground">
+          Starte kostenlos oder hole dir unbegrenzten Zugang
+        </p>
+      </div>
+
+      {/* Plan Cards */}
+      <div className="grid md:grid-cols-2 gap-6 max-w-4xl mx-auto">
+        {/* Free Plan */}
+        <Card className={cn(
+          "relative",
+          currentPlan === 'free' && "border-primary"
+        )}>
+          {currentPlan === 'free' && (
+            <Badge className="absolute -top-3 left-1/2 -translate-x-1/2">
+              Aktueller Plan
+            </Badge>
+          )}
+          <CardHeader>
+            <CardTitle className="flex items-center justify-between">
+              <span>Free</span>
+              <span className="text-2xl font-bold">0€</span>
+            </CardTitle>
+            <CardDescription>
+              Perfekt zum Ausprobieren
+            </CardDescription>
+          </CardHeader>
+          <CardContent className="space-y-4">
+            <ul className="space-y-3">
+              {features.slice(0, 5).map((feature) => (
+                <li key={feature.name} className="flex items-start gap-3">
+                  <div className="mt-0.5">{feature.icon}</div>
+                  <div className="flex-1">
+                    <p className="text-sm font-medium">{feature.name}</p>
+                    <div className="mt-0.5">
+                      {renderFeatureValue(feature.free)}
+                    </div>
+                  </div>
+                </li>
+              ))}
+            </ul>
+            {currentPlan === 'free' && (
+              <Button variant="outline" className="w-full" disabled>
+                Aktueller Plan
+              </Button>
+            )}
+          </CardContent>
+        </Card>
+
+        {/* Pro Plan */}
+        <Card className={cn(
+          "relative border-2",
+          currentPlan === 'pro' ? "border-primary" : "border-primary/50"
+        )}>
+          <div className="absolute -top-3 left-1/2 -translate-x-1/2 flex gap-2">
+            {currentPlan === 'pro' ? (
+              <Badge>Aktueller Plan</Badge>
+            ) : (
+              <Badge variant="default" className="bg-gradient-to-r from-primary to-accent">
+                Empfohlen
+              </Badge>
+            )}
+          </div>
+          <CardHeader>
+            <CardTitle className="flex items-center justify-between">
+              <span className="flex items-center gap-2">
+                Pro
+                <Sparkles className="h-5 w-5 text-primary" />
+              </span>
+              <div className="text-right">
+                {showMonthlyPrice ? (
+                  <>
+                    <span className="text-2xl font-bold">19€</span>
+                    <span className="text-sm text-muted-foreground">/Monat</span>
+                  </>
+                ) : (
+                  <>
+                    <span className="text-2xl font-bold">197€</span>
+                    <span className="text-sm text-muted-foreground">/Jahr</span>
+                    <Badge variant="secondary" className="ml-2">-20%</Badge>
+                  </>
+                )}
+              </div>
+            </CardTitle>
+            <CardDescription>
+              Unbegrenzte Posts & Premium-Features
+            </CardDescription>
+          </CardHeader>
+          <CardContent className="space-y-4">
+            <ul className="space-y-3">
+              {features.map((feature) => (
+                <li
+                  key={feature.name}
+                  className={cn(
+                    "flex items-start gap-3",
+                    feature.highlight && "font-medium"
+                  )}
+                >
+                  <div className="mt-0.5">{feature.icon}</div>
+                  <div className="flex-1">
+                    <p className="text-sm">{feature.name}</p>
+                    <div className="mt-0.5">
+                      {renderFeatureValue(feature.pro)}
+                    </div>
+                  </div>
+                </li>
+              ))}
+            </ul>
+            {currentPlan === 'pro' ? (
+              <Button variant="outline" className="w-full" disabled>
+                Aktueller Plan
+              </Button>
+            ) : (
+              <Button
+                className="w-full bg-gradient-to-r from-primary to-accent hover:opacity-90"
+                onClick={onUpgradeClick}
+              >
+                Jetzt upgraden
+              </Button>
+            )}
+          </CardContent>
+        </Card>
+      </div>
+
+      {/* Trust Badges */}
+      <div className="flex flex-wrap justify-center gap-6 text-sm text-muted-foreground">
+        <div className="flex items-center gap-2">
+          <Shield className="h-4 w-4" />
+          <span>SSL-verschlüsselt</span>
+        </div>
+        <div className="flex items-center gap-2">
+          <Clock className="h-4 w-4" />
+          <span>Jederzeit kündbar</span>
+        </div>
+        <div className="flex items-center gap-2">
+          <Users className="h-4 w-4" />
+          <span>2000+ zufriedene Nutzer</span>
+        </div>
+      </div>
+
+      {/* FAQ Teaser */}
+      <Card className="bg-muted/30 border-dashed">
+        <CardContent className="pt-6">
+          <div className="text-center space-y-3">
+            <h3 className="font-semibold">Noch Fragen?</h3>
+            <p className="text-sm text-muted-foreground">
+              Teste Pro 7 Tage kostenlos und überzeuge dich selbst
+            </p>
+            <Button variant="link" className="text-primary">
+              Mehr erfahren →
+            </Button>
+          </div>
+        </CardContent>
+      </Card>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/src/components/common/SkeletonLoaders.tsx b/src/components/common/SkeletonLoaders.tsx
new file mode 100644
index 0000000..50fd067
--- /dev/null
+++ b/src/components/common/SkeletonLoaders.tsx
@@ -0,0 +1,278 @@
+import { cn } from '@/lib/utils';
+
+interface SkeletonProps {
+  className?: string;
+}
+
+export function Skeleton({ className }: SkeletonProps) {
+  return (
+    <div
+      className={cn(
+        "animate-pulse rounded-md bg-muted",
+        className
+      )}
+    />
+  );
+}
+
+// Content Extraction Skeleton
+export function ExtractionSkeleton() {
+  return (
+    <div className="space-y-4 p-6">
+      <div className="flex items-center space-x-4">
+        <Skeleton className="h-12 w-12 rounded-full" />
+        <div className="space-y-2 flex-1">
+          <Skeleton className="h-4 w-3/4" />
+          <Skeleton className="h-3 w-1/2" />
+        </div>
+      </div>
+
+      <div className="space-y-3">
+        <Skeleton className="h-20 w-full" />
+        <div className="flex gap-2">
+          <Skeleton className="h-8 w-24" />
+          <Skeleton className="h-8 w-32" />
+        </div>
+      </div>
+
+      {/* Progress indicator */}
+      <div className="space-y-2">
+        <div className="flex justify-between text-sm">
+          <span className="text-muted-foreground">Extrahiere Content...</span>
+          <span className="text-muted-foreground">45%</span>
+        </div>
+        <div className="h-2 bg-muted rounded-full overflow-hidden">
+          <div className="h-full bg-primary/50 rounded-full animate-progress" style={{ width: '45%' }} />
+        </div>
+      </div>
+    </div>
+  );
+}
+
+// Post Generation Skeleton
+export function PostGenerationSkeleton({ platform }: { platform: string }) {
+  return (
+    <div className="border rounded-lg p-4 space-y-4">
+      <div className="flex items-center justify-between">
+        <div className="flex items-center gap-2">
+          <Skeleton className="h-8 w-8 rounded-full" />
+          <Skeleton className="h-5 w-24" />
+        </div>
+        <Skeleton className="h-6 w-16 rounded-full" />
+      </div>
+
+      <div className="space-y-2">
+        <Skeleton className="h-4 w-full" />
+        <Skeleton className="h-4 w-5/6" />
+        <Skeleton className="h-4 w-4/6" />
+        <Skeleton className="h-4 w-full" />
+        <Skeleton className="h-4 w-3/4" />
+      </div>
+
+      <div className="flex gap-2">
+        <Skeleton className="h-8 w-20" />
+        <Skeleton className="h-8 w-20" />
+        <Skeleton className="h-8 w-20" />
+      </div>
+
+      {/* Platform-specific animation overlay */}
+      <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
+        <div className="text-6xl animate-bounce opacity-20">
+          {platform === 'linkedin' && '💼'}
+          {platform === 'x' && '🐦'}
+          {platform === 'instagram' && '📸'}
+        </div>
+      </div>
+    </div>
+  );
+}
+
+// Post Card Skeleton
+export function PostCardSkeleton() {
+  return (
+    <div className="border rounded-lg p-6 space-y-4">
+      <div className="space-y-3">
+        <Skeleton className="h-4 w-full" />
+        <Skeleton className="h-4 w-5/6" />
+        <Skeleton className="h-4 w-4/6" />
+        <Skeleton className="h-4 w-full" />
+        <Skeleton className="h-4 w-3/4" />
+        <Skeleton className="h-4 w-5/6" />
+      </div>
+
+      <div className="pt-4 border-t">
+        <div className="flex items-center justify-between">
+          <Skeleton className="h-5 w-24 rounded-full" />
+          <div className="flex gap-2">
+            <Skeleton className="h-8 w-8 rounded" />
+            <Skeleton className="h-8 w-8 rounded" />
+            <Skeleton className="h-8 w-8 rounded" />
+            <Skeleton className="h-8 w-8 rounded" />
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+}
+
+// Analytics Skeleton
+export function AnalyticsSkeleton() {
+  return (
+    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+      {[1, 2, 3].map((i) => (
+        <div key={i} className="border rounded-lg p-4 space-y-3">
+          <div className="flex items-center justify-between">
+            <Skeleton className="h-4 w-20" />
+            <Skeleton className="h-5 w-5 rounded" />
+          </div>
+          <Skeleton className="h-8 w-24" />
+          <div className="flex items-center gap-2">
+            <Skeleton className="h-3 w-3 rounded-full" />
+            <Skeleton className="h-3 w-16" />
+          </div>
+        </div>
+      ))}
+    </div>
+  );
+}
+
+// Platform Selector Skeleton
+export function PlatformSelectorSkeleton() {
+  return (
+    <div className="flex gap-3">
+      {[1, 2, 3].map((i) => (
+        <div key={i} className="flex-1">
+          <Skeleton className="h-24 w-full rounded-lg" />
+        </div>
+      ))}
+    </div>
+  );
+}
+
+// List Skeleton
+export function ListSkeleton({ items = 3 }: { items?: number }) {
+  return (
+    <div className="space-y-3">
+      {Array.from({ length: items }).map((_, i) => (
+        <div key={i} className="flex items-center space-x-3">
+          <Skeleton className="h-10 w-10 rounded" />
+          <div className="flex-1 space-y-2">
+            <Skeleton className="h-4 w-3/4" />
+            <Skeleton className="h-3 w-1/2" />
+          </div>
+          <Skeleton className="h-8 w-16" />
+        </div>
+      ))}
+    </div>
+  );
+}
+
+// Enhanced Loading States with Messages
+interface LoadingStateProps {
+  message?: string;
+  subMessage?: string;
+  progress?: number;
+  className?: string;
+}
+
+export function ExtractingContent({
+  message = "Analysiere Content...",
+  subMessage = "Dies kann bis zu 30 Sekunden dauern",
+  progress,
+  className
+}: LoadingStateProps) {
+  const steps = [
+    "Lade Webseite...",
+    "Extrahiere Hauptinhalt...",
+    "Bereinige Formatierung...",
+    "Optimiere für KI-Verarbeitung..."
+  ];
+
+  const currentStep = progress ? Math.floor((progress / 100) * steps.length) : 0;
+
+  return (
+    <div className={cn("space-y-4", className)}>
+      <div className="text-center space-y-2">
+        <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10">
+          <div className="w-10 h-10 border-3 border-primary border-t-transparent rounded-full animate-spin" />
+        </div>
+        <h3 className="text-lg font-semibold">{message}</h3>
+        <p className="text-sm text-muted-foreground">{subMessage}</p>
+      </div>
+
+      {/* Step Progress */}
+      <div className="space-y-2">
+        {steps.map((step, index) => (
+          <div
+            key={index}
+            className={cn(
+              "flex items-center gap-3 text-sm",
+              index <= currentStep ? "text-foreground" : "text-muted-foreground/50"
+            )}
+          >
+            <div className={cn(
+              "h-2 w-2 rounded-full",
+              index < currentStep ? "bg-primary" :
+              index === currentStep ? "bg-primary animate-pulse" : "bg-muted"
+            )} />
+            <span>{step}</span>
+          </div>
+        ))}
+      </div>
+
+      {progress !== undefined && (
+        <div className="space-y-1">
+          <div className="h-2 bg-muted rounded-full overflow-hidden">
+            <div
+              className="h-full bg-primary transition-all duration-500 ease-out rounded-full"
+              style={{ width: `${progress}%` }}
+            />
+          </div>
+          <p className="text-xs text-center text-muted-foreground">{progress}%</p>
+        </div>
+      )}
+    </div>
+  );
+}
+
+export function GeneratingPosts({
+  platform,
+  message = "Generiere Posts...",
+  subMessage,
+  className
+}: LoadingStateProps & { platform?: string }) {
+  const platformEmojis: Record<string, string> = {
+    linkedin: '💼',
+    x: '🐦',
+    instagram: '📸',
+  };
+
+  return (
+    <div className={cn("space-y-4", className)}>
+      <div className="text-center space-y-2">
+        <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 relative">
+          {platform && (
+            <span className="absolute text-3xl animate-pulse">
+              {platformEmojis[platform]}
+            </span>
+          )}
+          <div className="w-16 h-16 border-3 border-primary/30 border-t-primary rounded-full animate-spin" />
+        </div>
+        <h3 className="text-lg font-semibold">{message}</h3>
+        {subMessage && (
+          <p className="text-sm text-muted-foreground">{subMessage}</p>
+        )}
+      </div>
+
+      <div className="flex justify-center gap-2">
+        {[1, 2, 3].map((i) => (
+          <div
+            key={i}
+            className="w-2 h-2 bg-primary rounded-full animate-bounce"
+            style={{ animationDelay: `${i * 0.1}s` }}
+          />
+        ))}
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/src/components/common/WorkflowStepper.tsx b/src/components/common/WorkflowStepper.tsx
new file mode 100644
index 0000000..6a260b4
--- /dev/null
+++ b/src/components/common/WorkflowStepper.tsx
@@ -0,0 +1,189 @@
+import { cn } from "@/lib/utils";
+import { Check, FileText, Sparkles, Share2 } from "lucide-react";
+
+export type WorkflowStep = 'input' | 'generate' | 'share';
+
+interface WorkflowStepperProps {
+  currentStep: WorkflowStep;
+  completedSteps?: WorkflowStep[];
+  onStepClick?: (step: WorkflowStep) => void;
+  className?: string;
+}
+
+const steps = [
+  {
+    id: 'input' as WorkflowStep,
+    label: 'Import Content',
+    description: 'URL oder Text eingeben',
+    icon: FileText,
+  },
+  {
+    id: 'generate' as WorkflowStep,
+    label: 'Posts generieren',
+    description: 'KI erstellt Beiträge',
+    icon: Sparkles,
+  },
+  {
+    id: 'share' as WorkflowStep,
+    label: 'Teilen & Speichern',
+    description: 'Bearbeiten und verteilen',
+    icon: Share2,
+  },
+];
+
+export function WorkflowStepper({
+  currentStep,
+  completedSteps = [],
+  onStepClick,
+  className,
+}: WorkflowStepperProps) {
+  const getStepStatus = (stepId: WorkflowStep) => {
+    if (completedSteps.includes(stepId)) return 'completed';
+    if (currentStep === stepId) return 'current';
+    return 'upcoming';
+  };
+
+  const getStepIndex = (stepId: WorkflowStep) => {
+    return steps.findIndex(s => s.id === stepId);
+  };
+
+  const isStepClickable = (stepId: WorkflowStep) => {
+    if (!onStepClick) return false;
+    // Can click on completed steps or current step
+    return completedSteps.includes(stepId) || currentStep === stepId;
+  };
+
+  return (
+    <div className={cn("w-full", className)}>
+      {/* Desktop View */}
+      <div className="hidden md:block">
+        <nav aria-label="Workflow Progress">
+          <ol className="flex items-center justify-between">
+            {steps.map((step, index) => {
+              const status = getStepStatus(step.id);
+              const Icon = step.icon;
+              const isClickable = isStepClickable(step.id);
+              const isLast = index === steps.length - 1;
+
+              return (
+                <li key={step.id} className="relative flex-1">
+                  <div
+                    className={cn(
+                      "flex flex-col items-center group",
+                      isClickable && "cursor-pointer"
+                    )}
+                    onClick={() => isClickable && onStepClick?.(step.id)}
+                  >
+                    {/* Progress Line */}
+                    {!isLast && (
+                      <div
+                        className={cn(
+                          "absolute left-[50%] right-[-50%] top-5 h-0.5 -z-10",
+                          status === 'completed' ||
+                          (status === 'current' && getStepIndex(step.id) < getStepIndex(currentStep))
+                            ? "bg-primary"
+                            : "bg-muted"
+                        )}
+                      />
+                    )}
+
+                    {/* Step Circle */}
+                    <div
+                      className={cn(
+                        "relative flex h-10 w-10 items-center justify-center rounded-full border-2 transition-all",
+                        status === 'completed' && "border-primary bg-primary text-primary-foreground",
+                        status === 'current' && "border-primary bg-background text-primary animate-pulse",
+                        status === 'upcoming' && "border-muted bg-muted/30 text-muted-foreground",
+                        isClickable && "group-hover:scale-110"
+                      )}
+                    >
+                      {status === 'completed' ? (
+                        <Check className="h-5 w-5" />
+                      ) : (
+                        <Icon className="h-5 w-5" />
+                      )}
+                      <span className="absolute -top-2 -right-2">
+                        {status === 'current' && (
+                          <span className="flex h-3 w-3">
+                            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75" />
+                            <span className="relative inline-flex rounded-full h-3 w-3 bg-primary" />
+                          </span>
+                        )}
+                      </span>
+                    </div>
+
+                    {/* Step Label */}
+                    <div className="mt-3 text-center">
+                      <p
+                        className={cn(
+                          "text-sm font-medium transition-colors",
+                          status === 'current' && "text-primary",
+                          status === 'completed' && "text-foreground",
+                          status === 'upcoming' && "text-muted-foreground"
+                        )}
+                      >
+                        {step.label}
+                      </p>
+                      <p className="mt-1 text-xs text-muted-foreground">
+                        {step.description}
+                      </p>
+                    </div>
+                  </div>
+                </li>
+              );
+            })}
+          </ol>
+        </nav>
+      </div>
+
+      {/* Mobile View - Compact */}
+      <div className="md:hidden">
+        <div className="flex items-center justify-between px-4 py-3 bg-muted/30 rounded-lg">
+          {steps.map((step, index) => {
+            const status = getStepStatus(step.id);
+            const isClickable = isStepClickable(step.id);
+
+            return (
+              <div key={step.id} className="flex items-center">
+                <button
+                  onClick={() => isClickable && onStepClick?.(step.id)}
+                  disabled={!isClickable}
+                  className={cn(
+                    "relative flex h-8 w-8 items-center justify-center rounded-full border transition-all",
+                    status === 'completed' && "border-primary bg-primary text-primary-foreground",
+                    status === 'current' && "border-primary bg-background text-primary",
+                    status === 'upcoming' && "border-muted bg-muted/30 text-muted-foreground",
+                    isClickable && "active:scale-95"
+                  )}
+                >
+                  {status === 'completed' ? (
+                    <Check className="h-4 w-4" />
+                  ) : (
+                    <span className="text-xs font-semibold">{index + 1}</span>
+                  )}
+                </button>
+                {index < steps.length - 1 && (
+                  <div
+                    className={cn(
+                      "w-8 h-0.5 mx-1",
+                      status === 'completed' ? "bg-primary" : "bg-muted"
+                    )}
+                  />
+                )}
+              </div>
+            );
+          })}
+        </div>
+        {/* Current Step Info */}
+        <div className="mt-2 text-center">
+          <p className="text-sm font-medium text-primary">
+            {steps.find(s => s.id === currentStep)?.label}
+          </p>
+          <p className="text-xs text-muted-foreground">
+            {steps.find(s => s.id === currentStep)?.description}
+          </p>
+        </div>
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/src/components/layouts/UnifiedLayout.tsx b/src/components/layouts/UnifiedLayout.tsx
new file mode 100644
index 0000000..3a0ab72
--- /dev/null
+++ b/src/components/layouts/UnifiedLayout.tsx
@@ -0,0 +1,336 @@
+import { ReactNode, useState, useEffect } from 'react';
+import { cn } from '@/lib/utils';
+import { Button } from '@/components/ui/button';
+import { Menu, X, ChevronLeft, ChevronRight } from 'lucide-react';
+
+interface UnifiedLayoutProps {
+  header?: ReactNode;
+  inputArea: ReactNode;
+  outputArea: ReactNode;
+  sidebarArea?: ReactNode;
+  className?: string;
+  children?: ReactNode;
+}
+
+type LayoutMode = 'two-column' | 'single-column' | 'mobile-tabs';
+
+export function UnifiedLayout({
+  header,
+  inputArea,
+  outputArea,
+  sidebarArea,
+  className,
+  children,
+}: UnifiedLayoutProps) {
+  const [layoutMode, setLayoutMode] = useState<LayoutMode>('two-column');
+  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
+  const [mobileTab, setMobileTab] = useState<'input' | 'output'>('input');
+  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
+
+  // Determine layout mode based on viewport
+  useEffect(() => {
+    const handleResize = () => {
+      const width = window.innerWidth;
+
+      if (width < 768) {
+        setLayoutMode('mobile-tabs');
+      } else if (width < 1024) {
+        setLayoutMode('single-column');
+      } else {
+        setLayoutMode('two-column');
+      }
+    };
+
+    handleResize();
+    window.addEventListener('resize', handleResize);
+
+    return () => window.removeEventListener('resize', handleResize);
+  }, []);
+
+  // Desktop Two-Column Layout
+  if (layoutMode === 'two-column') {
+    return (
+      <div className={cn('min-h-screen bg-background', className)}>
+        {/* Header */}
+        {header && (
+          <div className="sticky top-0 z-40 border-b bg-background/95 backdrop-blur-sm">
+            <div className="container mx-auto px-4 py-4">
+              {header}
+            </div>
+          </div>
+        )}
+
+        {/* Main Content Area */}
+        <div className="container mx-auto px-4 py-6">
+          <div className="grid grid-cols-12 gap-6">
+            {/* Input Column (60%) */}
+            <div className="col-span-7">
+              <div className="sticky top-24 max-h-[calc(100vh-8rem)] overflow-y-auto">
+                {inputArea}
+              </div>
+            </div>
+
+            {/* Output Column (40%) */}
+            <div className="col-span-5">
+              <div className="space-y-4">
+                {outputArea}
+              </div>
+            </div>
+          </div>
+        </div>
+
+        {/* Sidebar (if provided) */}
+        {sidebarArea && (
+          <div
+            className={cn(
+              "fixed right-0 top-0 h-full z-30 transition-all duration-300 bg-background border-l",
+              sidebarCollapsed ? "w-12" : "w-80"
+            )}
+          >
+            <Button
+              variant="ghost"
+              size="icon"
+              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
+              className="absolute left-2 top-4"
+            >
+              {sidebarCollapsed ? <ChevronLeft /> : <ChevronRight />}
+            </Button>
+            <div className={cn(
+              "pt-16 h-full overflow-y-auto",
+              sidebarCollapsed && "hidden"
+            )}>
+              {sidebarArea}
+            </div>
+          </div>
+        )}
+
+        {children}
+      </div>
+    );
+  }
+
+  // Tablet Single-Column Layout
+  if (layoutMode === 'single-column') {
+    return (
+      <div className={cn('min-h-screen bg-background', className)}>
+        {/* Header */}
+        {header && (
+          <div className="sticky top-0 z-40 border-b bg-background/95 backdrop-blur-sm">
+            <div className="container mx-auto px-4 py-4">
+              {header}
+            </div>
+          </div>
+        )}
+
+        {/* Main Content - Single Column */}
+        <div className="container mx-auto px-4 py-6 max-w-4xl">
+          <div className="space-y-8">
+            {/* Input Section */}
+            <section className="space-y-4">
+              <h2 className="text-lg font-semibold">Input</h2>
+              {inputArea}
+            </section>
+
+            {/* Output Section */}
+            <section className="space-y-4">
+              <h2 className="text-lg font-semibold">Generated Content</h2>
+              {outputArea}
+            </section>
+          </div>
+        </div>
+
+        {/* Sidebar as overlay on tablet */}
+        {sidebarArea && (
+          <>
+            <Button
+              variant="outline"
+              size="icon"
+              onClick={() => setIsMobileMenuOpen(true)}
+              className="fixed bottom-4 right-4 z-40 shadow-lg"
+            >
+              <Menu />
+            </Button>
+
+            {isMobileMenuOpen && (
+              <div className="fixed inset-0 z-50">
+                <div
+                  className="absolute inset-0 bg-black/50"
+                  onClick={() => setIsMobileMenuOpen(false)}
+                />
+                <div className="absolute right-0 top-0 h-full w-80 bg-background shadow-xl">
+                  <Button
+                    variant="ghost"
+                    size="icon"
+                    onClick={() => setIsMobileMenuOpen(false)}
+                    className="absolute left-2 top-2"
+                  >
+                    <X />
+                  </Button>
+                  <div className="pt-12 p-4 h-full overflow-y-auto">
+                    {sidebarArea}
+                  </div>
+                </div>
+              </div>
+            )}
+          </>
+        )}
+
+        {children}
+      </div>
+    );
+  }
+
+  // Mobile Tab Layout
+  return (
+    <div className={cn('min-h-screen bg-background pb-16', className)}>
+      {/* Header */}
+      {header && (
+        <div className="sticky top-0 z-40 border-b bg-background/95 backdrop-blur-sm">
+          <div className="px-4 py-3">
+            {header}
+          </div>
+        </div>
+      )}
+
+      {/* Tab Content */}
+      <div className="px-4 py-4">
+        {mobileTab === 'input' ? (
+          <div className="space-y-4">
+            {inputArea}
+          </div>
+        ) : (
+          <div className="space-y-4">
+            {outputArea}
+          </div>
+        )}
+      </div>
+
+      {/* Bottom Tab Navigation */}
+      <div className="fixed bottom-0 left-0 right-0 bg-background border-t z-40">
+        <div className="grid grid-cols-2">
+          <button
+            onClick={() => setMobileTab('input')}
+            className={cn(
+              "py-3 text-center transition-colors",
+              mobileTab === 'input'
+                ? "bg-primary text-primary-foreground"
+                : "text-muted-foreground"
+            )}
+          >
+            <span className="text-sm font-medium">Input</span>
+          </button>
+          <button
+            onClick={() => setMobileTab('output')}
+            className={cn(
+              "py-3 text-center transition-colors",
+              mobileTab === 'output'
+                ? "bg-primary text-primary-foreground"
+                : "text-muted-foreground"
+            )}
+          >
+            <span className="text-sm font-medium">Output</span>
+          </button>
+        </div>
+      </div>
+
+      {/* Mobile Menu Button for Sidebar */}
+      {sidebarArea && (
+        <>
+          <Button
+            variant="outline"
+            size="icon"
+            onClick={() => setIsMobileMenuOpen(true)}
+            className="fixed top-4 right-4 z-50 shadow-lg"
+          >
+            <Menu className="h-4 w-4" />
+          </Button>
+
+          {/* Mobile Sidebar Overlay */}
+          {isMobileMenuOpen && (
+            <div className="fixed inset-0 z-50">
+              <div
+                className="absolute inset-0 bg-black/50"
+                onClick={() => setIsMobileMenuOpen(false)}
+              />
+              <div className="absolute inset-x-0 bottom-0 max-h-[80vh] bg-background rounded-t-xl shadow-xl">
+                <div className="p-4">
+                  <div className="w-12 h-1 bg-muted rounded-full mx-auto mb-4" />
+                  <Button
+                    variant="ghost"
+                    size="sm"
+                    onClick={() => setIsMobileMenuOpen(false)}
+                    className="absolute right-2 top-2"
+                  >
+                    <X className="h-4 w-4" />
+                  </Button>
+                  <div className="overflow-y-auto max-h-[60vh]">
+                    {sidebarArea}
+                  </div>
+                </div>
+              </div>
+            </div>
+          )}
+        </>
+      )}
+
+      {children}
+    </div>
+  );
+}
+
+// Layout Context Provider for nested components
+import { createContext, useContext } from 'react';
+
+interface LayoutContextValue {
+  mode: LayoutMode;
+  isMobile: boolean;
+  isTablet: boolean;
+  isDesktop: boolean;
+}
+
+const LayoutContext = createContext<LayoutContextValue | null>(null);
+
+export function useLayoutContext() {
+  const context = useContext(LayoutContext);
+  if (!context) {
+    throw new Error('useLayoutContext must be used within UnifiedLayout');
+  }
+  return context;
+}
+
+// Enhanced version with context provider
+export function UnifiedLayoutWithContext(props: UnifiedLayoutProps) {
+  const [layoutMode, setLayoutMode] = useState<LayoutMode>('two-column');
+
+  useEffect(() => {
+    const handleResize = () => {
+      const width = window.innerWidth;
+
+      if (width < 768) {
+        setLayoutMode('mobile-tabs');
+      } else if (width < 1024) {
+        setLayoutMode('single-column');
+      } else {
+        setLayoutMode('two-column');
+      }
+    };
+
+    handleResize();
+    window.addEventListener('resize', handleResize);
+
+    return () => window.removeEventListener('resize', handleResize);
+  }, []);
+
+  const contextValue: LayoutContextValue = {
+    mode: layoutMode,
+    isMobile: layoutMode === 'mobile-tabs',
+    isTablet: layoutMode === 'single-column',
+    isDesktop: layoutMode === 'two-column',
+  };
+
+  return (
+    <LayoutContext.Provider value={contextValue}>
+      <UnifiedLayout {...props} />
+    </LayoutContext.Provider>
+  );
+}
\ No newline at end of file
diff --git a/src/hooks/useFeatureFlag.ts b/src/hooks/useFeatureFlag.ts
new file mode 100644
index 0000000..1f5c86e
--- /dev/null
+++ b/src/hooks/useFeatureFlag.ts
@@ -0,0 +1,287 @@
+import { useEffect, useState } from 'react';
+
+// Feature flag names
+export const FEATURE_FLAGS = {
+  NEW_UX: 'VITE_ENABLE_NEW_UX',
+  MOBILE_BOTTOM_SHEET: 'VITE_ENABLE_MOBILE_BOTTOM_SHEET',
+  PLATFORM_ANIMATIONS: 'VITE_ENABLE_PLATFORM_ANIMATIONS',
+  PREMIUM_FEATURES: 'VITE_ENABLE_PREMIUM_FEATURES',
+} as const;
+
+type FeatureFlagName = keyof typeof FEATURE_FLAGS;
+
+// Analytics event types
+interface FeatureFlagEvent {
+  flag: string;
+  enabled: boolean;
+  variant?: string;
+  userId?: string;
+  timestamp: number;
+}
+
+// Feature flag configuration
+interface FeatureFlagConfig {
+  defaultValue?: boolean;
+  rolloutPercentage?: number;
+  userGroups?: string[];
+  analyticsEnabled?: boolean;
+}
+
+/**
+ * Hook to manage feature flags with A/B testing support
+ */
+export function useFeatureFlag(
+  flagName: FeatureFlagName | string,
+  config: FeatureFlagConfig = {}
+): boolean {
+  const {
+    defaultValue = false,
+    rolloutPercentage,
+    userGroups = [],
+    analyticsEnabled = true,
+  } = config;
+
+  const [isEnabled] = useState<boolean>(() => {
+    // Get the actual env variable name
+    const envVarName = typeof flagName === 'string'
+      ? flagName
+      : FEATURE_FLAGS[flagName];
+
+    // Check environment variable
+    const envValue = import.meta.env[envVarName];
+
+    if (envValue !== undefined) {
+      return envValue === 'true' || envValue === true;
+    }
+
+    // Check localStorage override (for testing)
+    const localOverride = localStorage.getItem(`feature_${envVarName}`);
+    if (localOverride !== null) {
+      return localOverride === 'true';
+    }
+
+    // Check rollout percentage if specified
+    if (rolloutPercentage !== undefined) {
+      const userHash = getUserHash();
+      const threshold = rolloutPercentage / 100;
+      return userHash < threshold;
+    }
+
+    // Check user groups if specified
+    if (userGroups.length > 0) {
+      const currentUserGroup = getCurrentUserGroup();
+      return userGroups.includes(currentUserGroup);
+    }
+
+    return defaultValue;
+  });
+
+  // Track feature flag usage
+  useEffect(() => {
+    if (analyticsEnabled) {
+      trackFeatureFlagUsage({
+        flag: typeof flagName === 'string' ? flagName : FEATURE_FLAGS[flagName],
+        enabled: isEnabled,
+        timestamp: Date.now(),
+      });
+    }
+  }, [flagName, isEnabled, analyticsEnabled]);
+
+  return isEnabled;
+}
+
+/**
+ * Hook to get all active feature flags
+ */
+export function useActiveFeatureFlags(): string[] {
+  const [activeFlags, setActiveFlags] = useState<string[]>([]);
+
+  useEffect(() => {
+    const flags: string[] = [];
+
+    Object.entries(FEATURE_FLAGS).forEach(([key, envVar]) => {
+      const value = import.meta.env[envVar];
+      const localOverride = localStorage.getItem(`feature_${envVar}`);
+
+      if (value === 'true' || value === true || localOverride === 'true') {
+        flags.push(key);
+      }
+    });
+
+    setActiveFlags(flags);
+  }, []);
+
+  return activeFlags;
+}
+
+/**
+ * Hook for A/B testing with variants
+ */
+export function useABTest<T extends string>(
+  testName: string,
+  variants: T[],
+  config: {
+    defaultVariant: T;
+    weights?: number[];
+    analyticsEnabled?: boolean;
+  }
+): T {
+  const { defaultVariant, weights, analyticsEnabled = true } = config;
+
+  const [variant] = useState<T>(() => {
+    // Check for override in localStorage
+    const override = localStorage.getItem(`ab_test_${testName}`);
+    if (override && variants.includes(override as T)) {
+      return override as T;
+    }
+
+    // Check URL parameter override
+    const urlParams = new URLSearchParams(window.location.search);
+    const urlVariant = urlParams.get(`ab_${testName}`);
+    if (urlVariant && variants.includes(urlVariant as T)) {
+      return urlVariant as T;
+    }
+
+    // Assign variant based on weights
+    if (weights && weights.length === variants.length) {
+      const random = getUserHash();
+      let cumulative = 0;
+
+      for (let i = 0; i < weights.length; i++) {
+        cumulative += weights[i];
+        if (random < cumulative) {
+          return variants[i];
+        }
+      }
+    }
+
+    // Equal distribution if no weights specified
+    const index = Math.floor(getUserHash() * variants.length);
+    return variants[index] || defaultVariant;
+  });
+
+  // Track A/B test assignment
+  useEffect(() => {
+    if (analyticsEnabled) {
+      trackABTestAssignment(testName, variant);
+    }
+  }, [testName, variant, analyticsEnabled]);
+
+  return variant;
+}
+
+// Utility functions
+
+/**
+ * Generate consistent user hash for feature flag rollout
+ */
+function getUserHash(): number {
+  const userId = getUserId();
+  let hash = 0;
+
+  for (let i = 0; i < userId.length; i++) {
+    const char = userId.charCodeAt(i);
+    hash = ((hash << 5) - hash) + char;
+    hash = hash & hash; // Convert to 32bit integer
+  }
+
+  // Normalize to 0-1 range
+  return Math.abs(hash) / 2147483647;
+}
+
+/**
+ * Get or generate user ID for consistent feature flag assignment
+ */
+function getUserId(): string {
+  const storedId = localStorage.getItem('feature_flag_user_id');
+
+  if (storedId) {
+    return storedId;
+  }
+
+  const newId = generateUserId();
+  localStorage.setItem('feature_flag_user_id', newId);
+  return newId;
+}
+
+/**
+ * Generate a unique user ID
+ */
+function generateUserId(): string {
+  return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
+}
+
+/**
+ * Get current user group (can be extended based on your user system)
+ */
+function getCurrentUserGroup(): string {
+  // This could be based on user data, subscription status, etc.
+  // For now, return a default group
+  const userEmail = localStorage.getItem('user_email');
+
+  if (userEmail?.includes('@admin')) {
+    return 'admin';
+  }
+
+  if (userEmail?.includes('@beta')) {
+    return 'beta';
+  }
+
+  return 'default';
+}
+
+/**
+ * Track feature flag usage for analytics
+ */
+function trackFeatureFlagUsage(event: FeatureFlagEvent): void {
+  // Send to your analytics service
+  if (typeof window !== 'undefined' && (window as any).analytics) {
+    (window as any).analytics.track('Feature Flag Used', event);
+  }
+
+  // Log to console in development
+  if (import.meta.env.DEV) {
+    console.log('[Feature Flag]', event);
+  }
+}
+
+/**
+ * Track A/B test assignment
+ */
+function trackABTestAssignment(testName: string, variant: string): void {
+  // Send to your analytics service
+  if (typeof window !== 'undefined' && (window as any).analytics) {
+    (window as any).analytics.track('A/B Test Assignment', {
+      test: testName,
+      variant,
+      timestamp: Date.now(),
+    });
+  }
+
+  // Log to console in development
+  if (import.meta.env.DEV) {
+    console.log('[A/B Test]', testName, '→', variant);
+  }
+}
+
+/**
+ * Override feature flag for testing (development only)
+ */
+export function overrideFeatureFlag(
+  flagName: FeatureFlagName | string,
+  enabled: boolean
+): void {
+  if (!import.meta.env.DEV) {
+    console.warn('Feature flag override is only available in development');
+    return;
+  }
+
+  const envVarName = typeof flagName === 'string'
+    ? flagName
+    : FEATURE_FLAGS[flagName];
+
+  localStorage.setItem(`feature_${envVarName}`, String(enabled));
+
+  // Trigger re-render
+  window.dispatchEvent(new Event('feature-flag-change'));
+}
\ No newline at end of file
diff --git a/src/hooks/usePostGeneratorState.ts b/src/hooks/usePostGeneratorState.ts
new file mode 100644
index 0000000..4197179
--- /dev/null
+++ b/src/hooks/usePostGeneratorState.ts
@@ -0,0 +1,421 @@
+import { useReducer, useCallback, useEffect } from 'react';
+import type { Platform } from '@/config/platforms';
+import type { WorkflowStep } from '@/components/common/WorkflowStepper';
+
+// Types
+export interface GeneratedPost {
+  content: string;
+  platform: Platform;
+  isEdited: boolean;
+  regenerationCount: number;
+  createdAt: Date;
+  characterCount: number;
+}
+
+export interface PostGeneratorState {
+  // Workflow
+  currentStep: WorkflowStep;
+  completedSteps: WorkflowStep[];
+
+  // Input
+  sourceUrl: string;
+  inputText: string;
+  usePremiumExtraction: boolean;
+
+  // Platform Selection
+  selectedPlatforms: Platform[];
+
+  // Generated Content
+  generatedPosts: Partial<Record<Platform, GeneratedPost>>;
+
+  // Loading States
+  isExtracting: boolean;
+  isGenerating: Set<Platform>;
+  extractionProgress: number;
+  generationProgress: {
+    current: Platform | null;
+    completed: number;
+    total: number;
+  };
+
+  // Error States
+  errors: {
+    extraction?: string;
+    generation?: Partial<Record<Platform, string>>;
+  };
+
+  // Meta
+  lastSavedAt?: Date;
+  isDirty: boolean;
+}
+
+// Action Types
+type PostGeneratorAction =
+  | { type: 'SET_STEP'; step: WorkflowStep }
+  | { type: 'COMPLETE_STEP'; step: WorkflowStep }
+  | { type: 'SET_SOURCE_URL'; url: string }
+  | { type: 'SET_INPUT_TEXT'; text: string }
+  | { type: 'SET_PREMIUM_EXTRACTION'; enabled: boolean }
+  | { type: 'TOGGLE_PLATFORM'; platform: Platform }
+  | { type: 'SET_PLATFORMS'; platforms: Platform[] }
+  | { type: 'START_EXTRACTION' }
+  | { type: 'COMPLETE_EXTRACTION'; content: string }
+  | { type: 'FAIL_EXTRACTION'; error: string }
+  | { type: 'START_GENERATION'; platform: Platform }
+  | { type: 'COMPLETE_GENERATION'; platform: Platform; post: GeneratedPost }
+  | { type: 'FAIL_GENERATION'; platform: Platform; error: string }
+  | { type: 'UPDATE_POST'; platform: Platform; content: string }
+  | { type: 'SET_GENERATION_PROGRESS'; current: Platform | null; completed: number; total: number }
+  | { type: 'SET_EXTRACTION_PROGRESS'; progress: number }
+  | { type: 'MARK_SAVED' }
+  | { type: 'RESET_WORKFLOW' }
+  | { type: 'CLEAR_ERRORS' };
+
+// Initial State
+const initialState: PostGeneratorState = {
+  currentStep: 'input',
+  completedSteps: [],
+  sourceUrl: '',
+  inputText: '',
+  usePremiumExtraction: false,
+  selectedPlatforms: ['linkedin'],
+  generatedPosts: {},
+  isExtracting: false,
+  isGenerating: new Set(),
+  extractionProgress: 0,
+  generationProgress: {
+    current: null,
+    completed: 0,
+    total: 0,
+  },
+  errors: {},
+  isDirty: false,
+};
+
+// Reducer
+function postGeneratorReducer(
+  state: PostGeneratorState,
+  action: PostGeneratorAction
+): PostGeneratorState {
+  switch (action.type) {
+    case 'SET_STEP':
+      return {
+        ...state,
+        currentStep: action.step,
+      };
+
+    case 'COMPLETE_STEP':
+      return {
+        ...state,
+        completedSteps: [...new Set([...state.completedSteps, action.step])] as WorkflowStep[],
+      };
+
+    case 'SET_SOURCE_URL':
+      return {
+        ...state,
+        sourceUrl: action.url,
+        isDirty: true,
+      };
+
+    case 'SET_INPUT_TEXT':
+      return {
+        ...state,
+        inputText: action.text,
+        isDirty: true,
+      };
+
+    case 'SET_PREMIUM_EXTRACTION':
+      return {
+        ...state,
+        usePremiumExtraction: action.enabled,
+      };
+
+    case 'TOGGLE_PLATFORM':
+      const platforms = state.selectedPlatforms.includes(action.platform)
+        ? state.selectedPlatforms.filter(p => p !== action.platform)
+        : [...state.selectedPlatforms, action.platform];
+      return {
+        ...state,
+        selectedPlatforms: platforms,
+        isDirty: true,
+      };
+
+    case 'SET_PLATFORMS':
+      return {
+        ...state,
+        selectedPlatforms: action.platforms,
+        isDirty: true,
+      };
+
+    case 'START_EXTRACTION':
+      return {
+        ...state,
+        isExtracting: true,
+        extractionProgress: 0,
+        errors: { ...state.errors, extraction: undefined },
+      };
+
+    case 'COMPLETE_EXTRACTION':
+      return {
+        ...state,
+        inputText: action.content,
+        isExtracting: false,
+        extractionProgress: 100,
+        completedSteps: [...new Set([...state.completedSteps, 'input'])] as WorkflowStep[],
+        currentStep: 'generate',
+        errors: { ...state.errors, extraction: undefined },
+      };
+
+    case 'FAIL_EXTRACTION':
+      return {
+        ...state,
+        isExtracting: false,
+        extractionProgress: 0,
+        errors: { ...state.errors, extraction: action.error },
+      };
+
+    case 'START_GENERATION':
+      const newGenerating = new Set(state.isGenerating);
+      newGenerating.add(action.platform);
+      return {
+        ...state,
+        isGenerating: newGenerating,
+        errors: {
+          ...state.errors,
+          generation: {
+            ...state.errors.generation,
+            [action.platform]: undefined,
+          },
+        },
+      };
+
+    case 'COMPLETE_GENERATION':
+      const updatedGenerating = new Set(state.isGenerating);
+      updatedGenerating.delete(action.platform);
+
+      // Check if all selected platforms have been generated
+      const allGenerated = state.selectedPlatforms.every(
+        p => state.generatedPosts[p] || p === action.platform
+      );
+
+      return {
+        ...state,
+        generatedPosts: {
+          ...state.generatedPosts,
+          [action.platform]: action.post,
+        },
+        isGenerating: updatedGenerating,
+        completedSteps: allGenerated
+          ? [...new Set([...state.completedSteps, 'generate'])] as WorkflowStep[]
+          : state.completedSteps,
+        currentStep: allGenerated ? 'share' : state.currentStep,
+        errors: {
+          ...state.errors,
+          generation: {
+            ...state.errors.generation,
+            [action.platform]: undefined,
+          },
+        },
+      };
+
+    case 'FAIL_GENERATION':
+      const failGenerating = new Set(state.isGenerating);
+      failGenerating.delete(action.platform);
+      return {
+        ...state,
+        isGenerating: failGenerating,
+        errors: {
+          ...state.errors,
+          generation: {
+            ...state.errors.generation,
+            [action.platform]: action.error,
+          },
+        },
+      };
+
+    case 'UPDATE_POST':
+      const post = state.generatedPosts[action.platform];
+      if (!post) return state;
+
+      return {
+        ...state,
+        generatedPosts: {
+          ...state.generatedPosts,
+          [action.platform]: {
+            ...post,
+            content: action.content,
+            isEdited: true,
+            characterCount: action.content.length,
+          },
+        },
+        isDirty: true,
+      };
+
+    case 'SET_GENERATION_PROGRESS':
+      return {
+        ...state,
+        generationProgress: {
+          current: action.current,
+          completed: action.completed,
+          total: action.total,
+        },
+      };
+
+    case 'SET_EXTRACTION_PROGRESS':
+      return {
+        ...state,
+        extractionProgress: action.progress,
+      };
+
+    case 'MARK_SAVED':
+      return {
+        ...state,
+        lastSavedAt: new Date(),
+        isDirty: false,
+      };
+
+    case 'RESET_WORKFLOW':
+      return initialState;
+
+    case 'CLEAR_ERRORS':
+      return {
+        ...state,
+        errors: {},
+      };
+
+    default:
+      return state;
+  }
+}
+
+// Hook
+export function usePostGeneratorState() {
+  const [state, dispatch] = useReducer(postGeneratorReducer, initialState);
+
+  // Auto-save to localStorage
+  useEffect(() => {
+    if (state.isDirty && state.inputText) {
+      const savedState = {
+        inputText: state.inputText,
+        sourceUrl: state.sourceUrl,
+        selectedPlatforms: state.selectedPlatforms,
+      };
+      localStorage.setItem('postGeneratorDraft', JSON.stringify(savedState));
+    }
+  }, [state.isDirty, state.inputText, state.sourceUrl, state.selectedPlatforms]);
+
+  // Load from localStorage on mount
+  useEffect(() => {
+    const saved = localStorage.getItem('postGeneratorDraft');
+    if (saved) {
+      try {
+        const parsed = JSON.parse(saved);
+        if (parsed.inputText) {
+          dispatch({ type: 'SET_INPUT_TEXT', text: parsed.inputText });
+        }
+        if (parsed.sourceUrl) {
+          dispatch({ type: 'SET_SOURCE_URL', url: parsed.sourceUrl });
+        }
+        if (parsed.selectedPlatforms?.length) {
+          dispatch({ type: 'SET_PLATFORMS', platforms: parsed.selectedPlatforms });
+        }
+      } catch (e) {
+        console.error('Failed to load draft:', e);
+      }
+    }
+  }, []);
+
+  // Action creators
+  const actions = {
+    setStep: useCallback((step: WorkflowStep) => {
+      dispatch({ type: 'SET_STEP', step });
+    }, []),
+
+    completeStep: useCallback((step: WorkflowStep) => {
+      dispatch({ type: 'COMPLETE_STEP', step });
+    }, []),
+
+    setSourceUrl: useCallback((url: string) => {
+      dispatch({ type: 'SET_SOURCE_URL', url });
+    }, []),
+
+    setInputText: useCallback((text: string) => {
+      dispatch({ type: 'SET_INPUT_TEXT', text });
+    }, []),
+
+    setPremiumExtraction: useCallback((enabled: boolean) => {
+      dispatch({ type: 'SET_PREMIUM_EXTRACTION', enabled });
+    }, []),
+
+    togglePlatform: useCallback((platform: Platform) => {
+      dispatch({ type: 'TOGGLE_PLATFORM', platform });
+    }, []),
+
+    startExtraction: useCallback(() => {
+      dispatch({ type: 'START_EXTRACTION' });
+    }, []),
+
+    completeExtraction: useCallback((content: string) => {
+      dispatch({ type: 'COMPLETE_EXTRACTION', content });
+    }, []),
+
+    failExtraction: useCallback((error: string) => {
+      dispatch({ type: 'FAIL_EXTRACTION', error });
+    }, []),
+
+    startGeneration: useCallback((platform: Platform) => {
+      dispatch({ type: 'START_GENERATION', platform });
+    }, []),
+
+    completeGeneration: useCallback((platform: Platform, post: GeneratedPost) => {
+      dispatch({ type: 'COMPLETE_GENERATION', platform, post });
+    }, []),
+
+    failGeneration: useCallback((platform: Platform, error: string) => {
+      dispatch({ type: 'FAIL_GENERATION', platform, error });
+    }, []),
+
+    updatePost: useCallback((platform: Platform, content: string) => {
+      dispatch({ type: 'UPDATE_POST', platform, content });
+    }, []),
+
+    setGenerationProgress: useCallback(
+      (current: Platform | null, completed: number, total: number) => {
+        dispatch({ type: 'SET_GENERATION_PROGRESS', current, completed, total });
+      },
+      []
+    ),
+
+    setExtractionProgress: useCallback((progress: number) => {
+      dispatch({ type: 'SET_EXTRACTION_PROGRESS', progress });
+    }, []),
+
+    markSaved: useCallback(() => {
+      dispatch({ type: 'MARK_SAVED' });
+    }, []),
+
+    resetWorkflow: useCallback(() => {
+      localStorage.removeItem('postGeneratorDraft');
+      dispatch({ type: 'RESET_WORKFLOW' });
+    }, []),
+
+    clearErrors: useCallback(() => {
+      dispatch({ type: 'CLEAR_ERRORS' });
+    }, []),
+  };
+
+  // Computed values
+  const computed = {
+    canExtract: state.sourceUrl.trim().length > 0,
+    canGenerate: state.inputText.trim().length > 0 && state.selectedPlatforms.length > 0,
+    hasGeneratedPosts: Object.keys(state.generatedPosts).length > 0,
+    isGeneratingAny: state.isGenerating.size > 0,
+    allPlatformsGenerated: state.selectedPlatforms.every(p => state.generatedPosts[p]),
+  };
+
+  return {
+    state,
+    actions,
+    computed,
+  };
+}
\ No newline at end of file
diff --git a/src/pages/GeneratorV2.tsx b/src/pages/GeneratorV2.tsx
new file mode 100644
index 0000000..b8139b9
--- /dev/null
+++ b/src/pages/GeneratorV2.tsx
@@ -0,0 +1,415 @@
+import { useEffect, useState, useMemo, useCallback } from "react";
+import { toast } from "sonner";
+
+// Feature flag and layout components
+import { useFeatureFlag } from "@/hooks/useFeatureFlag";
+import { UnifiedLayout } from "@/components/layouts/UnifiedLayout";
+import { WorkflowStepper, type WorkflowStep } from "@/components/common/WorkflowStepper";
+import { EnhancedUrlExtractor } from "@/components/common/EnhancedUrlExtractor";
+import { CharacterCounterTextarea } from "@/components/common/CharacterCounter";
+import {
+  ExtractingContent,
+  GeneratingPosts
+} from "@/components/common/SkeletonLoaders";
+
+// Existing components and hooks
+import { SavedPosts } from "@/components/common/SavedPosts";
+import { AccountButton } from "@/components/common/AccountButton";
+import { Auth } from "@/components/common/Auth";
+import PlatformGenerators from "@/components/common/PlatformGenerators";
+import { Button } from "@/components/ui/button";
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
+import { Badge } from "@/components/ui/badge";
+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
+import { CopyButton } from "@/components/ui/copy-button";
+import {
+  SaveButton,
+  EditButton,
+  LinkedInShareButton,
+  XShareButton,
+  InstagramShareButton,
+} from "@/design-system/components/ActionButtons";
+
+// Hooks
+import { useAuth } from "@/hooks/useAuth";
+import { useSubscription } from "@/hooks/useSubscription";
+import { useContentGeneration } from "@/hooks/useContentGeneration";
+import { useUrlExtraction } from "@/hooks/useUrlExtraction";
+import { usePostEditing } from "@/hooks/usePostEditing";
+import { useUsageTracking } from "@/hooks/useUsageTracking";
+
+// Performance monitoring
+import { perfMonitor, PERF_MARKS, PERF_MEASURES } from "@/utils/performance";
+
+// Types
+import type { Platform } from "@/config/platforms";
+import { PLATFORM_LABEL } from "@/config/platforms";
+import { savePost } from "@/api/supabase";
+import {
+  createLinkedInDraftPost,
+  createLinkedInShareUrl
+} from "@/api/linkedin";
+
+// Import existing Generator for fallback
+import GeneratorV1 from "./Generator";
+
+export default function GeneratorV2() {
+  // Feature flag check
+  const newUxEnabled = useFeatureFlag('NEW_UX', {
+    rolloutPercentage: 10,
+    analyticsEnabled: true
+  });
+
+  // If feature flag is disabled, use existing Generator
+  if (!newUxEnabled) {
+    return <GeneratorV1 />;
+  }
+
+  // Mark app initialization
+  useEffect(() => {
+    perfMonitor.mark(PERF_MARKS.APP_INIT);
+  }, []);
+
+  // Local state
+  const [inputText, setInputText] = useState("");
+  const [refreshKey, setRefreshKey] = useState(0);
+  const [, setIsSidebarCollapsed] = useState(false);
+  const [, setSourceUrl] = useState("");
+  const [usePremiumExtraction] = useState(false);
+
+  // Workflow state
+  const [currentStep, setCurrentStep] = useState<WorkflowStep>('input');
+  const [completedSteps, setCompletedSteps] = useState<WorkflowStep[]>([]);
+
+  // Custom hooks
+  const { userEmail, loginOpen, setLoginOpen, searchParams } = useAuth();
+  const { hasAccess } = useSubscription();
+  const {
+    // canGenerate, // Reserved for future use
+    isPremium,
+    checkAndIncrementUsage
+  } = useUsageTracking();
+
+  // const canExtract = () => isPremium || canGenerate; // Reserved for future use
+  const isPro = hasAccess || isPremium;
+  const { postsByPlatform, setPostsByPlatform, updatePost } = useContentGeneration();
+  const { isExtracting, extractionUsage, extractContent } = useUrlExtraction();
+  const { editing, editedContent, setEditedContent, startEdit, cancelEdit, isEditing } = usePostEditing();
+
+  // Fix Magic Link auth state synchronization
+  useEffect(() => {
+    const urlParams = new URLSearchParams(window.location.search);
+    const authType = urlParams.get('type');
+
+    if (authType === 'magiclink' || authType === 'recovery') {
+      const cleanUrl = window.location.pathname;
+      window.history.replaceState({}, document.title, cleanUrl);
+      toast.success("Erfolgreich eingeloggt!");
+    }
+  }, []);
+
+  // Update workflow step based on state
+  useEffect(() => {
+    if (inputText.trim()) {
+      if (!completedSteps.includes('input')) {
+        setCompletedSteps(prev => [...prev, 'input']);
+        setCurrentStep('generate');
+      }
+    }
+
+    const hasGeneratedPosts = Object.values(postsByPlatform).some(posts => posts.length > 0);
+    if (hasGeneratedPosts) {
+      if (!completedSteps.includes('generate')) {
+        setCompletedSteps(prev => [...prev, 'generate']);
+        setCurrentStep('share');
+        perfMonitor.mark(PERF_MARKS.FIRST_POST_RENDERED);
+      }
+    }
+  }, [inputText, postsByPlatform, completedSteps]);
+
+  // Enhanced extraction handler
+  const handleExtract = useCallback(async (url: string) => {
+    if (!url) return;
+
+    perfMonitor.mark(PERF_MARKS.EXTRACTION_START);
+
+    const canProceed = await checkAndIncrementUsage();
+    if (!canProceed) {
+      return;
+    }
+
+    const result = await extractContent(url, usePremiumExtraction, isPro);
+    if (result) {
+      const prefill = [result.title, result.content]
+        .filter(Boolean)
+        .join("\n\n");
+      setInputText(prefill);
+      setSourceUrl(url);
+
+      perfMonitor.mark(PERF_MARKS.EXTRACTION_END);
+      perfMonitor.measure(PERF_MEASURES.EXTRACTION_DURATION, PERF_MARKS.EXTRACTION_START, PERF_MARKS.EXTRACTION_END);
+    }
+  }, [checkAndIncrementUsage, extractContent, usePremiumExtraction, isPro]);
+
+  // Save post handler
+  const handleSavePost = async (content: string, platform: 'linkedin' | 'x' | 'instagram' = 'linkedin') => {
+    if (!userEmail) {
+      setLoginOpen(true);
+      toast.error("Login erforderlich - Bitte logge dich ein, um Beiträge zu speichern.");
+      return;
+    }
+    try {
+      await savePost(content, platform);
+      setRefreshKey((prev) => prev + 1);
+      toast.success("Erfolgreich gespeichert - Du findest den Beitrag in der Seitenleiste \"Gespeicherte Beiträge\".");
+    } catch (error) {
+      toast.error(`Speichern fehlgeschlagen - Fehler beim Speichern: ${error instanceof Error ? error.message : String(error)}`);
+    }
+  };
+
+  const handleSaveEdit = () => {
+    if (!editing) return;
+    const { platform, index } = editing;
+    updatePost(platform, index, editedContent);
+    cancelEdit();
+  };
+
+  // Handle step navigation
+  const handleStepClick = (step: WorkflowStep) => {
+    if (completedSteps.includes(step) || currentStep === step) {
+      setCurrentStep(step);
+    }
+  };
+
+  // Render Input Area
+  const InputArea = useMemo(() => (
+    <div className="space-y-6">
+      <EnhancedUrlExtractor
+        value={inputText}
+        onContentExtracted={handleExtract}
+        onTextInput={setInputText}
+        isExtracting={isExtracting}
+        isPro={isPro}
+        usageRemaining={extractionUsage?.remaining}
+      />
+
+      {inputText.trim() && (
+        <Card>
+          <CardHeader>
+            <CardTitle>Plattform-spezifische Generierung</CardTitle>
+            <CardDescription>Erzeuge und regeneriere Beiträge pro Plattform</CardDescription>
+          </CardHeader>
+          <CardContent>
+            <PlatformGenerators
+              content={inputText}
+              onPostGenerated={(platform, post) => {
+                perfMonitor.mark(PERF_MARKS.GENERATION_END);
+                setPostsByPlatform((prev: Record<Platform, string[]>) => ({
+                  ...prev,
+                  [platform]: [...(prev[platform] || []), post]
+                }));
+                toast.success(`${PLATFORM_LABEL[platform]} Post generiert!`);
+              }}
+            />
+          </CardContent>
+        </Card>
+      )}
+    </div>
+  ), [inputText, handleExtract, isExtracting, isPro, extractionUsage?.remaining]);
+
+  // Render Output Area with loading states
+  const OutputArea = useMemo(() => {
+    // Show extraction loading state
+    if (isExtracting) {
+      return <ExtractingContent progress={50} />;
+    }
+
+    // Show generation loading state
+    const isGeneratingAny = false; // This needs to be connected to actual generation state
+
+    if (isGeneratingAny) {
+      return <GeneratingPosts platform="linkedin" />;
+    }
+
+    // Show generated posts
+    return (
+      <div className="space-y-6">
+        {(["linkedin", "x", "instagram"] as Platform[]).map((platform) => {
+          const items = postsByPlatform[platform] || [];
+          if (items.length === 0) return null;
+
+          return (
+            <Card key={platform} className="shadow-xl border-0 bg-card/50 backdrop-blur-sm">
+              <CardHeader>
+                <CardTitle>{PLATFORM_LABEL[platform]} – {items.length} Beiträge</CardTitle>
+                <CardDescription>Plattformspezifische Vorschau und Bearbeitung</CardDescription>
+              </CardHeader>
+              <CardContent>
+                <div className="grid grid-cols-1 gap-6">
+                  {items.map((post, index) => (
+                    <Card key={index} className="border-muted/50 hover:shadow-lg transition-all duration-200 hover:border-primary/20">
+                      <CardContent className="p-6">
+                        {isEditing(platform, index) ? (
+                          <div className="space-y-4">
+                            <CharacterCounterTextarea
+                              value={editedContent}
+                              onChange={setEditedContent}
+                              platform={platform}
+                              rows={8}
+                            />
+                            <div className="flex justify-end gap-2">
+                              <Button variant="ghost" size="sm" onClick={cancelEdit}>
+                                Abbrechen
+                              </Button>
+                              <SaveButton size="sm" onClick={handleSaveEdit} />
+                            </div>
+                          </div>
+                        ) : (
+                          <>
+                            <p className="text-foreground whitespace-pre-wrap leading-relaxed mb-4">{post}</p>
+                            <div className="flex justify-between items-center pt-4 border-t border-muted/30">
+                              <Badge variant="outline" className="text-xs">
+                                {PLATFORM_LABEL[platform]} · Post #{index + 1}
+                              </Badge>
+                              <div className="flex gap-2">
+                                <CopyButton
+                                  text={post}
+                                  size="sm"
+                                  variant="ghost"
+                                  onCopy={() => toast.success('Beitrag kopiert!')}
+                                />
+                                <EditButton
+                                  size="sm"
+                                  onClick={() => startEdit(platform, index, post)}
+                                  text=""
+                                  title="Beitrag bearbeiten"
+                                />
+                                <SaveButton
+                                  size="sm"
+                                  onClick={() => handleSavePost(post, platform)}
+                                  text=""
+                                  title="Beitrag speichern"
+                                />
+                                {/* Platform-specific share buttons */}
+                                {platform === "linkedin" && (
+                                  <LinkedInShareButton
+                                    size="sm"
+                                    text=""
+                                    onClick={async () => {
+                                      try {
+                                        const accessToken = import.meta.env.VITE_LINKEDIN_ACCESS_TOKEN;
+                                        const authorUrn = import.meta.env.VITE_LINKEDIN_AUTHOR_URN;
+                                        const hasValidCredentials =
+                                          accessToken &&
+                                          authorUrn &&
+                                          !accessToken.includes('YOUR_') &&
+                                          !authorUrn.includes('YOUR_');
+
+                                        if (hasValidCredentials) {
+                                          const result = await createLinkedInDraftPost(post, { accessToken, authorUrn });
+                                          window.open(result.draftUrl, "_blank");
+                                          toast.success("LinkedIn Draft erstellt! 🚀");
+                                        } else {
+                                          const linkedinUrl = createLinkedInShareUrl(post);
+                                          window.open(linkedinUrl, "_blank");
+                                        }
+                                      } catch (error) {
+                                        const linkedinUrl = createLinkedInShareUrl(post);
+                                        window.open(linkedinUrl, "_blank");
+                                      }
+                                    }}
+                                    title="Auf LinkedIn teilen"
+                                  />
+                                )}
+                                {platform === "x" && (
+                                  <XShareButton
+                                    size="sm"
+                                    text=""
+                                    tweetContent={post}
+                                    title="Auf X teilen"
+                                  />
+                                )}
+                                {platform === "instagram" && (
+                                  <InstagramShareButton
+                                    size="sm"
+                                    text=""
+                                    postContent={post}
+                                    title="Auf Instagram teilen"
+                                  />
+                                )}
+                              </div>
+                            </div>
+                          </>
+                        )}
+                      </CardContent>
+                    </Card>
+                  ))}
+                </div>
+              </CardContent>
+            </Card>
+          );
+        })}
+
+        {/* Placeholder when no posts */}
+        {Object.values(postsByPlatform).every(posts => posts.length === 0) && (
+          <div className="text-center py-12 text-muted-foreground">
+            <p>Noch keine Posts generiert</p>
+            <p className="text-sm mt-2">Füge Content hinzu und generiere Posts</p>
+          </div>
+        )}
+      </div>
+    );
+  }, [isExtracting, postsByPlatform, isEditing, editedContent, setEditedContent,
+      cancelEdit, handleSaveEdit, startEdit, handleSavePost]);
+
+  // Main render with UnifiedLayout
+  return (
+    <UnifiedLayout
+      header={
+        <div className="space-y-4">
+          {/* Top bar with account */}
+          <div className="flex items-center justify-between">
+            <h1 className="text-xl font-semibold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
+              Social Transformer
+            </h1>
+            <div className="flex items-center gap-4">
+              {userEmail ? (
+                <AccountButton />
+              ) : (
+                <Dialog open={loginOpen} onOpenChange={setLoginOpen}>
+                  <DialogTrigger asChild>
+                    <Button variant="default" size="sm">Login</Button>
+                  </DialogTrigger>
+                  <DialogContent>
+                    <DialogHeader>
+                      <DialogTitle>Einloggen</DialogTitle>
+                    </DialogHeader>
+                    <Auth />
+                  </DialogContent>
+                </Dialog>
+              )}
+            </div>
+          </div>
+
+          {/* Workflow Stepper */}
+          <WorkflowStepper
+            currentStep={currentStep}
+            completedSteps={completedSteps}
+            onStepClick={handleStepClick}
+          />
+        </div>
+      }
+      inputArea={InputArea}
+      outputArea={OutputArea}
+      sidebarArea={
+        <SavedPosts
+          onCollapse={setIsSidebarCollapsed}
+          refreshKey={refreshKey}
+          isAuthenticated={!!userEmail}
+          onLoginClick={() => setLoginOpen(true)}
+          initialExpanded={searchParams.get('expand') === 'saved'}
+        />
+      }
+    />
+  );
+}
\ No newline at end of file
diff --git a/src/utils/performance.ts b/src/utils/performance.ts
new file mode 100644
index 0000000..ccfc874
--- /dev/null
+++ b/src/utils/performance.ts
@@ -0,0 +1,320 @@
+import { useEffect, useRef, useState } from 'react';
+
+/**
+ * Performance monitoring utilities for tracking UX metrics
+ */
+
+// Performance mark names
+export const PERF_MARKS = {
+  APP_INIT: 'app-init',
+  EXTRACTION_START: 'extraction-start',
+  EXTRACTION_END: 'extraction-end',
+  GENERATION_START: 'generation-start',
+  GENERATION_END: 'generation-end',
+  FIRST_POST_RENDERED: 'first-post-rendered',
+  UI_INTERACTIVE: 'ui-interactive',
+} as const;
+
+// Performance measure names
+export const PERF_MEASURES = {
+  TIME_TO_INTERACTIVE: 'time-to-interactive',
+  EXTRACTION_DURATION: 'extraction-duration',
+  GENERATION_DURATION: 'generation-duration',
+  TIME_TO_FIRST_POST: 'time-to-first-post',
+} as const;
+
+/**
+ * Performance metrics collector
+ */
+class PerformanceMonitor {
+  private metrics: Map<string, number> = new Map();
+  private observers: Set<(metrics: Record<string, number>) => void> = new Set();
+
+  /**
+   * Mark a performance point
+   */
+  mark(name: string): void {
+    if (typeof window === 'undefined' || !window.performance) return;
+
+    try {
+      performance.mark(name);
+
+      // Store in our metrics
+      this.metrics.set(name, performance.now());
+
+      // Log in development
+      if (import.meta.env.DEV) {
+        console.log(`[Performance] Mark: ${name} at ${performance.now().toFixed(2)}ms`);
+      }
+    } catch (error) {
+      console.error('Performance mark failed:', error);
+    }
+  }
+
+  /**
+   * Measure between two marks
+   */
+  measure(name: string, startMark: string, endMark: string): number | null {
+    if (typeof window === 'undefined' || !window.performance) return null;
+
+    try {
+      performance.measure(name, startMark, endMark);
+
+      // Get the measure
+      const measures = performance.getEntriesByName(name);
+      const duration = measures[measures.length - 1]?.duration || 0;
+
+      // Store the measurement
+      this.metrics.set(name, duration);
+
+      // Notify observers
+      this.notifyObservers();
+
+      // Log in development
+      if (import.meta.env.DEV) {
+        console.log(`[Performance] Measure: ${name} = ${duration.toFixed(2)}ms`);
+      }
+
+      // Send to analytics
+      this.sendToAnalytics(name, duration);
+
+      return duration;
+    } catch (error) {
+      console.error('Performance measure failed:', error);
+      return null;
+    }
+  }
+
+  /**
+   * Get all metrics
+   */
+  getMetrics(): Record<string, number> {
+    return Object.fromEntries(this.metrics);
+  }
+
+  /**
+   * Clear all metrics
+   */
+  clear(): void {
+    this.metrics.clear();
+
+    if (typeof window !== 'undefined' && window.performance) {
+      performance.clearMarks();
+      performance.clearMeasures();
+    }
+  }
+
+  /**
+   * Subscribe to metrics updates
+   */
+  subscribe(callback: (metrics: Record<string, number>) => void): () => void {
+    this.observers.add(callback);
+    return () => this.observers.delete(callback);
+  }
+
+  /**
+   * Notify all observers
+   */
+  private notifyObservers(): void {
+    const metrics = this.getMetrics();
+    this.observers.forEach(callback => callback(metrics));
+  }
+
+  /**
+   * Send metrics to analytics service
+   */
+  public sendToAnalytics(name: string, value: number): void {
+    // Send to your analytics service
+    if (typeof window !== 'undefined' && (window as any).analytics) {
+      (window as any).analytics.track('Performance Metric', {
+        metric: name,
+        value,
+        timestamp: Date.now(),
+      });
+    }
+
+    // Google Analytics (if available)
+    if (typeof window !== 'undefined' && (window as any).gtag) {
+      (window as any).gtag('event', 'timing_complete', {
+        name,
+        value: Math.round(value),
+        event_category: 'Performance',
+      });
+    }
+  }
+
+  /**
+   * Track Web Vitals
+   */
+  trackWebVitals(): void {
+    if (typeof window === 'undefined') return;
+
+    // First Contentful Paint
+    const observer = new PerformanceObserver((list) => {
+      for (const entry of list.getEntries()) {
+        if (entry.name === 'first-contentful-paint') {
+          this.metrics.set('fcp', entry.startTime);
+          this.sendToAnalytics('FCP', entry.startTime);
+        }
+      }
+    });
+
+    observer.observe({ entryTypes: ['paint'] });
+
+    // Largest Contentful Paint
+    const lcpObserver = new PerformanceObserver((list) => {
+      const entries = list.getEntries();
+      const lastEntry = entries[entries.length - 1];
+      this.metrics.set('lcp', lastEntry.startTime);
+      this.sendToAnalytics('LCP', lastEntry.startTime);
+    });
+
+    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
+
+    // First Input Delay
+    const fidObserver = new PerformanceObserver((list) => {
+      const entries = list.getEntries();
+      entries.forEach((entry: any) => {
+        if ('processingStart' in entry) {
+          const fid = entry.processingStart - entry.startTime;
+          this.metrics.set('fid', fid);
+          this.sendToAnalytics('FID', fid);
+        }
+      });
+    });
+
+    fidObserver.observe({ entryTypes: ['first-input'] });
+  }
+}
+
+// Singleton instance
+export const perfMonitor = new PerformanceMonitor();
+
+/**
+ * Hook to track component render performance
+ */
+export function useRenderPerformance(componentName: string) {
+  const renderCount = useRef(0);
+  const renderTimes = useRef<number[]>([]);
+  const lastRenderTime = useRef<number>(0);
+
+  useEffect(() => {
+    const startTime = performance.now();
+    renderCount.current++;
+
+    return () => {
+      const endTime = performance.now();
+      const renderTime = endTime - startTime;
+      renderTimes.current.push(renderTime);
+      lastRenderTime.current = renderTime;
+
+      // Log slow renders
+      if (renderTime > 16.67) { // More than one frame (60fps)
+        console.warn(
+          `[Performance] Slow render in ${componentName}: ${renderTime.toFixed(2)}ms`
+        );
+      }
+
+      // Send metrics after 10 renders
+      if (renderCount.current % 10 === 0) {
+        const avgRenderTime =
+          renderTimes.current.reduce((a, b) => a + b, 0) / renderTimes.current.length;
+
+        perfMonitor.sendToAnalytics(`${componentName}_avg_render`, avgRenderTime);
+
+        // Reset for next batch
+        renderTimes.current = [];
+      }
+    };
+  });
+
+  return {
+    renderCount: renderCount.current,
+    lastRenderTime: lastRenderTime.current,
+  };
+}
+
+/**
+ * Hook to track user interaction metrics
+ */
+export function useInteractionTracking() {
+  useEffect(() => {
+    let interactionCount = 0;
+    let lastInteractionTime = 0;
+
+    const trackInteraction = (event: Event) => {
+      const now = performance.now();
+      const timeSinceLastInteraction = now - lastInteractionTime;
+
+      interactionCount++;
+      lastInteractionTime = now;
+
+      // Track rage clicks (multiple clicks in quick succession)
+      if (event.type === 'click' && timeSinceLastInteraction < 500) {
+        perfMonitor.sendToAnalytics('rage_click', interactionCount);
+      }
+
+      // Send interaction metrics periodically
+      if (interactionCount % 50 === 0) {
+        perfMonitor.sendToAnalytics('interaction_count', interactionCount);
+      }
+    };
+
+    // Track various interactions
+    document.addEventListener('click', trackInteraction);
+    document.addEventListener('input', trackInteraction);
+    document.addEventListener('scroll', trackInteraction, { passive: true });
+
+    return () => {
+      document.removeEventListener('click', trackInteraction);
+      document.removeEventListener('input', trackInteraction);
+      document.removeEventListener('scroll', trackInteraction);
+    };
+  }, []);
+}
+
+/**
+ * Hook to track API call performance
+ */
+export function useApiPerformance() {
+  const track = (apiName: string) => {
+    const startMark = `api_${apiName}_start`;
+    const endMark = `api_${apiName}_end`;
+    const measureName = `api_${apiName}_duration`;
+
+    return {
+      start: () => perfMonitor.mark(startMark),
+      end: () => {
+        perfMonitor.mark(endMark);
+        return perfMonitor.measure(measureName, startMark, endMark);
+      },
+    };
+  };
+
+  return { track };
+}
+
+/**
+ * Performance dashboard data hook
+ */
+export function usePerformanceDashboard() {
+  const [metrics, setMetrics] = useState<Record<string, number>>({});
+
+  useEffect(() => {
+    // Subscribe to metrics updates
+    const unsubscribe = perfMonitor.subscribe(setMetrics);
+
+    // Start tracking web vitals
+    perfMonitor.trackWebVitals();
+
+    return unsubscribe;
+  }, []);
+
+  return {
+    metrics,
+    clear: () => perfMonitor.clear(),
+  };
+}
+
+// Export singleton for direct use
+export default perfMonitor;
\ No newline at end of file
